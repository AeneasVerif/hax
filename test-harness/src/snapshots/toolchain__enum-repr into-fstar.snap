---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: fstar
  info:
    name: enum-repr
    manifest: enum-repr/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: true
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0
stderr = '''
Compiling enum-repr v0.1.0 (WORKSPACE_ROOT/enum-repr)
    Finished dev [unoptimized + debuginfo] target(s) in XXs'''

[stdout]
diagnostics = []

[stdout.files]
"Enum_repr.fst" = '''
module Enum_repr
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let discriminant_Foo_A: u16 = 1us

let discriminant_Foo_B: u16 = 5us

type t_Foo =
  | Foo_A : t_Foo
  | Foo_B : t_Foo
  | Foo_C : t_Foo
  | Foo_D : t_Foo

let t_Foo_cast_to_repr (x: t_Foo) : u16 =
  match x with
  | Foo_A  -> discriminant_Foo_A
  | Foo_B  -> discriminant_Foo_B
  | Foo_C  -> discriminant_Foo_B +! 1us
  | Foo_D  -> discriminant_Foo_B +! 2us

let f (_: Prims.unit) : u16 =
  let v__x:u16 = cast (discriminant_Foo_B +! 0us <: u16) <: u16 in
  cast (Enum_repr.Foo.v_C <: Prims.unit -> t_Foo) <: u16

let ff__CONST: u16 = cast (discriminant_Foo_A +! 0us <: u16) <: u16

let get_casted_repr (x: t_Foo) : u64 = cast (t_Foo_cast_to_repr x <: u16) <: u64

let get_repr (x: t_Foo) : u16 = t_Foo_cast_to_repr x
'''
