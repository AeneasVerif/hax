---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: coq
  info:
    name: guards
    manifest: guards/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: false
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0

[stdout]
diagnostics = []

[stdout.files]
"Guards.v" = '''
(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.



(* NotImplementedYet *)

Definition if_let_guard (x : t_Option ((t_Result ((t_i32)) ((t_i32))))) : t_i32 :=
  match x with
  | Option_None =>
    (0 : TODO _do_not)
  | _ =>
    match match x with
    | Option_Some (v) =>
      match v with
      | Result_Ok (y) =>
         {| Option_Some_tuple_field 1 0 := y |}
      | _ =>
        Build_Option_None_record
      end
    | _ =>
      Build_Option_None_record
    end with
    | Option_Some (x) =>
      x
    | Option_None =>
      match x with
      | Option_Some (Result_Err (y)) =>
        y
      | _ =>
        (1 : TODO _do_not)
      end
    end
  end.

Definition equivalent (x : t_Option ((t_Result ((t_i32)) ((t_i32))))) : t_i32 :=
  match x with
  | Option_None =>
    (0 : TODO _do_not)
  | _ =>
    match match x with
    | Option_Some (v) =>
      match v with
      | Result_Ok (y) =>
         {| Option_Some_0 := y |}
      | _ =>
        Build_Option_None_record
      end
    | _ =>
      Build_Option_None_record
    end with
    | Option_Some (y) =>
      y
    | Option_None =>
      match x with
      | Option_Some (Result_Err (y)) =>
        y
      | _ =>
        (1 : TODO _do_not)
      end
    end
  end.

Definition multiple_guards (x : t_Option ((t_Result ((t_i32)) ((t_i32))))) : t_i32 :=
  match x with
  | Option_None =>
    (0 : TODO _do_not)
  | _ =>
    match match x with
    | Option_Some (Result_Ok (v)) =>
      match  {| Option_Some_0 := f_add (v) ((1 : TODO _do_not)) |} with
      | Option_Some (1) =>
         {| Option_Some_tuple_field 1 0 := (0 : TODO _do_not) |}
      | _ =>
        Build_Option_None_record
      end
    | _ =>
      Build_Option_None_record
    end with
    | Option_Some (x) =>
      x
    | Option_None =>
      match match x with
      | Option_Some (v) =>
        match v with
        | Result_Ok (y) =>
           {| Option_Some_tuple_field 1 0 := y |}
        | _ =>
          Build_Option_None_record
        end
      | _ =>
        Build_Option_None_record
      end with
      | Option_Some (x) =>
        x
      | Option_None =>
        match x with
        | Option_Some (Result_Err (y)) =>
          y
        | _ =>
          (1 : TODO _do_not)
        end
      end
    end
  end.

Definition if_guard (x : t_Option ((t_i32))) : t_i32 :=
  match match x with
  | Option_Some (v) =>
    match f_gt (v) ((0 : TODO _do_not)) with
    | true =>
       {| Option_Some_tuple_field 1 0 := v |}
    | _ =>
      Build_Option_None_record
    end
  | _ =>
    Build_Option_None_record
  end with
  | Option_Some (x) =>
    x
  | Option_None =>
    (0 : TODO _do_not)
  end.
'''
_CoqProject = '''
-R ./ TODO
-arg -w
-arg all

Guards.v'''
