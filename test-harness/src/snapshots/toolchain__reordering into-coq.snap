---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: coq
  info:
    name: reordering
    manifest: reordering/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: false
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0

[stdout]
diagnostics = []

[stdout.files]
"Reordering.v" = '''
(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.



(* NotImplementedYet *)

Definition no_dependency_1_ '(_ : unit) : unit :=
  tt.

Definition no_dependency_2_ '(_ : unit) : unit :=
  tt.

Inductive t_Foo : Type :=
| Foo_A
| Foo_B.
Arguments Foo_A.
Arguments Foo_B.

Definition f '(_ : t_u32) : t_Foo :=
  Build_Foo_A_record.

Record Bar_record : Type :=
  {
    Bar_0 : t_Foo;
  }.
Arguments Build_Bar_record.
Arguments Bar_0.
#[export] Instance settable_Bar_record : Settable _ :=
  settable! (Build_Bar_record) <Bar_0>.
Notation "'Bar_Bar_record'" := Build_Bar_record.

Definition g '(_ : unit) : t_Bar :=
   {| Bar_0 := f ((32 : TODO _do_not)) |}.

Definition t_Foo_cast_to_repr (x : t_Foo) : t_isize :=
  match x with
  | Foo_A =>
    (0 : TODO _do_not)
  | Foo_B =>
    (1 : TODO _do_not)
  end.
'''
"Reordering_Independent_cycles.v" = '''
(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Definition c '(_ : unit) : unit :=
  a (tt).

Definition a '(_ : unit) : unit :=
  c (tt).

Definition d '(_ : unit) : unit :=
  b (tt).

Definition b '(_ : unit) : unit :=
  d (tt).
'''
"Reordering_Mut_rec.v" = '''
(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.
From Core Require Import Core.

(* NotImplementedYet *)

Definition ff_2_ '(_ : unit) : unit :=
  f (tt).

Definition g '(_ : unit) : unit :=
  f (tt).

Definition f '(_ : unit) : unit :=
  g (tt).
'''
_CoqProject = '''
-R ./ TODO
-arg -w
-arg all

Reordering_Mut_rec.v
Reordering_Independent_cycles.v
Reordering.v'''
