---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: coq
  info:
    name: pattern-or
    manifest: pattern-or/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: true
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0
stderr = 'Finished `dev` profile [unoptimized + debuginfo] target(s) in XXs'

[stdout]
diagnostics = []

[stdout.files]
"Pattern_or.v" = '''
(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.


Inductive t_E : Type :=
| t_E_A
| t_E_B.
Arguments t_E:clear implicits.
Arguments t_E.

Definition t_E_cast_to_repr (x : t_E) : t_isize :=
  match x with
  | t_E_A =>
    0
  | t_E_B =>
    1
  end.

(* NotImplementedYet *)

Definition bar (x : t_E) : unit :=
  match x with
  | t_E_A
  | t_E_B =>
    tt
  end.

Definition deep (x : (t_i32*t_Option ((t_i32)))) : t_i32 :=
  match x with
  | (1
  | 2, t_Option_Some (3
  | 4)) =>
    0
  | (x, _) =>
    x
  end.

Definition deep_capture (x : t_Result (((t_i32*t_i32))) (((t_i32*t_i32)))) : t_i32 :=
  match x with
  | t_Result_Ok ((1
  | 2, x))
  | t_Result_Err ((3
  | 4, x)) =>
    x
  | t_Result_Ok ((x, _))
  | t_Result_Err ((x, _)) =>
    x
  end.

Definition equivalent (x : (t_i32*t_Option ((t_i32)))) : t_i32 :=
  match x with
  | (1, t_Option_Some (3))
  | (1, t_Option_Some (4))
  | (2, t_Option_Some (3))
  | (2, t_Option_Some (4)) =>
    0
  | (x, _) =>
    x
  end.

Definition nested (x : t_Option ((t_i32))) : t_i32 :=
  match x with
  | t_Option_Some (1
  | 2) =>
    1
  | t_Option_Some (x) =>
    x
  | t_Option_None =>
    0
  end.
'''
