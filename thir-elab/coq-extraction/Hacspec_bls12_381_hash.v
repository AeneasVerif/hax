(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Open Scope hacspec_scope.

(** Should be moved to Hacspec_Lib.v **)
     Definition int_xI {WS : WORDSIZE} (a : int) : int := MachineIntegers.add (MachineIntegers.mul a (repr 2)) MachineIntegers.one.
Definition int_xO {WS : WORDSIZE} (a : int) : int := MachineIntegers.mul a (repr 2).
Number Notation int Pos.of_num_int Pos.to_num_int (via positive mapping [[int_xI] => xI, [int_xO] => xO , [MachineIntegers.one] => xH]) : hacspec_scope.
Notation "0" := (repr O).
Notation U8_t := int8.
Notation U8 := id.
Notation U16_t := int16.
Notation U16 := id.
Notation U32_t := int32.
Notation U32 := id.
Notation U64_t := int64.
Notation U64 := id.
Notation U128_t := int128.
Notation U128 := id.

Definition array_index {A: Type} `{Default A} {len : nat} (s: nseq A len) {WS} (i : @int WS) := array_index s (unsigned i).
Notation " x .[ a ]" := (array_index x a) (at level 40).
Definition array_upd {A: Type} {len : nat} (s: nseq A len) {WS} (i: @int WS) (new_v: A) : nseq A len := array_upd s (unsigned i) new_v.
Notation " x .[ i ]<- a" := (array_upd x i a) (at level 40).

Class Addition A := add : A -> A -> A.
Notation "a .+ b" := (add a b).
Instance array_add_inst {ws : WORDSIZE} {len: nat} : Addition (nseq (@int ws) len) := { add a b := a array_add b }.
Instance int_add_inst {ws : WORDSIZE} : Addition (@int ws) := { add a b := MachineIntegers.add a b }.

Class Subtraction A := sub : A -> A -> A.
Notation "a .- b" := (sub a b).
Instance array_sub_inst {ws : WORDSIZE} {len: nat} : Subtraction (nseq (@int ws) len) := { sub := array_join_map MachineIntegers.sub }.
Instance int_sub_inst {ws : WORDSIZE} : Subtraction (@int ws) := { sub a b := MachineIntegers.sub a b }.

Class Multiplication A := mul : A -> A -> A.
Notation "a .* b" := (mul a b).
Instance array_mul_inst {ws : WORDSIZE} {len: nat} : Multiplication (nseq (@int ws) len) := { mul a b := a array_mul b }.
Instance int_mul_inst {ws : WORDSIZE} : Multiplication (@int ws) := { mul a b := MachineIntegers.mul a b }.

Class Xor A := xor : A -> A -> A.
Notation "a .^ b" := (xor a b).

Instance array_xor_inst {ws : WORDSIZE} {len: nat} : Xor (nseq (@int ws) len) := { xor a b := a array_xor b }.
Instance int_xor_inst {ws : WORDSIZE} : Xor (@int ws) := { xor a b := MachineIntegers.xor a b }.

Definition new {A : Type} `{Default A} {len} : nseq A len := array_new_ default _.
Class array_or_seq A len :=
{ as_seq : seq A ; as_nseq : nseq A len }.

Arguments as_seq {_} {_} array_or_seq.
Arguments as_nseq {_} {_} array_or_seq.
Coercion as_seq : array_or_seq >-> seq.
Coercion as_nseq : array_or_seq >-> nseq.

Instance nseq_array_or_seq {A len} (a : nseq A len) : array_or_seq A len :=
{ as_seq := array_to_seq a ; as_nseq := a ; }.
Coercion nseq_array_or_seq : nseq >-> array_or_seq.

Instance seq_array_or_seq {A} `{Default A} (a : seq A) : array_or_seq A (length a) :=
{ as_seq := a ; as_nseq := array_from_seq _ a ; }.
Coercion seq_array_or_seq : seq >-> array_or_seq.

Definition update {A : Type}  `{Default A} {len slen} (s : nseq A len) {WS} (start : @int WS) (start_a : array_or_seq A slen) : nseq A len :=
array_update (a := A) (len := len) s (unsigned start) (as_seq start_a).

Definition to_le_U32s {A l} := array_to_le_uint32s (A := A) (l := l).
Axiom to_le_bytes : forall {ws : WORDSIZE} {len}, nseq (@int ws) len -> seq int8.
Definition from_seq {A : Type}  `{Default A} {len slen} (s : array_or_seq A slen) : nseq A len := array_from_seq _ (as_seq s).

Notation Seq_t := seq.
Notation len := (fun s => seq_len s : int32).

Definition array_slice {a: Type} `{Default a} {len : nat} (input: nseq a len) {WS} (start: @int WS) (slice_len: @int WS) : seq a := slice (array_to_seq input) (unsigned start) (unsigned (start .+ slice_len)).
Notation slice := array_slice.
Definition seq_new {A: Type} `{Default A} {WS} (len: @int WS) : seq A := seq_new (unsigned len).
Notation new_seq := seq_new.
Notation num_exact_chunks := seq_num_exact_chunks.
Notation get_exact_chunk := seq_get_exact_chunk.
Definition set_chunk {a: Type} `{Default a} {len} (s: seq a) {WS} (chunk_len: @int WS) (chunk_num: @int WS) (chunk: array_or_seq a len) : seq a := seq_set_chunk s (unsigned chunk_len) (unsigned chunk_num) (as_seq chunk).
Definition set_exact_chunk {a} `{H : Default a} {len} s {WS} := @set_chunk a H len s WS.
     Notation get_remainder_chunk := seq_get_remainder_chunk.
Notation "a <> b" := (negb (eqb a b)).

Notation from_secret_literal := nat_mod_from_secret_literal.
Definition pow2 {m} (x : @int WORDSIZE32) := nat_mod_pow2 m (unsigned x).
Instance nat_mod_addition {n} : Addition (nat_mod n) := { add a b := a +% b }.
Instance nat_mod_subtraction {n} : Subtraction (nat_mod n) := { sub a b := a -% b }.
Instance nat_mod_multiplication {n} : Multiplication (nat_mod n) := { mul a b := a *% b }.
Definition from_slice {a: Type} `{Default a} {len slen} (x : array_or_seq a slen) {WS} (start: @int WS) (slice_len: @int WS) := array_from_slice default len (as_seq x) (unsigned start) (unsigned slice_len).
Notation zero := nat_mod_zero.
Notation to_byte_seq_le := nat_mod_to_byte_seq_le.
Notation U128_to_le_bytes := u128_to_le_bytes.
Notation from_byte_seq_le := nat_mod_from_byte_seq_le.
Definition from_literal {m} := nat_mod_from_literal m.
Notation inv := nat_mod_inv.
Notation update_start := array_update_start.
Notation pow := nat_mod_pow_self.
Notation bit := nat_mod_bit.

Definition int_to_int {ws1 ws2} (i : @int ws1) : @int ws2 := repr (unsigned i).
Coercion int_to_int : int >-> int.
Notation push := seq_push.
Notation Build_secret := secret.
Notation "a -× b" :=
(prod a b) (at level 80, right associativity) : hacspec_scope.
Notation Result_t := (fun '(x,y) => result).
Axiom TODO_name : Type.
Notation ONE := nat_mod_one.
Notation exp := nat_mod_exp.
Notation nat_mod := GZnZ.znz.
Instance nat_mod_znz_addition {n} : Addition (GZnZ.znz n) := { add a b := a +% b }.
Instance nat_mod_znz_subtraction {n} : Subtraction (GZnZ.znz n) := { sub a b := a -% b }.
Instance nat_mod_znz_multiplication {n} : Multiplication (GZnZ.znz n) := { mul a b := a *% b }.
Notation TWO := nat_mod_two.
Notation ne := (fun x y => negb (eqb x y)).
Notation eq := (eqb).
Notation rotate_right := (ror).
Notation to_be_U32s := array_to_be_uint32s.
Notation get_chunk := seq_get_chunk.
Notation num_chunks := seq_num_chunks.
Notation U64_to_be_bytes := uint64_to_be_bytes.
Notation to_be_bytes := array_to_be_bytes.
Notation U8_from_usize := uint8_from_usize.
Notation concat := seq_concat.
Notation declassify := id.
Notation U128_from_be_bytes := uint128_from_be_bytes.
Notation U128_to_be_bytes := uint128_to_be_bytes.
Notation slice_range := array_slice_range.
Notation truncate := seq_truncate.
Axiom array_to_be_uint64s : forall {A l}, nseq A l -> seq uint64.
Notation to_be_U64s := array_to_be_uint64s.
Notation classify := id.
Notation U64_from_U8 := uint64_from_uint8.
(** end of: Should be moved to Hacspec_Lib.v **)

From Examples Require Import Hacspec_sha256.
From Examples Require Import Hacspec_bls12_381.
(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

Notation FpHashCanvas := (nseq int8 512).
Notation FpHash_t := (nat_mod 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab).
Definition FpHash : FpHash_t -> FpHash_t :=
  id.

Notation ArrFp_t := (nseq int64 6).
Definition ArrFp : ArrFp_t -> ArrFp_t :=
  id.

Definition B_IN_BYTES : int32 :=
  (@repr WORDSIZE32 32).

Definition S_IN_BYTES : int32 :=
  (@repr WORDSIZE32 64).

Definition L : int32 :=
  (@repr WORDSIZE32 64).

Definition P_1_2 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0d0088f51cbff34d;0x258dd3db21a5d66b;0xb23ba5c279c2895f;0xb39869507b587b12;0x0f55ffff58a9ffff;0xdcff7fffffffd555]).

Definition P_1_4 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0680447a8e5ff9a6;0x92c6e9ed90d2eb35;0xd91dd2e13ce144af;0xd9cc34a83dac3d89;0x07aaffffac54ffff;0xee7fbfffffffeaab]).

Definition P_3_4 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0680447a8e5ff9a6;0x92c6e9ed90d2eb35;0xd91dd2e13ce144af;0xd9cc34a83dac3d89;0x07aaffffac54ffff;0xee7fbfffffffeaaa]).

Definition expand_message_xmd (msg : Seq_t U8_t) (dst : Seq_t U8_t) (len_in_bytes : int32) : Seq_t U8_t :=
  let ell := ((len_in_bytes.+B_IN_BYTES).-(@repr WORDSIZE32 1))./B_IN_BYTES : int32 in
  let dst_prime := push dst (U8_from_usize (len dst)) : Seq_t U8_t in
  let z_pad := new_seq S_IN_BYTES : Seq_t U8_t in
  let l_i_b_str := new_seq (@repr WORDSIZE32 2) : Seq_t U8_t in
  let l_i_b_str := l_i_b_str.[(@repr WORDSIZE32 0)]<-(U8_from_usize (len_in_bytes./(@repr WORDSIZE32 256))) : Seq_t U8_t in
  let l_i_b_str := l_i_b_str.[(@repr WORDSIZE32 1)]<-(U8_from_usize len_in_bytes) : Seq_t U8_t in
  let msg_prime := concat (concat (concat (concat z_pad msg) l_i_b_str) (new_seq (@repr WORDSIZE32 1))) dst_prime : Seq_t U8_t in
  let b_0 := from_seq (hash msg_prime) : Seq_t U8_t in
  let b_i := from_seq (hash (concat (push b_0 (secret (@repr WORDSIZE8 1))) dst_prime)) : Seq_t U8_t in
  let uniform_bytes := from_seq b_i : Seq_t U8_t in
  let '(b_i,uniform_bytes) := foldi (@repr WORDSIZE32 2) (ell.+(@repr WORDSIZE32 1)) (fun i '(b_i,uniform_bytes) =>
      let t := from_seq b_0 : Seq_t U8_t in
      let b_i := from_seq (hash (concat (push (t.^b_i) (U8_from_usize i)) dst_prime)) : Seq_t U8_t in
      let uniform_bytes := concat uniform_bytes b_i : Seq_t U8_t in
      (b_i,uniform_bytes)) (b_i,uniform_bytes) : (Seq_t U8_t '× Seq_t U8_t) in
  truncate uniform_bytes len_in_bytes.

Definition fp_hash_to_field (msg : Seq_t U8_t) (dst : Seq_t U8_t) (count : int32) : Seq_t Fp_t :=
  let len_in_bytes := count.*L : int32 in
  let uniform_bytes := expand_message_xmd msg dst len_in_bytes : Seq_t U8_t in
  let output := new_seq count : Seq_t Fp_t in
  foldi (@repr WORDSIZE32 0) count (fun i output =>
    let elm_offset := L.*i : int32 in
    let tv := slice uniform_bytes elm_offset L : Seq_t U8_t in
    let u_i := from_byte_seq_be (slice (to_byte_seq_be (from_byte_seq_be tv)) (@repr WORDSIZE32 16) (@repr WORDSIZE32 48)) : Fp_t in
    output.[i]<-u_i) output.

Definition fp_sgn0 (x : Fp_t) : bool :=
  eq (rem x TWO) ONE.

Definition fp_is_square (x : Fp_t) : bool :=
  let c1 := from_byte_seq_be (to_be_bytes P_1_2) : Fp_t in
  let tv := pow_self x c1 : Fp_t in
  orb (eq tv zero) (eq tv ONE).

Definition fp_sqrt (x : Fp_t) : Fp_t :=
  let c1 := from_byte_seq_be (to_be_bytes P_1_4) : Fp_t in
  pow_self x c1.

Definition g1_curve_func (x : Fp_t) : _ :=
  ((x.*x).*x).+(from_literal (@repr WORDSIZE128 4)).

Definition g1_map_to_curve_svdw (u : Fp_t) : (Fp_t '× Fp_t '× bool) :=
  let z := zero.-(from_literal (@repr WORDSIZE128 3)) : Fp_t in
  let gz := g1_curve_func z : Fp_t in
  let tv1 := (u.*u).*gz : Fp_t in
  let tv2 := ONE.+tv1 : Fp_t in
  let tv1 := ONE.-tv1 : Fp_t in
  let tv3 := inv (tv1.*tv2) : Fp_t in
  let tv4 := fp_sqrt ((zero.-gz).*(((from_literal (@repr WORDSIZE128 3)).*z).*z)) : Fp_t in
  let tv4 := if
      fp_sgn0 tv4
    then
      zero.-tv4
    else
      tv4 : _ in
  let tv5 := ((u.*tv1).*tv3).*tv4 : Fp_t in
  let tv6 := ((zero.-(from_literal (@repr WORDSIZE128 4))).*gz).*(inv (((from_literal (@repr WORDSIZE128 3)).*z).*z)) : Fp_t in
  let x1 := ((zero.-z).*(inv TWO)).-tv5 : Fp_t in
  let x2 := ((zero.-z).*(inv TWO)).+tv5 : Fp_t in
  let x3 := z.+((tv6.*((tv2.*tv2).*tv3)).*((tv2.*tv2).*tv3)) : Fp_t in
  let x := if
      fp_is_square (g1_curve_func x1)
    then
      x1
    else
      if
        fp_is_square (g1_curve_func x2)
      then
        x2
      else
        x3 : Fp_t in
  let y := fp_sqrt (g1_curve_func x) : Fp_t in
  let y := if
      (fp_sgn0 u)<>(fp_sgn0 y)
    then
      zero.-y
    else
      y : _ in
  (x,y,false).

Definition g1_clear_cofactor (x : (Fp_t '× Fp_t '× bool)) : (Fp_t '× Fp_t '× bool) :=
  let h_eff := from_literal (@repr WORDSIZE128 15132376222941642753) : Scalar_t in
  g1mul h_eff x.

Definition g1_hash_to_curve_svdw (msg : Seq_t U8_t) (dst : Seq_t U8_t) : (Fp_t '× Fp_t '× bool) :=
  let u := fp_hash_to_field msg dst (@repr WORDSIZE32 2) : Seq_t Fp_t in
  let q0 := g1_map_to_curve_svdw (u.[(@repr WORDSIZE32 0)]) : (Fp_t '× Fp_t '× bool) in
  let q1 := g1_map_to_curve_svdw (u.[(@repr WORDSIZE32 1)]) : (Fp_t '× Fp_t '× bool) in
  let r := g1add q0 q1 : (Fp_t '× Fp_t '× bool) in
  g1_clear_cofactor r.

Definition g1_encode_to_curve_svdw (msg : Seq_t U8_t) (dst : Seq_t U8_t) : (Fp_t '× Fp_t '× bool) :=
  let u := fp_hash_to_field msg dst (@repr WORDSIZE32 1) : Seq_t Fp_t in
  let q := g1_map_to_curve_svdw (u.[(@repr WORDSIZE32 0)]) : (Fp_t '× Fp_t '× bool) in
  g1_clear_cofactor q.

Definition fp2_hash_to_field (msg : Seq_t U8_t) (dst : Seq_t U8_t) (count : int32) : Seq_t (Fp_t '× Fp_t) :=
  let len_in_bytes := (count.*(@repr WORDSIZE32 2)).*L : int32 in
  let uniform_bytes := expand_message_xmd msg dst len_in_bytes : Seq_t U8_t in
  let output := new_seq count : Seq_t (Fp_t '× Fp_t) in
  foldi (@repr WORDSIZE32 0) count (fun i output =>
    let elm_offset := (L.*i).*(@repr WORDSIZE32 2) : int32 in
    let tv := slice uniform_bytes elm_offset L : Seq_t U8_t in
    let e_1 := from_byte_seq_be (slice (to_byte_seq_be (from_byte_seq_be tv)) (@repr WORDSIZE32 16) (@repr WORDSIZE32 48)) : Fp_t in
    let elm_offset := L.*((@repr WORDSIZE32 1).+(i.*(@repr WORDSIZE32 2))) : int32 in
    let tv := slice uniform_bytes elm_offset L : Seq_t U8_t in
    let e_2 := from_byte_seq_be (slice (to_byte_seq_be (from_byte_seq_be tv)) (@repr WORDSIZE32 16) (@repr WORDSIZE32 48)) : Fp_t in
    output.[i]<-(e_1,e_2)) output.

Definition fp2_sgn0 (x : (Fp_t '× Fp_t)) : bool :=
  let '(x0,x1) := x : (Fp_t '× Fp_t) in
  let sign_0 := fp_sgn0 x0 : bool in
  let zero_0 := eq x0 zero : bool in
  let sign_1 := fp_sgn0 x1 : bool in
  orb sign_0 (andb zero_0 sign_1).

Definition fp2_is_square (x : (Fp_t '× Fp_t)) : bool :=
  let c1 := from_byte_seq_be (to_be_bytes P_1_2) : Fp_t in
  let '(x1,x2) := x : (Fp_t '× Fp_t) in
  let tv1 := x1.*x1 : Fp_t in
  let tv2 := x2.*x2 : Fp_t in
  let tv1 := tv1.+tv2 : Fp_t in
  let tv1 := pow_self tv1 c1 : Fp_t in
  let neg1 := zero.-ONE : Fp_t in
  ne tv1 neg1.

Definition fp2exp (n : (Fp_t '× Fp_t)) (k : Fp_t) : (Fp_t '× Fp_t) :=
  let c := fp2fromfp ONE : (Fp_t '× Fp_t) in
  foldi (@repr WORDSIZE32 0) (@repr WORDSIZE32 381) (fun i c =>
    let c := fp2mul c c : (Fp_t '× Fp_t) in
    if
      bit k ((@repr WORDSIZE32 380).-i)
    then
      fp2mul c n
    else
      c) c.

Definition fp2_sqrt (a : (Fp_t '× Fp_t)) : (Fp_t '× Fp_t) :=
  let c1 := from_byte_seq_be (to_be_bytes P_3_4) : Fp_t in
  let c2 := from_byte_seq_be (to_be_bytes P_1_2) : Fp_t in
  let a1 := fp2exp a c1 : (Fp_t '× Fp_t) in
  let alpha := fp2mul a1 (fp2mul a1 a) : (Fp_t '× Fp_t) in
  let x0 := fp2mul a1 a : (Fp_t '× Fp_t) in
  let neg1 := (zero.-ONE,zero) : (Fp_t '× Fp_t) in
  let b := fp2exp (fp2add (fp2fromfp ONE) alpha) c2 : (Fp_t '× Fp_t) in
  if
    eq alpha neg1
  then
    fp2mul (zero,ONE) x0
  else
    fp2mul b x0.

Definition g2_curve_func (x : (Fp_t '× Fp_t)) : (Fp_t '× Fp_t) :=
  fp2add (fp2mul x (fp2mul x x)) (from_literal (@repr WORDSIZE128 4),from_literal (@repr WORDSIZE128 4)).

Definition g2_map_to_curve_svdw (u : (Fp_t '× Fp_t)) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) :=
  let z := fp2neg (fp2fromfp ONE) : (Fp_t '× Fp_t) in
  let gz := g2_curve_func z : (Fp_t '× Fp_t) in
  let tv1 := fp2mul (fp2mul u u) gz : (Fp_t '× Fp_t) in
  let tv2 := fp2add (fp2fromfp ONE) tv1 : (Fp_t '× Fp_t) in
  let tv1 := fp2sub (fp2fromfp ONE) tv1 : (Fp_t '× Fp_t) in
  let tv3 := fp2inv (fp2mul tv1 tv2) : (Fp_t '× Fp_t) in
  let tv4 := fp2_sqrt (fp2mul (fp2neg gz) (fp2mul (fp2fromfp (from_literal (@repr WORDSIZE128 3))) (fp2mul z z))) : (Fp_t '× Fp_t) in
  let tv4 := if
      fp2_sgn0 tv4
    then
      fp2neg tv4
    else
      tv4 : (Fp_t '× Fp_t) in
  let tv5 := fp2mul (fp2mul (fp2mul u tv1) tv3) tv4 : (Fp_t '× Fp_t) in
  let tv6 := fp2mul (fp2mul (fp2neg (fp2fromfp (from_literal (@repr WORDSIZE128 4)))) gz) (fp2inv (fp2mul (fp2fromfp (from_literal (@repr WORDSIZE128 3))) (fp2mul z z))) : (Fp_t '× Fp_t) in
  let x1 := fp2sub (fp2mul (fp2neg z) (fp2inv (fp2fromfp TWO))) tv5 : (Fp_t '× Fp_t) in
  let x2 := fp2add (fp2mul (fp2neg z) (fp2inv (fp2fromfp TWO))) tv5 : (Fp_t '× Fp_t) in
  let tv7 := fp2mul (fp2mul tv2 tv2) tv3 : (Fp_t '× Fp_t) in
  let x3 := fp2add z (fp2mul tv6 (fp2mul tv7 tv7)) : (Fp_t '× Fp_t) in
  let x := if
      fp2_is_square (g2_curve_func x1)
    then
      x1
    else
      if
        fp2_is_square (g2_curve_func x2)
      then
        x2
      else
        x3 : (Fp_t '× Fp_t) in
  let y := fp2_sqrt (g2_curve_func x) : (Fp_t '× Fp_t) in
  let y := if
      (fp2_sgn0 u)<>(fp2_sgn0 y)
    then
      fp2neg y
    else
      y : (Fp_t '× Fp_t) in
  (x,y,false).

Definition psi (p : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool)) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) :=
  let c1 := fp2inv (fp2exp (ONE,ONE) ((zero.-ONE).*(inv (from_literal (@repr WORDSIZE128 3))))) : (Fp_t '× Fp_t) in
  let c2 := fp2inv (fp2exp (ONE,ONE) ((zero.-ONE).*(inv TWO))) : (Fp_t '× Fp_t) in
  let '(x,y,inf) := p : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  let qx := fp2mul c1 (fp2conjugate x) : (Fp_t '× Fp_t) in
  let qy := fp2mul c2 (fp2conjugate y) : (Fp_t '× Fp_t) in
  (qx,qy,inf).

Definition g2_clear_cofactor (p : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool)) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) :=
  let c1 := from_literal (@repr WORDSIZE128 15132376222941642752) : Scalar_t in
  let t1 := g2mul c1 p : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  let t1 := g2neg t1 : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  let t2 := psi p : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  let t3 := g2double p : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  let t3 := psi (psi t3) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  let t3 := g2add t3 (g2neg t2) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  let t2 := g2add t1 t2 : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  let t2 := g2mul c1 t2 : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  let t2 := g2neg t2 : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  let t3 := g2add t3 t2 : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  let t3 := g2add t3 (g2neg t1) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  g2add t3 (g2neg p).

Definition g2_hash_to_curve_svdw (msg : Seq_t U8_t) (dst : Seq_t U8_t) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) :=
  let u := fp2_hash_to_field msg dst (@repr WORDSIZE32 2) : Seq_t (Fp_t '× Fp_t) in
  let q0 := g2_map_to_curve_svdw (u.[(@repr WORDSIZE32 0)]) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  let q1 := g2_map_to_curve_svdw (u.[(@repr WORDSIZE32 1)]) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  let r := g2add q0 q1 : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  g2_clear_cofactor r.

Definition g2_encode_to_curve_svdw (msg : Seq_t U8_t) (dst : Seq_t U8_t) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) :=
  let u := fp2_hash_to_field msg dst (@repr WORDSIZE32 1) : Seq_t (Fp_t '× Fp_t) in
  let q := g2_map_to_curve_svdw (u.[(@repr WORDSIZE32 0)]) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  g2_clear_cofactor q.

Definition G1_ISO_A : ArrFp_t :=
  ArrFp (array_from_list _ [0x00144698a3b8e943;0x3d693a02c96d4982;0xb0ea985383ee66a8;0xd8e8981aefd881ac;0x98936f8da0e0f97f;0x5cf428082d584c1d]).

Definition G1_ISO_B : ArrFp_t :=
  ArrFp (array_from_list _ [0x12e2908d11688030;0x018b12e8753eee3b;0x2016c1f0f24f4070;0xa0b9c14fcef35ef5;0x5a23215a316ceaa5;0xd1cc48e98e172be0]).

Definition G1_XNUM_K_0 : ArrFp_t :=
  ArrFp (array_from_list _ [0x11a05f2b1e833340;0xb809101dd9981585;0x6b303e88a2d7005f;0xf2627b56cdb4e2c8;0x5610c2d5f2e62d6e;0xaeac1662734649b7]).

Definition G1_XNUM_K_1 : ArrFp_t :=
  ArrFp (array_from_list _ [0x17294ed3e943ab2f;0x0588bab22147a81c;0x7c17e75b2f6a8417;0xf565e33c70d1e86b;0x4838f2a6f318c356;0xe834eef1b3cb83bb]).

Definition G1_XNUM_K_2 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0d54005db97678ec;0x1d1048c5d10a9a1b;0xce032473295983e5;0x6878e501ec68e25c;0x958c3e3d2a09729f;0xe0179f9dac9edcb0]).

Definition G1_XNUM_K_3 : ArrFp_t :=
  ArrFp (array_from_list _ [0x1778e7166fcc6db7;0x4e0609d307e55412;0xd7f5e4656a8dbf25;0xf1b33289f1b33083;0x5336e25ce3107193;0xc5b388641d9b6861]).

Definition G1_XNUM_K_4 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0e99726a3199f443;0x6642b4b3e4118e54;0x99db995a1257fb3f;0x086eeb65982fac18;0x985a286f301e77c4;0x51154ce9ac8895d9]).

Definition G1_XNUM_K_5 : ArrFp_t :=
  ArrFp (array_from_list _ [0x1630c3250d7313ff;0x01d1201bf7a74ab5;0xdb3cb17dd952799b;0x9ed3ab9097e68f90;0xa0870d2dcae73d19;0xcd13c1c66f652983]).

Definition G1_XNUM_K_6 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0d6ed6553fe44d29;0x6a3726c38ae652bf;0xb11586264f0f8ce1;0x9008e218f9c86b2a;0x8da25128c1052eca;0xddd7f225a139ed84]).

Definition G1_XNUM_K_7 : ArrFp_t :=
  ArrFp (array_from_list _ [0x17b81e7701abdbe2;0xe8743884d1117e53;0x356de5ab275b4db1;0xa682c62ef0f27533;0x39b7c8f8c8f475af;0x9ccb5618e3f0c88e]).

Definition G1_XNUM_K_8 : ArrFp_t :=
  ArrFp (array_from_list _ [0x080d3cf1f9a78fc4;0x7b90b33563be990d;0xc43b756ce79f5574;0xa2c596c928c5d1de;0x4fa295f296b74e95;0x6d71986a8497e317]).

Definition G1_XNUM_K_9 : ArrFp_t :=
  ArrFp (array_from_list _ [0x169b1f8e1bcfa7c4;0x2e0c37515d138f22;0xdd2ecb803a0c5c99;0x676314baf4bb1b7f;0xa3190b2edc032779;0x7f241067be390c9e]).

Definition G1_XNUM_K_10 : ArrFp_t :=
  ArrFp (array_from_list _ [0x10321da079ce07e2;0x72d8ec09d2565b0d;0xfa7dccdde6787f96;0xd50af36003b14866;0xf69b771f8c285dec;0xca67df3f1605fb7b]).

Definition G1_XNUM_K_11 : ArrFp_t :=
  ArrFp (array_from_list _ [0x06e08c248e260e70;0xbd1e962381edee3d;0x31d79d7e22c837bc;0x23c0bf1bc24c6b68;0xc24b1b80b64d391f;0xa9c8ba2e8ba2d229]).

Definition G1_XDEN_K_0 : ArrFp_t :=
  ArrFp (array_from_list _ [0x08ca8d548cff19ae;0x18b2e62f4bd3fa6f;0x01d5ef4ba35b48ba;0x9c9588617fc8ac62;0xb558d681be343df8;0x993cf9fa40d21b1c]).

Definition G1_XDEN_K_1 : ArrFp_t :=
  ArrFp (array_from_list _ [0x12561a5deb559c43;0x48b4711298e53636;0x7041e8ca0cf0800c;0x0126c2588c48bf57;0x13daa8846cb026e9;0xe5c8276ec82b3bff]).

Definition G1_XDEN_K_2 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0b2962fe57a3225e;0x8137e629bff2991f;0x6f89416f5a718cd1;0xfca64e00b11aceac;0xd6a3d0967c94fedc;0xfcc239ba5cb83e19]).

Definition G1_XDEN_K_3 : ArrFp_t :=
  ArrFp (array_from_list _ [0x03425581a58ae2fe;0xc83aafef7c40eb54;0x5b08243f16b16551;0x54cca8abc28d6fd0;0x4976d5243eecf5c4;0x130de8938dc62cd8]).

Definition G1_XDEN_K_4 : ArrFp_t :=
  ArrFp (array_from_list _ [0x13a8e162022914a8;0x0a6f1d5f43e7a07d;0xffdfc759a12062bb;0x8d6b44e833b306da;0x9bd29ba81f35781d;0x539d395b3532a21e]).

Definition G1_XDEN_K_5 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0e7355f8e4e667b9;0x55390f7f0506c6e9;0x395735e9ce9cad4d;0x0a43bcef24b8982f;0x7400d24bc4228f11;0xc02df9a29f6304a5]).

Definition G1_XDEN_K_6 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0772caacf1693619;0x0f3e0c63e0596721;0x570f5799af53a189;0x4e2e073062aede9c;0xea73b3538f0de06c;0xec2574496ee84a3a]).

Definition G1_XDEN_K_7 : ArrFp_t :=
  ArrFp (array_from_list _ [0x14a7ac2a9d64a8b2;0x30b3f5b074cf0199;0x6e7f63c21bca68a8;0x1996e1cdf9822c58;0x0fa5b9489d11e2d3;0x11f7d99bbdcc5a5e]).

Definition G1_XDEN_K_8 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0a10ecf6ada54f82;0x5e920b3dafc7a3cc;0xe07f8d1d7161366b;0x74100da67f398835;0x03826692abba4370;0x4776ec3a79a1d641]).

Definition G1_XDEN_K_9 : ArrFp_t :=
  ArrFp (array_from_list _ [0x095fc13ab9e92ad4;0x476d6e3eb3a56680;0xf682b4ee96f7d037;0x76df533978f31c15;0x93174e4b4b786500;0x2d6384d168ecdd0a]).

Definition G1_YNUM_K_0 : ArrFp_t :=
  ArrFp (array_from_list _ [0x090d97c81ba24ee0;0x259d1f094980dcfa;0x11ad138e48a86952;0x2b52af6c956543d3;0xcd0c7aee9b3ba3c2;0xbe9845719707bb33]).

Definition G1_YNUM_K_1 : ArrFp_t :=
  ArrFp (array_from_list _ [0x134996a104ee5811;0xd51036d776fb4683;0x1223e96c254f383d;0x0f906343eb67ad34;0xd6c56711962fa8bf;0xe097e75a2e41c696]).

Definition G1_YNUM_K_2 : ArrFp_t :=
  ArrFp (array_from_list _ [0x00cc786baa966e66;0xf4a384c86a3b4994;0x2552e2d658a31ce2;0xc344be4b91400da7;0xd26d521628b00523;0xb8dfe240c72de1f6]).

Definition G1_YNUM_K_3 : ArrFp_t :=
  ArrFp (array_from_list _ [0x01f86376e8981c21;0x7898751ad8746757;0xd42aa7b90eeb791c;0x09e4a3ec03251cf9;0xde405aba9ec61dec;0xa6355c77b0e5f4cb]).

Definition G1_YNUM_K_4 : ArrFp_t :=
  ArrFp (array_from_list _ [0x08cc03fdefe0ff13;0x5caf4fe2a21529c4;0x195536fbe3ce50b8;0x79833fd221351adc;0x2ee7f8dc099040a8;0x41b6daecf2e8fedb]).

Definition G1_YNUM_K_5 : ArrFp_t :=
  ArrFp (array_from_list _ [0x16603fca40634b6a;0x2211e11db8f0a6a0;0x74a7d0d4afadb7bd;0x76505c3d3ad5544e;0x203f6326c95a8072;0x99b23ab13633a5f0]).

Definition G1_YNUM_K_6 : ArrFp_t :=
  ArrFp (array_from_list _ [0x04ab0b9bcfac1bbc;0xb2c977d027796b3c;0xe75bb8ca2be184cb;0x5231413c4d634f37;0x47a87ac2460f415e;0xc961f8855fe9d6f2]).

Definition G1_YNUM_K_7 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0987c8d5333ab86f;0xde9926bd2ca6c674;0x170a05bfe3bdd81f;0xfd038da6c26c8426;0x42f64550fedfe935;0xa15e4ca31870fb29]).

Definition G1_YNUM_K_8 : ArrFp_t :=
  ArrFp (array_from_list _ [0x09fc4018bd96684b;0xe88c9e221e4da1bb;0x8f3abd16679dc26c;0x1e8b6e6a1f20cabe;0x69d65201c78607a3;0x60370e577bdba587]).

Definition G1_YNUM_K_9 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0e1bba7a1186bdb5;0x223abde7ada14a23;0xc42a0ca7915af6fe;0x06985e7ed1e4d43b;0x9b3f7055dd4eba6f;0x2bafaaebca731c30]).

Definition G1_YNUM_K_10 : ArrFp_t :=
  ArrFp (array_from_list _ [0x19713e47937cd1be;0x0dfd0b8f1d43fb93;0xcd2fcbcb6caf493f;0xd1183e416389e610;0x31bf3a5cce3fbafc;0xe813711ad011c132]).

Definition G1_YNUM_K_11 : ArrFp_t :=
  ArrFp (array_from_list _ [0x18b46a908f36f6de;0xb918c143fed2edcc;0x523559b8aaf0c246;0x2e6bfe7f911f6432;0x49d9cdf41b44d606;0xce07c8a4d0074d8e]).

Definition G1_YNUM_K_12 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0b182cac101b9399;0xd155096004f53f44;0x7aa7b12a3426b08e;0xc02710e807b4633f;0x06c851c1919211f2;0x0d4c04f00b971ef8]).

Definition G1_YNUM_K_13 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0245a394ad1eca9b;0x72fc00ae7be315dc;0x757b3b080d4c1580;0x13e6632d3c40659c;0xc6cf90ad1c232a64;0x42d9d3f5db980133]).

Definition G1_YNUM_K_14 : ArrFp_t :=
  ArrFp (array_from_list _ [0x05c129645e44cf11;0x02a159f748c4a3fc;0x5e673d81d7e86568;0xd9ab0f5d396a7ce4;0x6ba1049b6579afb7;0x866b1e715475224b]).

Definition G1_YNUM_K_15 : ArrFp_t :=
  ArrFp (array_from_list _ [0x15e6be4e990f03ce;0x4ea50b3b42df2eb5;0xcb181d8f84965a39;0x57add4fa95af01b2;0xb665027efec01c77;0x04b456be69c8b604]).

Definition G1_YDEN_K_0 : ArrFp_t :=
  ArrFp (array_from_list _ [0x16112c4c3a9c98b2;0x52181140fad0eae9;0x601a6de578980be6;0xeec3232b5be72e7a;0x07f3688ef60c206d;0x01479253b03663c1]).

Definition G1_YDEN_K_1 : ArrFp_t :=
  ArrFp (array_from_list _ [0x1962d75c2381201e;0x1a0cbd6c43c348b8;0x85c84ff731c4d59c;0xa4a10356f453e01f;0x78a4260763529e35;0x32f6102c2e49a03d]).

Definition G1_YDEN_K_2 : ArrFp_t :=
  ArrFp (array_from_list _ [0x058df3306640da27;0x6faaae7d6e8eb157;0x78c4855551ae7f31;0x0c35a5dd279cd2ec;0xa6757cd636f96f89;0x1e2538b53dbf67f2]).

Definition G1_YDEN_K_3 : ArrFp_t :=
  ArrFp (array_from_list _ [0x16b7d288798e5395;0xf20d23bf89edb4d1;0xd115c5dbddbcd30e;0x123da489e726af41;0x727364f2c28297ad;0xa8d26d98445f5416]).

Definition G1_YDEN_K_4 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0be0e079545f43e4;0xb00cc912f8228ddc;0xc6d19c9f0f69bbb0;0x542eda0fc9dec916;0xa20b15dc0fd2eded;0xda39142311a5001d]).

Definition G1_YDEN_K_5 : ArrFp_t :=
  ArrFp (array_from_list _ [0x08d9e5297186db2d;0x9fb266eaac783182;0xb70152c65550d881;0xc5ecd87b6f0f5a64;0x49f38db9dfa9cce2;0x02c6477faaf9b7ac]).

Definition G1_YDEN_K_6 : ArrFp_t :=
  ArrFp (array_from_list _ [0x166007c08a99db2f;0xc3ba8734ace9824b;0x5eecfdfa8d0cf8ef;0x5dd365bc400a0051;0xd5fa9c01a58b1fb9;0x3d1a1399126a775c]).

Definition G1_YDEN_K_7 : ArrFp_t :=
  ArrFp (array_from_list _ [0x16a3ef08be3ea7ea;0x03bcddfabba6ff6e;0xe5a4375efa1f4fd7;0xfeb34fd206357132;0xb920f5b00801dee4;0x60ee415a15812ed9]).

Definition G1_YDEN_K_8 : ArrFp_t :=
  ArrFp (array_from_list _ [0x1866c8ed336c6123;0x1a1be54fd1d74cc4;0xf9fb0ce4c6af5920;0xabc5750c4bf39b48;0x52cfe2f7bb924883;0x6b233d9d55535d4a]).

Definition G1_YDEN_K_9 : ArrFp_t :=
  ArrFp (array_from_list _ [0x167a55cda70a6e1c;0xea820597d94a8490;0x3216f763e13d87bb;0x5308592e7ea7d4fb;0xc7385ea3d529b35e;0x346ef48bb8913f55]).

Definition G1_YDEN_K_10 : ArrFp_t :=
  ArrFp (array_from_list _ [0x04d2f259eea405bd;0x48f010a01ad2911d;0x9c6dd039bb61a629;0x0e591b36e636a5c8;0x71a5c29f4f830604;0x00f8b49cba8f6aa8]).

Definition G1_YDEN_K_11 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0accbb67481d033f;0xf5852c1e48c50c47;0x7f94ff8aefce42d2;0x8c0f9a88cea79135;0x16f968986f7ebbea;0x9684b529e2561092]).

Definition G1_YDEN_K_12 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0ad6b9514c767fe3;0xc3613144b45f1496;0x543346d98adf0226;0x7d5ceef9a00d9b86;0x93000763e3b90ac1;0x1e99b138573345cc]).

Definition G1_YDEN_K_13 : ArrFp_t :=
  ArrFp (array_from_list _ [0x02660400eb2e4f3b;0x628bdd0d53cd76f2;0xbf565b94e72927c1;0xcb748df27942480e;0x420517bd8714cc80;0xd1fadc1326ed06f7]).

Definition G1_YDEN_K_14 : ArrFp_t :=
  ArrFp (array_from_list _ [0x0e0fa1d816ddc03e;0x6b24255e0d7819c1;0x71c40f65e273b853;0x324efcd6356caa20;0x5ca2f570f1349780;0x4415473a1d634b8f]).

Definition g1_simple_swu_iso (u : Fp_t) : (Fp_t '× Fp_t) :=
  let z := from_literal (@repr WORDSIZE128 11) : Fp_t in
  let a := from_byte_seq_be (to_be_bytes G1_ISO_A) : Fp_t in
  let b := from_byte_seq_be (to_be_bytes G1_ISO_B) : Fp_t in
  let tv1 := inv (((z.*z).*(exp u (@repr WORDSIZE32 4))).+((z.*u).*u)) : Fp_t in
  let x1 := ((zero.-b).*(inv a)).*(ONE.+tv1) : Fp_t in
  let x1 := if
      eq tv1 zero
    then
      b.*(inv (z.*a))
    else
      x1 : _ in
  let gx1 := ((exp x1 (@repr WORDSIZE32 3)).+(a.*x1)).+b : Fp_t in
  let x2 := ((z.*u).*u).*x1 : Fp_t in
  let gx2 := ((exp x2 (@repr WORDSIZE32 3)).+(a.*x2)).+b : Fp_t in
  let '(x,y) := if
      fp_is_square gx1
    then
      (x1,fp_sqrt gx1)
    else
      (x2,fp_sqrt gx2) : (Fp_t '× Fp_t) in
  let y := if
      (fp_sgn0 u)<>(fp_sgn0 y)
    then
      zero.-y
    else
      y : _ in
  (x,y).

Definition g1_isogeny_map (x : Fp_t) (y : Fp_t) : (Fp_t '× Fp_t '× bool) :=
  let xnum_k := new_seq (@repr WORDSIZE32 12) : Seq_t Fp_t in
  let xnum_k := xnum_k.[(@repr WORDSIZE32 0)]<-(from_byte_seq_be (to_be_bytes G1_XNUM_K_0)) : Seq_t Fp_t in
  let xnum_k := xnum_k.[(@repr WORDSIZE32 1)]<-(from_byte_seq_be (to_be_bytes G1_XNUM_K_1)) : Seq_t Fp_t in
  let xnum_k := xnum_k.[(@repr WORDSIZE32 2)]<-(from_byte_seq_be (to_be_bytes G1_XNUM_K_2)) : Seq_t Fp_t in
  let xnum_k := xnum_k.[(@repr WORDSIZE32 3)]<-(from_byte_seq_be (to_be_bytes G1_XNUM_K_3)) : Seq_t Fp_t in
  let xnum_k := xnum_k.[(@repr WORDSIZE32 4)]<-(from_byte_seq_be (to_be_bytes G1_XNUM_K_4)) : Seq_t Fp_t in
  let xnum_k := xnum_k.[(@repr WORDSIZE32 5)]<-(from_byte_seq_be (to_be_bytes G1_XNUM_K_5)) : Seq_t Fp_t in
  let xnum_k := xnum_k.[(@repr WORDSIZE32 6)]<-(from_byte_seq_be (to_be_bytes G1_XNUM_K_6)) : Seq_t Fp_t in
  let xnum_k := xnum_k.[(@repr WORDSIZE32 7)]<-(from_byte_seq_be (to_be_bytes G1_XNUM_K_7)) : Seq_t Fp_t in
  let xnum_k := xnum_k.[(@repr WORDSIZE32 8)]<-(from_byte_seq_be (to_be_bytes G1_XNUM_K_8)) : Seq_t Fp_t in
  let xnum_k := xnum_k.[(@repr WORDSIZE32 9)]<-(from_byte_seq_be (to_be_bytes G1_XNUM_K_9)) : Seq_t Fp_t in
  let xnum_k := xnum_k.[(@repr WORDSIZE32 10)]<-(from_byte_seq_be (to_be_bytes G1_XNUM_K_10)) : Seq_t Fp_t in
  let xnum_k := xnum_k.[(@repr WORDSIZE32 11)]<-(from_byte_seq_be (to_be_bytes G1_XNUM_K_11)) : Seq_t Fp_t in
  let xden_k := new_seq (@repr WORDSIZE32 10) : Seq_t Fp_t in
  let xden_k := xden_k.[(@repr WORDSIZE32 0)]<-(from_byte_seq_be (to_be_bytes G1_XDEN_K_0)) : Seq_t Fp_t in
  let xden_k := xden_k.[(@repr WORDSIZE32 1)]<-(from_byte_seq_be (to_be_bytes G1_XDEN_K_1)) : Seq_t Fp_t in
  let xden_k := xden_k.[(@repr WORDSIZE32 2)]<-(from_byte_seq_be (to_be_bytes G1_XDEN_K_2)) : Seq_t Fp_t in
  let xden_k := xden_k.[(@repr WORDSIZE32 3)]<-(from_byte_seq_be (to_be_bytes G1_XDEN_K_3)) : Seq_t Fp_t in
  let xden_k := xden_k.[(@repr WORDSIZE32 4)]<-(from_byte_seq_be (to_be_bytes G1_XDEN_K_4)) : Seq_t Fp_t in
  let xden_k := xden_k.[(@repr WORDSIZE32 5)]<-(from_byte_seq_be (to_be_bytes G1_XDEN_K_5)) : Seq_t Fp_t in
  let xden_k := xden_k.[(@repr WORDSIZE32 6)]<-(from_byte_seq_be (to_be_bytes G1_XDEN_K_6)) : Seq_t Fp_t in
  let xden_k := xden_k.[(@repr WORDSIZE32 7)]<-(from_byte_seq_be (to_be_bytes G1_XDEN_K_7)) : Seq_t Fp_t in
  let xden_k := xden_k.[(@repr WORDSIZE32 8)]<-(from_byte_seq_be (to_be_bytes G1_XDEN_K_8)) : Seq_t Fp_t in
  let xden_k := xden_k.[(@repr WORDSIZE32 9)]<-(from_byte_seq_be (to_be_bytes G1_XDEN_K_9)) : Seq_t Fp_t in
  let ynum_k := new_seq (@repr WORDSIZE32 16) : Seq_t Fp_t in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 0)]<-(from_byte_seq_be (to_be_bytes G1_YNUM_K_0)) : Seq_t Fp_t in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 1)]<-(from_byte_seq_be (to_be_bytes G1_YNUM_K_1)) : Seq_t Fp_t in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 2)]<-(from_byte_seq_be (to_be_bytes G1_YNUM_K_2)) : Seq_t Fp_t in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 3)]<-(from_byte_seq_be (to_be_bytes G1_YNUM_K_3)) : Seq_t Fp_t in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 4)]<-(from_byte_seq_be (to_be_bytes G1_YNUM_K_4)) : Seq_t Fp_t in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 5)]<-(from_byte_seq_be (to_be_bytes G1_YNUM_K_5)) : Seq_t Fp_t in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 6)]<-(from_byte_seq_be (to_be_bytes G1_YNUM_K_6)) : Seq_t Fp_t in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 7)]<-(from_byte_seq_be (to_be_bytes G1_YNUM_K_7)) : Seq_t Fp_t in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 8)]<-(from_byte_seq_be (to_be_bytes G1_YNUM_K_8)) : Seq_t Fp_t in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 9)]<-(from_byte_seq_be (to_be_bytes G1_YNUM_K_9)) : Seq_t Fp_t in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 10)]<-(from_byte_seq_be (to_be_bytes G1_YNUM_K_10)) : Seq_t Fp_t in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 11)]<-(from_byte_seq_be (to_be_bytes G1_YNUM_K_11)) : Seq_t Fp_t in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 12)]<-(from_byte_seq_be (to_be_bytes G1_YNUM_K_12)) : Seq_t Fp_t in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 13)]<-(from_byte_seq_be (to_be_bytes G1_YNUM_K_13)) : Seq_t Fp_t in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 14)]<-(from_byte_seq_be (to_be_bytes G1_YNUM_K_14)) : Seq_t Fp_t in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 15)]<-(from_byte_seq_be (to_be_bytes G1_YNUM_K_15)) : Seq_t Fp_t in
  let yden_k := new_seq (@repr WORDSIZE32 15) : Seq_t Fp_t in
  let yden_k := yden_k.[(@repr WORDSIZE32 0)]<-(from_byte_seq_be (to_be_bytes G1_YDEN_K_0)) : Seq_t Fp_t in
  let yden_k := yden_k.[(@repr WORDSIZE32 1)]<-(from_byte_seq_be (to_be_bytes G1_YDEN_K_1)) : Seq_t Fp_t in
  let yden_k := yden_k.[(@repr WORDSIZE32 2)]<-(from_byte_seq_be (to_be_bytes G1_YDEN_K_2)) : Seq_t Fp_t in
  let yden_k := yden_k.[(@repr WORDSIZE32 3)]<-(from_byte_seq_be (to_be_bytes G1_YDEN_K_3)) : Seq_t Fp_t in
  let yden_k := yden_k.[(@repr WORDSIZE32 4)]<-(from_byte_seq_be (to_be_bytes G1_YDEN_K_4)) : Seq_t Fp_t in
  let yden_k := yden_k.[(@repr WORDSIZE32 5)]<-(from_byte_seq_be (to_be_bytes G1_YDEN_K_5)) : Seq_t Fp_t in
  let yden_k := yden_k.[(@repr WORDSIZE32 6)]<-(from_byte_seq_be (to_be_bytes G1_YDEN_K_6)) : Seq_t Fp_t in
  let yden_k := yden_k.[(@repr WORDSIZE32 7)]<-(from_byte_seq_be (to_be_bytes G1_YDEN_K_7)) : Seq_t Fp_t in
  let yden_k := yden_k.[(@repr WORDSIZE32 8)]<-(from_byte_seq_be (to_be_bytes G1_YDEN_K_8)) : Seq_t Fp_t in
  let yden_k := yden_k.[(@repr WORDSIZE32 9)]<-(from_byte_seq_be (to_be_bytes G1_YDEN_K_9)) : Seq_t Fp_t in
  let yden_k := yden_k.[(@repr WORDSIZE32 10)]<-(from_byte_seq_be (to_be_bytes G1_YDEN_K_10)) : Seq_t Fp_t in
  let yden_k := yden_k.[(@repr WORDSIZE32 11)]<-(from_byte_seq_be (to_be_bytes G1_YDEN_K_11)) : Seq_t Fp_t in
  let yden_k := yden_k.[(@repr WORDSIZE32 12)]<-(from_byte_seq_be (to_be_bytes G1_YDEN_K_12)) : Seq_t Fp_t in
  let yden_k := yden_k.[(@repr WORDSIZE32 13)]<-(from_byte_seq_be (to_be_bytes G1_YDEN_K_13)) : Seq_t Fp_t in
  let yden_k := yden_k.[(@repr WORDSIZE32 14)]<-(from_byte_seq_be (to_be_bytes G1_YDEN_K_14)) : Seq_t Fp_t in
  let xnum := zero : Fp_t in
  let xx := ONE : Fp_t in
  let '(xnum,xx) := foldi (@repr WORDSIZE32 0) (len xnum_k) (fun i '(xnum,xx) =>
      let xnum := xnum.+(xx.*(xnum_k.[i])) : Fp_t in
      let xx := xx.*x : Fp_t in
      (xnum,xx)) (xnum,xx) : (Fp_t '× Fp_t) in
  let xden := zero : Fp_t in
  let xx := ONE : Fp_t in
  let '(xden,xx) := foldi (@repr WORDSIZE32 0) (len xden_k) (fun i '(xden,xx) =>
      let xden := xden.+(xx.*(xden_k.[i])) : Fp_t in
      let xx := xx.*x : Fp_t in
      (xden,xx)) (xden,xx) : (Fp_t '× Fp_t) in
  let xden := xden.+xx : Fp_t in
  let ynum := zero : Fp_t in
  let xx := ONE : Fp_t in
  let '(xx,ynum) := foldi (@repr WORDSIZE32 0) (len ynum_k) (fun i '(xx,ynum) =>
      let ynum := ynum.+(xx.*(ynum_k.[i])) : Fp_t in
      let xx := xx.*x : Fp_t in
      (xx,ynum)) (xx,ynum) : (Fp_t '× Fp_t) in
  let yden := zero : Fp_t in
  let xx := ONE : Fp_t in
  let '(xx,yden) := foldi (@repr WORDSIZE32 0) (len yden_k) (fun i '(xx,yden) =>
      let yden := yden.+(xx.*(yden_k.[i])) : Fp_t in
      let xx := xx.*x : Fp_t in
      (xx,yden)) (xx,yden) : (Fp_t '× Fp_t) in
  let yden := yden.+xx : Fp_t in
  let xr := xnum.*(inv xden) : Fp_t in
  let yr := (y.*ynum).*(inv yden) : Fp_t in
  let inf := false : bool in
  let inf := if
      orb (eq xden zero) (eq yden zero)
    then
      true
    else
      inf : bool in
  (xr,yr,inf).

Definition g1_map_to_curve_sswu (u : Fp_t) : (Fp_t '× Fp_t '× bool) :=
  let '(xp,yp) := g1_simple_swu_iso u : (Fp_t '× Fp_t) in
  g1_isogeny_map xp yp.

Definition g1_hash_to_curve_sswu (msg : Seq_t U8_t) (dst : Seq_t U8_t) : (Fp_t '× Fp_t '× bool) :=
  let u := fp_hash_to_field msg dst (@repr WORDSIZE32 2) : Seq_t Fp_t in
  let q0 := g1_map_to_curve_sswu (u.[(@repr WORDSIZE32 0)]) : (Fp_t '× Fp_t '× bool) in
  let q1 := g1_map_to_curve_sswu (u.[(@repr WORDSIZE32 1)]) : (Fp_t '× Fp_t '× bool) in
  let r := g1add q0 q1 : (Fp_t '× Fp_t '× bool) in
  g1_clear_cofactor r.

Definition g1_encode_to_curve_sswu (msg : Seq_t U8_t) (dst : Seq_t U8_t) : (Fp_t '× Fp_t '× bool) :=
  let u := fp_hash_to_field msg dst (@repr WORDSIZE32 1) : Seq_t Fp_t in
  let q := g1_map_to_curve_sswu (u.[(@repr WORDSIZE32 0)]) : (Fp_t '× Fp_t '× bool) in
  g1_clear_cofactor q.

Definition G2_XNUM_K_0 : ArrFp_t :=
  ArrFp (array_from_list _ [0x05c759507e8e333e;0xbb5b7a9a47d7ed85;0x32c52d39fd3a042a;0x88b58423c50ae15d;0x5c2638e343d9c71c;0x6238aaaaaaaa97d6]).

Definition G2_XNUM_K_1_I : ArrFp_t :=
  ArrFp (array_from_list _ [0x11560bf17baa99bc;0x32126fced787c88f;0x984f87adf7ae0c7f;0x9a208c6b4f20a418;0x1472aaa9cb8d5555;0x26a9ffffffffc71a]).

Definition G2_XNUM_K_2_R : ArrFp_t :=
  ArrFp (array_from_list _ [0x11560bf17baa99bc;0x32126fced787c88f;0x984f87adf7ae0c7f;0x9a208c6b4f20a418;0x1472aaa9cb8d5555;0x26a9ffffffffc71e]).

Definition G2_XNUM_K_2_I : ArrFp_t :=
  ArrFp (array_from_list _ [0x08ab05f8bdd54cde;0x190937e76bc3e447;0xcc27c3d6fbd7063f;0xcd104635a790520c;0x0a395554e5c6aaaa;0x9354ffffffffe38d]).

Definition G2_XNUM_K_3_R : ArrFp_t :=
  ArrFp (array_from_list _ [0x171d6541fa38ccfa;0xed6dea691f5fb614;0xcb14b4e7f4e810aa;0x22d6108f142b8575;0x7098e38d0f671c71;0x88e2aaaaaaaa5ed1]).

Definition G2_XDEN_K_0_I : ArrFp_t :=
  ArrFp (array_from_list _ [0x1a0111ea397fe69a;0x4b1ba7b6434bacd7;0x64774b84f38512bf;0x6730d2a0f6b0f624;0x1eabfffeb153ffff;0xb9feffffffffaa63]).

Definition G2_XDEN_K_1_I : ArrFp_t :=
  ArrFp (array_from_list _ [0x1a0111ea397fe69a;0x4b1ba7b6434bacd7;0x64774b84f38512bf;0x6730d2a0f6b0f624;0x1eabfffeb153ffff;0xb9feffffffffaa9f]).

Definition G2_YNUM_K_0 : ArrFp_t :=
  ArrFp (array_from_list _ [0x1530477c7ab4113b;0x59a4c18b076d1193;0x0f7da5d4a07f649b;0xf54439d87d27e500;0xfc8c25ebf8c92f68;0x12cfc71c71c6d706]).

Definition G2_YNUM_K_1_I : ArrFp_t :=
  ArrFp (array_from_list _ [0x05c759507e8e333e;0xbb5b7a9a47d7ed85;0x32c52d39fd3a042a;0x88b58423c50ae15d;0x5c2638e343d9c71c;0x6238aaaaaaaa97be]).

Definition G2_YNUM_K_2_R : ArrFp_t :=
  ArrFp (array_from_list _ [0x11560bf17baa99bc;0x32126fced787c88f;0x984f87adf7ae0c7f;0x9a208c6b4f20a418;0x1472aaa9cb8d5555;0x26a9ffffffffc71c]).

Definition G2_YNUM_K_2_I : ArrFp_t :=
  ArrFp (array_from_list _ [0x08ab05f8bdd54cde;0x190937e76bc3e447;0xcc27c3d6fbd7063f;0xcd104635a790520c;0x0a395554e5c6aaaa;0x9354ffffffffe38f]).

Definition G2_YNUM_K_3_R : ArrFp_t :=
  ArrFp (array_from_list _ [0x124c9ad43b6cf79b;0xfbf7043de3811ad0;0x761b0f37a1e26286;0xb0e977c69aa27452;0x4e79097a56dc4bd9;0xe1b371c71c718b10]).

Definition G2_YDEN_K_0 : ArrFp_t :=
  ArrFp (array_from_list _ [0x1a0111ea397fe69a;0x4b1ba7b6434bacd7;0x64774b84f38512bf;0x6730d2a0f6b0f624;0x1eabfffeb153ffff;0xb9feffffffffa8fb]).

Definition G2_YDEN_K_1_I : ArrFp_t :=
  ArrFp (array_from_list _ [0x1a0111ea397fe69a;0x4b1ba7b6434bacd7;0x64774b84f38512bf;0x6730d2a0f6b0f624;0x1eabfffeb153ffff;0xb9feffffffffa9d3]).

Definition G2_YDEN_K_2_I : ArrFp_t :=
  ArrFp (array_from_list _ [0x1a0111ea397fe69a;0x4b1ba7b6434bacd7;0x64774b84f38512bf;0x6730d2a0f6b0f624;0x1eabfffeb153ffff;0xb9feffffffffaa99]).

Definition g2_simple_swu_iso (u : (Fp_t '× Fp_t)) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t)) :=
  let z := fp2neg (TWO,ONE) : (Fp_t '× Fp_t) in
  let a := (zero,from_literal (@repr WORDSIZE128 240)) : (Fp_t '× Fp_t) in
  let b := (from_literal (@repr WORDSIZE128 1012),from_literal (@repr WORDSIZE128 1012)) : (Fp_t '× Fp_t) in
  let tv1 := fp2inv (fp2add (fp2mul (fp2mul z z) (fp2mul (fp2mul u u) (fp2mul u u))) (fp2mul z (fp2mul u u))) : (Fp_t '× Fp_t) in
  let x1 := fp2mul (fp2mul (fp2neg b) (fp2inv a)) (fp2add (fp2fromfp ONE) tv1) : (Fp_t '× Fp_t) in
  let x1 := if
      eq tv1 fp2zero
    then
      fp2mul b (fp2inv (fp2mul z a))
    else
      x1 : (Fp_t '× Fp_t) in
  let gx1 := fp2add (fp2add (fp2mul (fp2mul x1 x1) x1) (fp2mul a x1)) b : (Fp_t '× Fp_t) in
  let x2 := fp2mul (fp2mul z (fp2mul u u)) x1 : (Fp_t '× Fp_t) in
  let gx2 := fp2add (fp2add (fp2mul (fp2mul x2 x2) x2) (fp2mul a x2)) b : (Fp_t '× Fp_t) in
  let '(x,y) := if
      fp2_is_square gx1
    then
      (x1,fp2_sqrt gx1)
    else
      (x2,fp2_sqrt gx2) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t)) in
  let y := if
      (fp2_sgn0 u)<>(fp2_sgn0 y)
    then
      fp2neg y
    else
      y : (Fp_t '× Fp_t) in
  (x,y).

Definition g2_isogeny_map (x : (Fp_t '× Fp_t)) (y : (Fp_t '× Fp_t)) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) :=
  let xnum_k := new_seq (@repr WORDSIZE32 4) : Seq_t (Fp_t '× Fp_t) in
  let xnum_k := xnum_k.[(@repr WORDSIZE32 0)]<-(from_byte_seq_be (to_be_bytes G2_XNUM_K_0),from_byte_seq_be (to_be_bytes G2_XNUM_K_0)) : Seq_t (Fp_t '× Fp_t) in
  let xnum_k := xnum_k.[(@repr WORDSIZE32 1)]<-(zero,from_byte_seq_be (to_be_bytes G2_XNUM_K_1_I)) : Seq_t (Fp_t '× Fp_t) in
  let xnum_k := xnum_k.[(@repr WORDSIZE32 2)]<-(from_byte_seq_be (to_be_bytes G2_XNUM_K_2_R),from_byte_seq_be (to_be_bytes G2_XNUM_K_2_I)) : Seq_t (Fp_t '× Fp_t) in
  let xnum_k := xnum_k.[(@repr WORDSIZE32 3)]<-(from_byte_seq_be (to_be_bytes G2_XNUM_K_3_R),zero) : Seq_t (Fp_t '× Fp_t) in
  let xden_k := new_seq (@repr WORDSIZE32 2) : Seq_t (Fp_t '× Fp_t) in
  let xden_k := xden_k.[(@repr WORDSIZE32 0)]<-(zero,from_byte_seq_be (to_be_bytes G2_XDEN_K_0_I)) : Seq_t (Fp_t '× Fp_t) in
  let xden_k := xden_k.[(@repr WORDSIZE32 1)]<-(from_literal (@repr WORDSIZE128 12),from_byte_seq_be (to_be_bytes G2_XDEN_K_1_I)) : Seq_t (Fp_t '× Fp_t) in
  let ynum_k := new_seq (@repr WORDSIZE32 4) : Seq_t (Fp_t '× Fp_t) in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 0)]<-(from_byte_seq_be (to_be_bytes G2_YNUM_K_0),from_byte_seq_be (to_be_bytes G2_YNUM_K_0)) : Seq_t (Fp_t '× Fp_t) in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 1)]<-(zero,from_byte_seq_be (to_be_bytes G2_YNUM_K_1_I)) : Seq_t (Fp_t '× Fp_t) in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 2)]<-(from_byte_seq_be (to_be_bytes G2_YNUM_K_2_R),from_byte_seq_be (to_be_bytes G2_YNUM_K_2_I)) : Seq_t (Fp_t '× Fp_t) in
  let ynum_k := ynum_k.[(@repr WORDSIZE32 3)]<-(from_byte_seq_be (to_be_bytes G2_YNUM_K_3_R),zero) : Seq_t (Fp_t '× Fp_t) in
  let yden_k := new_seq (@repr WORDSIZE32 3) : Seq_t (Fp_t '× Fp_t) in
  let yden_k := yden_k.[(@repr WORDSIZE32 0)]<-(from_byte_seq_be (to_be_bytes G2_YDEN_K_0),from_byte_seq_be (to_be_bytes G2_YDEN_K_0)) : Seq_t (Fp_t '× Fp_t) in
  let yden_k := yden_k.[(@repr WORDSIZE32 1)]<-(zero,from_byte_seq_be (to_be_bytes G2_YDEN_K_1_I)) : Seq_t (Fp_t '× Fp_t) in
  let yden_k := yden_k.[(@repr WORDSIZE32 2)]<-(from_literal (@repr WORDSIZE128 18),from_byte_seq_be (to_be_bytes G2_YDEN_K_2_I)) : Seq_t (Fp_t '× Fp_t) in
  let xnum := fp2zero : (Fp_t '× Fp_t) in
  let xx := fp2fromfp ONE : (Fp_t '× Fp_t) in
  let '(xnum,xx) := foldi (@repr WORDSIZE32 0) (len xnum_k) (fun i '(xnum,xx) =>
      let xnum := fp2add xnum (fp2mul xx (xnum_k.[i])) : (Fp_t '× Fp_t) in
      let xx := fp2mul xx x : (Fp_t '× Fp_t) in
      (xnum,xx)) (xnum,xx) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t)) in
  let xden := fp2zero : (Fp_t '× Fp_t) in
  let xx := fp2fromfp ONE : (Fp_t '× Fp_t) in
  let '(xden,xx) := foldi (@repr WORDSIZE32 0) (len xden_k) (fun i '(xden,xx) =>
      let xden := fp2add xden (fp2mul xx (xden_k.[i])) : (Fp_t '× Fp_t) in
      let xx := fp2mul xx x : (Fp_t '× Fp_t) in
      (xden,xx)) (xden,xx) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t)) in
  let xden := fp2add xden xx : (Fp_t '× Fp_t) in
  let ynum := fp2zero : (Fp_t '× Fp_t) in
  let xx := fp2fromfp ONE : (Fp_t '× Fp_t) in
  let '(xx,ynum) := foldi (@repr WORDSIZE32 0) (len ynum_k) (fun i '(xx,ynum) =>
      let ynum := fp2add ynum (fp2mul xx (ynum_k.[i])) : (Fp_t '× Fp_t) in
      let xx := fp2mul xx x : (Fp_t '× Fp_t) in
      (xx,ynum)) (xx,ynum) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t)) in
  let yden := fp2zero : (Fp_t '× Fp_t) in
  let xx := fp2fromfp ONE : (Fp_t '× Fp_t) in
  let '(xx,yden) := foldi (@repr WORDSIZE32 0) (len yden_k) (fun i '(xx,yden) =>
      let yden := fp2add yden (fp2mul xx (yden_k.[i])) : (Fp_t '× Fp_t) in
      let xx := fp2mul xx x : (Fp_t '× Fp_t) in
      (xx,yden)) (xx,yden) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t)) in
  let yden := fp2add yden xx : (Fp_t '× Fp_t) in
  let xr := fp2mul xnum (fp2inv xden) : (Fp_t '× Fp_t) in
  let yr := fp2mul y (fp2mul ynum (fp2inv yden)) : (Fp_t '× Fp_t) in
  let inf := false : bool in
  let inf := if
      orb (eq xden fp2zero) (eq yden fp2zero)
    then
      true
    else
      inf : bool in
  (xr,yr,inf).

Definition g2_map_to_curve_sswu (u : (Fp_t '× Fp_t)) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) :=
  let '(xp,yp) := g2_simple_swu_iso u : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t)) in
  g2_isogeny_map xp yp.

Definition g2_hash_to_curve_sswu (msg : Seq_t U8_t) (dst : Seq_t U8_t) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) :=
  let u := fp2_hash_to_field msg dst (@repr WORDSIZE32 2) : Seq_t (Fp_t '× Fp_t) in
  let q0 := g2_map_to_curve_sswu (u.[(@repr WORDSIZE32 0)]) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  let q1 := g2_map_to_curve_sswu (u.[(@repr WORDSIZE32 1)]) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  let r := g2add q0 q1 : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  g2_clear_cofactor r.

Definition g2_encode_to_curve_sswu (msg : Seq_t U8_t) (dst : Seq_t U8_t) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) :=
  let u := fp2_hash_to_field msg dst (@repr WORDSIZE32 1) : Seq_t (Fp_t '× Fp_t) in
  let q := g2_map_to_curve_sswu (u.[(@repr WORDSIZE32 0)]) : ((Fp_t '× Fp_t) '× (Fp_t '× Fp_t) '× bool) in
  g2_clear_cofactor q.
