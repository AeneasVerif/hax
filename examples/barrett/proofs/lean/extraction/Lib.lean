abbrev u8 := Nat
abbrev u16 := Nat
abbrev u32 := Nat
abbrev u64 := Nat
abbrev usize := Nat
abbrev i8 := Nat
abbrev i16 := Nat
abbrev i32 := Nat
abbrev i64 := Nat
abbrev isize := Nat

-- Arithmetic
def hax_machine_int_add (x y: Nat) := x + y
def hax_machine_int_mul (x y: Nat) := x * y
def hax_machine_int_bitxor (x y: Nat) : Nat := sorry

def hax_machine_int_eq (x y: Nat) : Bool := x = y
def hax_machine_int_ne (x y: Nat) : Bool := x != y
def hax_machine_int_ge (x y: Nat) : Bool := x >= y
def hax_machine_int_gt (x y: Nat) : Bool := x > y
def hax_machine_int_le (x y: Nat) : Bool := x <= y
def hax_machine_int_lt (x y: Nat) : Bool := x < y


-- Nums
def num_impl_wrapping_add : Nat -> Nat -> Nat := sorry
def num_impl_from_le_bytes {α} : (Array α) -> u32 := sorry

-- Results
inductive result_Result α β
| ok : α -> result_Result α β
| err : β -> result_Result α β

axiom array_TryFromSliceError : Type

-- Assert
def assert : Bool -> Unit := fun _ => ()
def assume : Prop -> Unit := fun _ => ()
def prop_constructors_from_bool : Bool -> Prop := sorry

-- Hax
def hax_folds_fold_range
  (s: Nat)
  (e: Nat) :
  ((Array u32) -> Nat -> Bool) ->
  (Array u32) ->
  ((Array u32) -> Nat -> (Array u32)) ->
  (Array u32) := sorry

def hax_monomorphized_update_at_update_at_usize :
  (Array u32) ->
  Nat ->
  u32 ->
  (Array u32) := sorry

abbrev hax__autogenerated_refinement__BoundedUsize_BoundedUsize (_: Nat) (_: Nat) := Nat

def result_impl_unwrap {α} : α -> Array β := sorry

-- Vectors
def hax_repeat (x:Nat) (y:Nat) : Array u32 := sorry

-- Ranges

structure ops_range_Range_arg (α: Type) where
ops_range_Range_start : α
ops_range_Range_end : α

inductive ops_range_Range (α: Type)  where
| constr_ops_range_Range : ops_range_Range_arg α -> ops_range_Range α


-- Arrays
def ops_index_Index_index (a: Array u8) : α -> β := sorry
def convert_TryInto_try_into {α} : Array α ->
   result_Result (Array α) array_TryFromSliceError := sorry


-- Slices
def slice_impl_len (a: Array u32) : Nat := sorry

-- Bytes
def num_impl_to_le_bytes : u32 -> Array u8 := sorry
