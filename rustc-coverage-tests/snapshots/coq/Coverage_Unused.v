(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Definition foo `{v_T : Type} `{t_Sized (v_T)} (x : v_T) : (t_i32*unit) :=
  let i := 0 in
  (failure ("(FunctionalizeLoops) something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/933.
Please upvote or comment this issue if you see this error message.
Unhandled loop kind"%string) ("{
 (loop {
 |i| {
 (if core::cmp::f_lt(i, 10) {
 {
 let _: bool = {
 BinOp::Ast.Or(core::cmp::f_ne(i, 0), core::cmp::f_ne(i, 0))
 };
 {
 let i: int = { core::ops::arith::f_add(i, 1) };
 i
 }
 }
 } els..."%string),tt).

Definition unused_template_func `{v_T : Type} `{t_Sized (v_T)} (x : v_T) : (t_i32*unit) :=
  let i := 0 in
  (failure ("(FunctionalizeLoops) something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/933.
Please upvote or comment this issue if you see this error message.
Unhandled loop kind"%string) ("{
 (loop {
 |i| {
 (if core::cmp::f_lt(i, 10) {
 {
 let _: bool = {
 BinOp::Ast.Or(core::cmp::f_ne(i, 0), core::cmp::f_ne(i, 0))
 };
 {
 let i: int = { core::ops::arith::f_add(i, 1) };
 i
 }
 }
 } els..."%string),tt).

Definition unused_func (a : t_u32) : unit :=
  if
    f_ne (a) (0)
  then
    let a := f_add (a) (1) in
    tt
  else
    tt.

Definition unused_func2 (a : t_u32) : unit :=
  if
    f_ne (a) (0)
  then
    let a := f_add (a) (1) in
    tt
  else
    tt.

Definition unused_func3 (a : t_u32) : unit :=
  if
    f_ne (a) (0)
  then
    let a := f_add (a) (1) in
    tt
  else
    tt.

Definition main (_ : unit) : t_Result ((unit)) ((t_u8)) :=
  let _ := foo (0) in
  let _ := foo (0.0%float) in
  Result_Ok (tt).
