(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Record t_Firework `{v_T : Type} `{t_Sized (v_T)} `{t_Copy (v_T)} `{t_Display (v_T)} : Type :=
  {
    f_strength : v_T;
  }.
Arguments t_Firework:clear implicits.
Arguments t_Firework (_) {_} {_} {_}.
Arguments Build_t_Firework {_} {_} {_} {_}.
#[export] Instance settable_t_Firework `{v_T : Type} `{t_Sized (v_T)} `{t_Copy (v_T)} `{t_Display (v_T)} : Settable _ :=
  settable! (@Build_t_Firework `{v_T : Type} `{t_Sized (v_T)} `{t_Copy (v_T)} `{t_Display (v_T)}) <f_strength>.

Definition impl__set_strength `{v_T : Type} `{t_Sized (v_T)} `{t_Copy (v_T)} `{t_Display (v_T)} (self : t_Firework ((v_T))) (new_strength : v_T) : t_Firework ((v_T)) :=
  let self := Build_self (new_strength) in
  self.

Instance t_Drop_697449825 `{v_T : Type} `{t_Sized (v_T)} `{t_Copy (v_T)} `{t_Display (v_T)} : t_Drop ((t_Firework ((v_T)))) :=
  {
    t_Drop_f_drop := fun (self : t_Firework ((v_T))) =>
      let _ := e_print (impl_2__new_v1 (["BOOM times "%string; "!!!
"%string]) ([impl_1__new_display (f_strength self)])) in
      let _ := tt in
      self;
  }.

Definition main (_ : unit) : t_Result ((unit)) ((t_u8)) :=
  run (let firecracker := Build_t_Firework (1) in
  let firecracker := impl__set_strength (firecracker) (2) in
  let tnt := Build_t_Firework (100.1%float) in
  let tnt := impl__set_strength (tnt) (200.1%float) in
  let tnt := impl__set_strength (tnt) (300.3%float) in
  let _ := if
    true
  then
    let _ := e_print (impl_2__new_const (["Exiting with error...
"%string])) in
    let _ := tt in
    let hoist1 := ControlFlow_Break (Result_Err (1)) in
    ControlFlow_Continue (never_to_any (hoist1))
  else
    ControlFlow_Continue (tt) in
  ControlFlow_Continue (let _ := Build_t_Firework (1000) in
  Result_Ok (tt))).
