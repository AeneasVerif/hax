(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

(* NotImplementedYet *)

(* NotImplementedYet *)

Definition load_configuration_files (_ : unit) : t_Result ((t_String)) ((t_String)) :=
  Result_Ok (f_from ("config"%string)).

Definition main (_ : unit) : t_Result ((unit)) ((t_String)) :=
  run (let _ := e_print (impl_2__new_const (["Starting service
"%string])) in
  let _ := tt in
  let config := impl__or_else (load_configuration_files (tt)) (fun e =>
    let res := format (impl_2__new_v1 (["Error loading configs: "%string]) ([impl_1__new_display (e)])) in
    let message := must_use (res) in
    if
      f_gt (impl_String__len (message)) (0)
    then
      ControlFlow_Continue (let _ := e_print (impl_2__new_v1 ([""%string; "
"%string]) ([impl_1__new_display (message)])) in
      let _ := tt in
      Result_Ok (f_from ("ok"%string)))
    else
      let _ := if
        f_gt (impl_str__len ("error"%string)) (0)
      then
        let _ := e_print (impl_2__new_const (["no msg
"%string])) in
        let _ := tt in
        tt
      else
        let _ := e_print (impl_2__new_const (["error
"%string])) in
        let _ := tt in
        tt in
      let hoist1 := ControlFlow_Break (Result_Err (f_from ("error"%string))) in
      ControlFlow_Continue (never_to_any (hoist1))) in
  Result_Ok (let startup_delay_duration := f_from ("arg"%string) in
  let _ := (config,startup_delay_duration) in
  Result_Ok (tt))).
