(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

From Coverage Require Import Std_Fmt (t_Debug).
Export Std_Fmt (t_Debug).

Definition used_only_from_bin_crate_generic_function `{v_T : Type} `{t_Sized (v_T)} `{t_Debug (v_T)} (arg : v_T) : unit :=
  let _ := e_print (impl_2__new_v1 (["used_only_from_bin_crate_generic_function with "%string; "
"%string]) ([impl_1__new_debug (arg)])) in
  let _ := tt in
  tt.

Definition used_only_from_this_lib_crate_generic_function `{v_T : Type} `{t_Sized (v_T)} `{t_Debug (v_T)} (arg : v_T) : unit :=
  let _ := e_print (impl_2__new_v1 (["used_only_from_this_lib_crate_generic_function with "%string; "
"%string]) ([impl_1__new_debug (arg)])) in
  let _ := tt in
  tt.

Definition used_from_bin_crate_and_lib_crate_generic_function `{v_T : Type} `{t_Sized (v_T)} `{t_Debug (v_T)} (arg : v_T) : unit :=
  let _ := e_print (impl_2__new_v1 (["used_from_bin_crate_and_lib_crate_generic_function with "%string; "
"%string]) ([impl_1__new_debug (arg)])) in
  let _ := tt in
  tt.

Definition used_with_same_type_from_bin_crate_and_lib_crate_generic_function `{v_T : Type} `{t_Sized (v_T)} `{t_Debug (v_T)} (arg : v_T) : unit :=
  let _ := e_print (impl_2__new_v1 (["used_with_same_type_from_bin_crate_and_lib_crate_generic_function with "%string; "
"%string]) ([impl_1__new_debug (arg)])) in
  let _ := tt in
  tt.

Definition unused_generic_function `{v_T : Type} `{t_Sized (v_T)} `{t_Debug (v_T)} (arg : v_T) : unit :=
  let _ := e_print (impl_2__new_v1 (["unused_generic_function with "%string; "
"%string]) ([impl_1__new_debug (arg)])) in
  let _ := tt in
  tt.

Definition unused_function (_ : unit) : unit :=
  let is_true := f_eq (f_len (args (tt))) (1) in
  let countdown := 2 in
  if
    f_not (is_true)
  then
    let countdown := 20 in
    tt
  else
    tt.

Definition unused_private_function (_ : unit) : unit :=
  let is_true := f_eq (f_len (args (tt))) (1) in
  let countdown := 2 in
  if
    f_not (is_true)
  then
    let countdown := 20 in
    tt
  else
    tt.

Definition uuse_this_lib_crate (_ : unit) : unit :=
  let _ := used_from_bin_crate_and_lib_crate_generic_function ("used from library used_crate.rs"%string) in
  let _ := used_with_same_type_from_bin_crate_and_lib_crate_generic_function ("used from library used_crate.rs"%string) in
  let some_vec := impl__into_vec (unsize (box_new ([5; 6; 7; 8]))) in
  let _ := used_only_from_this_lib_crate_generic_function (some_vec) in
  let _ := used_only_from_this_lib_crate_generic_function ("used ONLY from library used_crate.rs"%string) in
  tt.

Definition used_function (_ : unit) : unit :=
  let is_true := f_eq (f_len (args (tt))) (1) in
  let countdown := 0 in
  let countdown := if
    is_true
  then
    let countdown := 10 in
    countdown
  else
    countdown in
  let _ := uuse_this_lib_crate (tt) in
  tt.
