(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Definition main (_ : unit) : unit :=
  let is_true := f_eq (f_len (args (tt))) (1) in
  let x := 0 in
  let x := fold_range (0) (10) (fun x _ =>
    true) (x) (fun x _ =>
    let x := match is_true with
    | true =>
      x
    | _ =>
      let x := 1 in
      x
    end in
    let x := 3 in
    x) in
  let x := fold_range (0) (10) (fun x _ =>
    true) (x) (fun x _ =>
    let x := match is_true with
    | false =>
      let x := 1 in
      x
    | _ =>
      x
    end in
    let x := 3 in
    x) in
  let x := fold_range (0) (10) (fun x _ =>
    true) (x) (fun x _ =>
    let x := match is_true with
    | true =>
      let x := 1 in
      x
    | _ =>
      x
    end in
    let x := 3 in
    x) in
  let x := fold_range (0) (10) (fun x _ =>
    true) (x) (fun x _ =>
    let _ := if
      is_true
    then
      never_to_any (failure ("(reject_Continue) ExplicitRejection { reason: "a node of kind [Continue] have been found in the AST" }"%string) ("continue;"%string))
    else
      tt in
    let x := 3 in
    x) in
  let x := fold_range (0) (10) (fun x _ =>
    true) (x) (fun x _ =>
    let x := match is_true with
    | false =>
      let x := 1 in
      x
    | _ =>
      let _ := x in
      x
    end in
    let x := 3 in
    x) in
  let x := fold_range (0) (10) (fun x _ =>
    true) (x) (fun x _ =>
    let x := match is_true with
    | false =>
      let x := 1 in
      x
    | _ =>
      let hoist1 := failure ("(CfIntoMonads) something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/15.
Please upvote or comment this issue if you see this error message.
TODO: Monad for loop-related control flow"%string) ("(break (Tuple0))"%string) in
      x
    end in
    let x := 3 in
    x) in
  let _ := x in
  tt.
