(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Definition loopy (cond : bool) : unit :=
  match cond with
  | true =>
    tt
  | _ =>
    (failure ("(FunctionalizeLoops) something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/405.
Please upvote or comment this issue if you see this error message.
Loop without mutation"%string) ("{
 loop {
 Tuple0
 }
 }"%string),tt)
  end.

Definition e_loop_either_way (cond : bool) : unit :=
  match cond with
  | true =>
    never_to_any ((failure ("(FunctionalizeLoops) something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/405.
Please upvote or comment this issue if you see this error message.
Loop without mutation"%string) ("{
 loop {
 Tuple0
 }
 }"%string),tt))
  | _ =>
    (failure ("(FunctionalizeLoops) something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/405.
Please upvote or comment this issue if you see this error message.
Loop without mutation"%string) ("{
 loop {
 Tuple0
 }
 }"%string),tt)
  end.

Definition e_if (cond : bool) : unit :=
  if
    cond
  then
    never_to_any ((failure ("(FunctionalizeLoops) something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/405.
Please upvote or comment this issue if you see this error message.
Loop without mutation"%string) ("{
 loop {
 Tuple0
 }
 }"%string),tt))
  else
    never_to_any ((failure ("(FunctionalizeLoops) something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/405.
Please upvote or comment this issue if you see this error message.
Loop without mutation"%string) ("{
 loop {
 Tuple0
 }
 }"%string),tt)).

Definition main (_ : unit) : unit :=
  let _ := loopy (true) in
  tt.
