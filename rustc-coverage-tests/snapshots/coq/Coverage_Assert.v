(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Definition might_fail_assert (one_plus_one : t_u32) : unit :=
  let _ := e_print (impl_2__new_v1 (["does 1 + 1 = "%string; "?
"%string]) ([impl_1__new_display (one_plus_one)])) in
  let _ := tt in
  let _ := match (f_add (1) (1),one_plus_one) with
  | (left_val,right_val) =>
    assert (f_eq (left_val) (right_val))
  end in
  tt.

Definition main (_ : unit) : t_Result ((unit)) ((t_u8)) :=
  let countdown := 10 in
  let countdown := failure ("(FunctionalizeLoops) something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/933.
Please upvote or comment this issue if you see this error message.
Unhandled loop kind"%string) ("{
 (loop {
 |countdown| {
 (if core::cmp::f_gt(countdown, 0) {
 {
 let _: tuple0 = {
 (if core::cmp::f_eq(countdown, 1) {
 {
 let _: tuple0 = { coverage::assert::might_fail_assert(3) };
 Tuple0
 }
 } ..."%string) in
  Result_Ok (tt).
