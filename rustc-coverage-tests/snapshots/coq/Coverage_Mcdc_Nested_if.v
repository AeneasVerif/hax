(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Definition say (message : string) : unit :=
  let _ := black_box (message) in
  tt.

Definition nested_if_in_condition (a : bool) (b : bool) (c : bool) : unit :=
  if
    andb (a) (if
      orb (b) (c)
    then
      true
    else
      false)
  then
    let _ := say ("yes"%string) in
    tt
  else
    let _ := say ("no"%string) in
    tt.

Definition doubly_nested_if_in_condition (a : bool) (b : bool) (c : bool) (d : bool) : unit :=
  if
    andb (a) (if
      orb (b) (if
        andb (c) (d)
      then
        true
      else
        false)
    then
      false
    else
      true)
  then
    let _ := say ("yes"%string) in
    tt
  else
    let _ := say ("no"%string) in
    tt.

Definition nested_single_condition_decision (a : bool) (b : bool) : unit :=
  if
    andb (a) (if
      b
    then
      false
    else
      true)
  then
    let _ := say ("yes"%string) in
    tt
  else
    let _ := say ("no"%string) in
    tt.

Definition nested_in_then_block_in_condition (a : bool) (b : bool) (c : bool) (d : bool) (e : bool) : unit :=
  if
    andb (a) (if
      orb (b) (c)
    then
      if
        andb (d) (e)
      then
        true
      else
        false
    else
      false)
  then
    let _ := say ("yes"%string) in
    tt
  else
    let _ := say ("no"%string) in
    tt.

Definition main (_ : unit) : unit :=
  let _ := nested_if_in_condition (true) (false) (false) in
  let _ := nested_if_in_condition (true) (true) (true) in
  let _ := nested_if_in_condition (true) (false) (true) in
  let _ := nested_if_in_condition (false) (true) (true) in
  let _ := doubly_nested_if_in_condition (true) (false) (false) (true) in
  let _ := doubly_nested_if_in_condition (true) (true) (true) (true) in
  let _ := doubly_nested_if_in_condition (true) (false) (true) (true) in
  let _ := doubly_nested_if_in_condition (false) (true) (true) (true) in
  let _ := nested_single_condition_decision (true) (true) in
  let _ := nested_single_condition_decision (true) (false) in
  let _ := nested_single_condition_decision (false) (false) in
  let _ := nested_in_then_block_in_condition (false) (false) (false) (false) (false) in
  let _ := nested_in_then_block_in_condition (true) (false) (false) (false) (false) in
  let _ := nested_in_then_block_in_condition (true) (true) (false) (false) (false) in
  let _ := nested_in_then_block_in_condition (true) (false) (true) (false) (false) in
  let _ := nested_in_then_block_in_condition (true) (false) (true) (true) (false) in
  let _ := nested_in_then_block_in_condition (true) (false) (true) (false) (true) in
  let _ := nested_in_then_block_in_condition (true) (false) (true) (true) (true) in
  tt.
