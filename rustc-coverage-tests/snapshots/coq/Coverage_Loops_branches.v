(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Record t_DebugTest : Type :=
  {
  }.
Arguments t_DebugTest:clear implicits.
Arguments t_DebugTest.
Arguments Build_t_DebugTest.
#[export] Instance settable_t_DebugTest : Settable _ :=
  settable! (@Build_t_DebugTest) <>.

Instance t_Debug_201552488 : t_Debug ((t_DebugTest)) :=
  {
    t_Debug_f_fmt := fun (self : t_DebugTest) (f : t_Formatter) =>
      run (let f := if
        true
      then
        let _ := if
          false
        then
          failure ("(FunctionalizeLoops) something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/405.
Please upvote or comment this issue if you see this error message.
Loop without mutation"%string) ("{
 loop {
 (if true {
 Tuple0
 } else {
 {
 let hoist1: tuple0 = {
 rust_primitives::hax::failure(
 "(CfIntoMonads) something is not implemented yet.This is discussed in issue https://github.com/hacsp..."%string)
        else
          tt in
        let (tmp0,out) := impl_9__write_fmt (f) (impl_2__new_const (["cool"%string])) in
        let f := tmp0 in
        let hoist4 := out in
        let hoist5 := f_branch (hoist4) in
        let _ := match hoist5 with
        | ControlFlow_Break (residual) =>
          let hoist3 := ControlFlow_Break ((f,f_from_residual (residual))) in
          ControlFlow_Continue (never_to_any (hoist3))
        | ControlFlow_Continue (val) =>
          ControlFlow_Continue (val)
        end in
        ControlFlow_Continue (f)
      else
        ControlFlow_Continue (f) in
      ControlFlow_Continue (let f := fold_range (0) (10) (fun f _ =>
        true) (f) (fun f i =>
        if
          true
        then
          let _ := if
            false
          then
            failure ("(FunctionalizeLoops) something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/405.
Please upvote or comment this issue if you see this error message.
Loop without mutation"%string) ("{
 loop {
 (if true {
 Tuple0
 } else {
 {
 let hoist6: tuple0 = {
 rust_primitives::hax::failure(
 "(CfIntoMonads) something is not implemented yet.This is discussed in issue https://github.com/hacsp..."%string)
          else
            tt in
          let (tmp0,out) := impl_9__write_fmt (f) (impl_2__new_const (["cool"%string])) in
          let f := tmp0 in
          let hoist9 := out in
          let hoist10 := f_branch (hoist9) in
          let _ := match hoist10 with
          | ControlFlow_Break (residual) =>
            let hoist8 := ControlFlow_Break ((f,f_from_residual (residual))) in
            ControlFlow_Continue (never_to_any (hoist8))
          | ControlFlow_Continue (val) =>
            ControlFlow_Continue (val)
          end in
          ControlFlow_Continue (f)
        else
          ControlFlow_Continue (f)) in
      let hax_temp_output := Result_Ok (tt) in
      (f,hax_temp_output)));
  }.

Record t_DisplayTest : Type :=
  {
  }.
Arguments t_DisplayTest:clear implicits.
Arguments t_DisplayTest.
Arguments Build_t_DisplayTest.
#[export] Instance settable_t_DisplayTest : Settable _ :=
  settable! (@Build_t_DisplayTest) <>.

Instance t_Display_796225498 : t_Display ((t_DisplayTest)) :=
  {
    t_Display_f_fmt := fun (self : t_DisplayTest) (f : t_Formatter) =>
      run (let f := if
        false
      then
        ControlFlow_Continue (f)
      else
        let _ := if
          false
        then
          failure ("(FunctionalizeLoops) something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/405.
Please upvote or comment this issue if you see this error message.
Loop without mutation"%string) ("{
 loop {
 (if true {
 Tuple0
 } else {
 {
 let hoist11: tuple0 = {
 rust_primitives::hax::failure(
 "(CfIntoMonads) something is not implemented yet.This is discussed in issue https://github.com/hacs..."%string)
        else
          tt in
        let (tmp0,out) := impl_9__write_fmt (f) (impl_2__new_const (["cool"%string])) in
        let f := tmp0 in
        let hoist14 := out in
        let hoist15 := f_branch (hoist14) in
        let _ := match hoist15 with
        | ControlFlow_Break (residual) =>
          let hoist13 := ControlFlow_Break ((f,f_from_residual (residual))) in
          ControlFlow_Continue (never_to_any (hoist13))
        | ControlFlow_Continue (val) =>
          ControlFlow_Continue (val)
        end in
        ControlFlow_Continue (f) in
      ControlFlow_Continue (let f := fold_range (0) (10) (fun f _ =>
        true) (f) (fun f i =>
        if
          false
        then
          ControlFlow_Continue (f)
        else
          let _ := if
            false
          then
            failure ("(FunctionalizeLoops) something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/405.
Please upvote or comment this issue if you see this error message.
Loop without mutation"%string) ("{
 loop {
 (if true {
 Tuple0
 } else {
 {
 let hoist16: tuple0 = {
 rust_primitives::hax::failure(
 "(CfIntoMonads) something is not implemented yet.This is discussed in issue https://github.com/hacs..."%string)
          else
            tt in
          let (tmp0,out) := impl_9__write_fmt (f) (impl_2__new_const (["cool"%string])) in
          let f := tmp0 in
          let hoist19 := out in
          let hoist20 := f_branch (hoist19) in
          let _ := match hoist20 with
          | ControlFlow_Break (residual) =>
            let hoist18 := ControlFlow_Break ((f,f_from_residual (residual))) in
            ControlFlow_Continue (never_to_any (hoist18))
          | ControlFlow_Continue (val) =>
            ControlFlow_Continue (val)
          end in
          ControlFlow_Continue (f)) in
      let hax_temp_output := Result_Ok (tt) in
      (f,hax_temp_output)));
  }.

Definition main (_ : unit) : unit :=
  let debug_test := Build_t_DebugTest in
  let _ := e_print (impl_2__new_v1 ([""%string; "
"%string]) ([impl_1__new_debug (debug_test)])) in
  let _ := tt in
  let display_test := Build_t_DisplayTest in
  let _ := e_print (impl_2__new_v1 ([""%string; "
"%string]) ([impl_1__new_display (display_test)])) in
  let _ := tt in
  tt.
