(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

(* NotImplementedYet *)

Definition main__t_in_mod__v_IN_MOD_CONST : t_u32 :=
  1000.

Definition main__in_func (a : t_u32) : unit :=
  let b := 1 in
  let c := f_add (a) (b) in
  let _ := e_print (impl_2__new_v1 (["c = "%string; "
"%string]) ([impl_1__new_display (c)])) in
  tt.

Record main__t_InStruct : Type :=
  {
    main__f_in_struct_field : t_u32;
  }.
Arguments main__t_InStruct:clear implicits.
Arguments main__t_InStruct.
Arguments Build_main__t_InStruct.
#[export] Instance settable_main__t_InStruct : Settable _ :=
  settable! (@Build_main__t_InStruct) <main__f_in_struct_field>.

Definition main__v_IN_CONST : t_u32 :=
  1234.

TODO: please implement the method `item'_HaxError`

Instance main__t_InTrait_686667650 : main__t_InTrait ((main__t_InStruct)) :=
  {
    main__t_InTrait_main__f_trait_func := fun (self : main__t_InStruct) (incr : t_u32) =>
      let self := Build_self (f_add (main__f_in_struct_field self) (incr)) in
      let _ := main__in_func (main__f_in_struct_field self) in
      self;
  }.

Definition main (_ : unit) : unit :=
  let is_true := f_eq (f_len (args (tt))) (1) in
  let countdown := 0 in
  let countdown := if
    is_true
  then
    let countdown := 10 in
    countdown
  else
    countdown in
  let _ := if
    is_true
  then
    let _ := main__in_func (countdown) in
    tt
  else
    tt in
  let val := Build_t_C_main__InStruct (101) in
  let val := main__f_default_trait_func (val) in
  tt.
