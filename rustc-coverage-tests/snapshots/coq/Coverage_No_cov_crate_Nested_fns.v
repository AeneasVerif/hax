(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Definition outer_not_covered__inner (is_true : bool) : unit :=
  if
    is_true
  then
    let _ := e_print (impl_2__new_const (["called and covered
"%string])) in
    let _ := tt in
    tt
  else
    let _ := e_print (impl_2__new_const (["absolutely not covered
"%string])) in
    let _ := tt in
    tt.

Definition outer_not_covered (is_true : bool) : unit :=
  let _ := e_print (impl_2__new_const (["called but not covered
"%string])) in
  let _ := tt in
  let _ := outer_not_covered__inner (is_true) in
  tt.

Definition outer__inner_not_covered (is_true : bool) : unit :=
  if
    is_true
  then
    let _ := e_print (impl_2__new_const (["called but not covered
"%string])) in
    let _ := tt in
    tt
  else
    let _ := e_print (impl_2__new_const (["absolutely not covered
"%string])) in
    let _ := tt in
    tt.

Definition outer (is_true : bool) : unit :=
  let _ := e_print (impl_2__new_const (["called and covered
"%string])) in
  let _ := tt in
  let _ := outer__inner_not_covered (is_true) in
  tt.

Definition outer_both_covered__inner (is_true : bool) : unit :=
  if
    is_true
  then
    let _ := e_print (impl_2__new_const (["called and covered
"%string])) in
    let _ := tt in
    tt
  else
    let _ := e_print (impl_2__new_const (["absolutely not covered
"%string])) in
    let _ := tt in
    tt.

Definition outer_both_covered (is_true : bool) : unit :=
  let _ := e_print (impl_2__new_const (["called and covered
"%string])) in
  let _ := tt in
  let _ := outer_both_covered__inner (is_true) in
  tt.
