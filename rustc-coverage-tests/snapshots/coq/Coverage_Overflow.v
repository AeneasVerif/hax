(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Definition might_overflow (to_add : t_u32) : t_u32 :=
  let _ := if
    f_gt (to_add) (5)
  then
    let _ := e_print (impl_2__new_const (["this will probably overflow
"%string])) in
    let _ := tt in
    tt
  else
    tt in
  let add_to := f_sub (impl_u32__MAX) (5) in
  let _ := e_print (impl_2__new_v1 (["does "%string; " + "%string; " overflow?
"%string]) ([impl_1__new_display (add_to); impl_1__new_display (to_add)])) in
  let _ := tt in
  let result := f_add (to_add) (add_to) in
  let _ := e_print (impl_2__new_const (["continuing after overflow check
"%string])) in
  let _ := tt in
  result.

Definition main (_ : unit) : t_Result ((unit)) ((t_u8)) :=
  let countdown := 10 in
  let countdown := failure ("(FunctionalizeLoops) something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/933.
Please upvote or comment this issue if you see this error message.
Unhandled loop kind"%string) ("{
 (loop {
 |countdown| {
 (if core::cmp::f_gt(countdown, 0) {
 {
 let _: tuple0 = {
 (if core::cmp::f_eq(countdown, 1) {
 {
 let result: int = {
 coverage::overflow::might_overflow(10)
 };
 {
 let _:..."%string) in
  Result_Ok (tt).
