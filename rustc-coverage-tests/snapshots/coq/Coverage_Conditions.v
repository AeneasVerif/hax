(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Definition main__v_B : t_u32 :=
  100.

Definition main (_ : unit) : unit :=
  run (let countdown := 0 in
  let countdown := if
    true
  then
    let countdown := 10 in
    countdown
  else
    countdown in
  let (countdown,x) := if
    f_gt (countdown) (7)
  then
    ControlFlow_Continue (let countdown := f_sub (countdown) (4) in
    (countdown,main__v_B))
  else
    if
      f_gt (countdown) (2)
    then
      ControlFlow_Continue (let countdown := if
        orb (orb (f_lt (countdown) (1)) (f_gt (countdown) (5))) (f_ne (countdown) (9))
      then
        let countdown := 0 in
        countdown
      else
        countdown in
      let countdown := f_sub (countdown) (5) in
      (countdown,countdown))
    else
      let hoist1 := ControlFlow_Break (tt) in
      ControlFlow_Continue ((countdown,never_to_any (hoist1))) in
  let countdown := 0 in
  let countdown := if
    true
  then
    let countdown := 10 in
    countdown
  else
    countdown in
  let countdown := if
    f_gt (countdown) (7)
  then
    ControlFlow_Continue (let countdown := f_sub (countdown) (4) in
    countdown)
  else
    if
      f_gt (countdown) (2)
    then
      ControlFlow_Continue (let countdown := if
        orb (orb (f_lt (countdown) (1)) (f_gt (countdown) (5))) (f_ne (countdown) (9))
      then
        let countdown := 0 in
        countdown
      else
        countdown in
      let countdown := f_sub (countdown) (5) in
      countdown)
    else
      let hoist2 := ControlFlow_Break (tt) in
      ControlFlow_Continue (countdown) in
  let _ := if
    true
  then
    let countdown := 0 in
    let countdown := if
      true
    then
      let countdown := 10 in
      countdown
    else
      countdown in
    if
      f_gt (countdown) (7)
    then
      ControlFlow_Continue (let countdown := f_sub (countdown) (4) in
      tt)
    else
      if
        f_gt (countdown) (2)
      then
        ControlFlow_Continue (let countdown := if
          orb (orb (f_lt (countdown) (1)) (f_gt (countdown) (5))) (f_ne (countdown) (9))
        then
          let countdown := 0 in
          countdown
        else
          countdown in
        let countdown := f_sub (countdown) (5) in
        tt)
      else
        let hoist3 := ControlFlow_Break (tt) in
        ControlFlow_Continue (never_to_any (hoist3))
  else
    ControlFlow_Continue (tt) in
  let countdown := 0 in
  let countdown := if
    true
  then
    let countdown := 1 in
    countdown
  else
    countdown in
  let (countdown,z) := if
    f_gt (countdown) (7)
  then
    ControlFlow_Continue (let countdown := f_sub (countdown) (4) in
    (countdown,tt))
  else
    if
      f_gt (countdown) (2)
    then
      ControlFlow_Continue (let countdown := if
        orb (orb (f_lt (countdown) (1)) (f_gt (countdown) (5))) (f_ne (countdown) (9))
      then
        let countdown := 0 in
        countdown
      else
        countdown in
      let countdown := f_sub (countdown) (5) in
      (countdown,tt))
    else
      let should_be_reachable := countdown in
      let _ := e_print (impl_2__new_const (["reached
"%string])) in
      let _ := tt in
      let hoist4 := ControlFlow_Break (tt) in
      ControlFlow_Continue ((countdown,never_to_any (hoist4))) in
  let (countdown,w) := if
    f_gt (countdown) (7)
  then
    ControlFlow_Continue (let countdown := f_sub (countdown) (4) in
    (countdown,tt))
  else
    if
      f_gt (countdown) (2)
    then
      ControlFlow_Continue (let countdown := if
        orb (orb (f_lt (countdown) (1)) (f_gt (countdown) (5))) (f_ne (countdown) (9))
      then
        let countdown := 0 in
        countdown
      else
        countdown in
      let countdown := f_sub (countdown) (5) in
      (countdown,tt))
    else
      let hoist5 := ControlFlow_Break (tt) in
      ControlFlow_Continue ((countdown,never_to_any (hoist5))) in
  ControlFlow_Continue (tt)).
