(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Definition if_not (cond : bool) : unit :=
  let _ := if
    f_not (cond)
  then
    let _ := e_print (impl_2__new_const (["cond was false
"%string])) in
    let _ := tt in
    tt
  else
    tt in
  let _ := if
    f_not (cond)
  then
    let _ := e_print (impl_2__new_const (["cond was false
"%string])) in
    let _ := tt in
    tt
  else
    tt in
  if
    f_not (cond)
  then
    let _ := e_print (impl_2__new_const (["cond was false
"%string])) in
    let _ := tt in
    tt
  else
    let _ := e_print (impl_2__new_const (["cond was true
"%string])) in
    let _ := tt in
    tt.

Definition main (_ : unit) : (unit*unit) :=
  let _ := failure ("(FunctionalizeLoops) something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/405.
Please upvote or comment this issue if you see this error message.
Loop without mutation"%string) ("{
 for _ in (core::iter::traits::collect::f_into_iter(core::ops::range::Range {
 f_start: 0,
 f_end: 8,
 })) {
 coverage::if_not::if_not(core::hint::black_box::<bool>(true))
 }
 }"%string) in
  (failure ("(FunctionalizeLoops) something is not implemented yet.This is discussed in issue https://github.com/hacspec/hax/issues/405.
Please upvote or comment this issue if you see this error message.
Loop without mutation"%string) ("{
 for _ in (core::iter::traits::collect::f_into_iter(core::ops::range::Range {
 f_start: 0,
 f_end: 4,
 })) {
 coverage::if_not::if_not(core::hint::black_box::<bool>(false))
 }
 }"%string),tt).
