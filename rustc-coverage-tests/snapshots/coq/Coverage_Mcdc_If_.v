(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Definition say (message : string) : unit :=
  let _ := black_box (message) in
  tt.

Definition mcdc_check_neither (a : bool) (b : bool) : unit :=
  if
    andb (a) (b)
  then
    let _ := say ("a and b"%string) in
    tt
  else
    let _ := say ("not both"%string) in
    tt.

Definition mcdc_check_a (a : bool) (b : bool) : unit :=
  if
    andb (a) (b)
  then
    let _ := say ("a and b"%string) in
    tt
  else
    let _ := say ("not both"%string) in
    tt.

Definition mcdc_check_b (a : bool) (b : bool) : unit :=
  if
    andb (a) (b)
  then
    let _ := say ("a and b"%string) in
    tt
  else
    let _ := say ("not both"%string) in
    tt.

Definition mcdc_check_both (a : bool) (b : bool) : unit :=
  if
    andb (a) (b)
  then
    let _ := say ("a and b"%string) in
    tt
  else
    let _ := say ("not both"%string) in
    tt.

Definition mcdc_check_tree_decision (a : bool) (b : bool) (c : bool) : unit :=
  if
    andb (a) (orb (b) (c))
  then
    let _ := say ("pass"%string) in
    tt
  else
    let _ := say ("reject"%string) in
    tt.

Definition mcdc_check_not_tree_decision (a : bool) (b : bool) (c : bool) : unit :=
  if
    andb (orb (a) (b)) (c)
  then
    let _ := say ("pass"%string) in
    tt
  else
    let _ := say ("reject"%string) in
    tt.

Definition mcdc_nested_if (a : bool) (b : bool) (c : bool) : unit :=
  if
    orb (a) (b)
  then
    let _ := say ("a or b"%string) in
    if
      andb (b) (c)
    then
      let _ := say ("b and c"%string) in
      tt
    else
      tt
  else
    let _ := say ("neither a nor b"%string) in
    tt.

Definition main (_ : unit) : unit :=
  let _ := mcdc_check_neither (false) (false) in
  let _ := mcdc_check_neither (false) (true) in
  let _ := mcdc_check_a (true) (true) in
  let _ := mcdc_check_a (false) (true) in
  let _ := mcdc_check_b (true) (true) in
  let _ := mcdc_check_b (true) (false) in
  let _ := mcdc_check_both (false) (true) in
  let _ := mcdc_check_both (true) (true) in
  let _ := mcdc_check_both (true) (false) in
  let _ := mcdc_check_tree_decision (false) (true) (true) in
  let _ := mcdc_check_tree_decision (true) (true) (false) in
  let _ := mcdc_check_tree_decision (true) (false) (false) in
  let _ := mcdc_check_tree_decision (true) (false) (true) in
  let _ := mcdc_check_not_tree_decision (false) (true) (true) in
  let _ := mcdc_check_not_tree_decision (true) (true) (false) in
  let _ := mcdc_check_not_tree_decision (true) (false) (false) in
  let _ := mcdc_check_not_tree_decision (true) (false) (true) in
  let _ := mcdc_nested_if (true) (false) (true) in
  let _ := mcdc_nested_if (true) (true) (true) in
  let _ := mcdc_nested_if (true) (true) (false) in
  tt.
