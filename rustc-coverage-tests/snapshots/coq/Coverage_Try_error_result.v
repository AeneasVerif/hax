(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* NotImplementedYet *)

Definition call (return_error : bool) : t_Result ((unit)) ((unit)) :=
  if
    return_error
  then
    Result_Err (tt)
  else
    Result_Ok (tt).

Definition test1 (_ : unit) : t_Result ((unit)) ((unit)) :=
  let countdown := 10 in
  let countdown := fold_range (0) (10) (fun countdown _ =>
    true) (countdown) (fun countdown _ =>
    let countdown := f_sub (countdown) (1) in
    if
      f_lt (countdown) (5)
    then
      let _ := call (true) in
      let _ := call (false) in
      Result_Ok (countdown)
    else
      let _ := call (false) in
      Result_Ok (countdown)) in
  Result_Ok (tt).

Record t_Thing1 : Type :=
  {
  }.
Arguments t_Thing1:clear implicits.
Arguments t_Thing1.
Arguments Build_t_Thing1.
#[export] Instance settable_t_Thing1 : Settable _ :=
  settable! (@Build_t_Thing1) <>.

Record t_Thing2 : Type :=
  {
  }.
Arguments t_Thing2:clear implicits.
Arguments t_Thing2.
Arguments Build_t_Thing2.
#[export] Instance settable_t_Thing2 : Settable _ :=
  settable! (@Build_t_Thing2) <>.

Definition impl_Thing1__get_thing_2_ (self : t_Thing1) (return_error : bool) : t_Result ((t_Thing2)) ((unit)) :=
  if
    return_error
  then
    Result_Err (tt)
  else
    Result_Ok (Build_t_Thing2).

Definition impl_Thing2__call (self : t_Thing2) (return_error : bool) : t_Result ((t_u32)) ((unit)) :=
  if
    return_error
  then
    Result_Err (tt)
  else
    Result_Ok (57).

Definition test2 (_ : unit) : t_Result ((unit)) ((unit)) :=
  let thing1 := Build_t_Thing1 in
  let countdown := 10 in
  let countdown := fold_range (0) (10) (fun countdown _ =>
    true) (countdown) (fun countdown _ =>
    let countdown := f_sub (countdown) (1) in
    if
      f_lt (countdown) (5)
    then
      let hoist1 := impl_Thing1__get_thing_2_ (thing1) (false) in
      let hoist2 := impl_Thing2__call (hoist1) (true) in
      let _ := impl__expect_err (hoist2) ("call should fail"%string) in
      let hoist3 := impl_Thing1__get_thing_2_ (thing1) (false) in
      let hoist4 := impl_Thing2__call (hoist3) (true) in
      let _ := impl__expect_err (hoist4) ("call should fail"%string) in
      let hoist5 := impl_Thing1__get_thing_2_ (thing1) (true) in
      let hoist6 := impl_Thing2__call (hoist5) (true) in
      let val := hoist6 in
      let _ := match (val,57) with
      | (left_val,right_val) =>
        assert (f_eq (left_val) (right_val))
      end in
      let hoist7 := impl_Thing1__get_thing_2_ (thing1) (true) in
      let hoist8 := impl_Thing2__call (hoist7) (false) in
      let val := hoist8 in
      Result_Ok (let _ := match (val,57) with
      | (left_val,right_val) =>
        assert (f_eq (left_val) (right_val))
      end in
      countdown)
    else
      let hoist9 := impl_Thing1__get_thing_2_ (thing1) (false) in
      let hoist10 := impl_Thing2__call (hoist9) (false) in
      let val := hoist10 in
      let _ := match (val,57) with
      | (left_val,right_val) =>
        assert (f_eq (left_val) (right_val))
      end in
      let hoist11 := impl_Thing1__get_thing_2_ (thing1) (false) in
      let hoist12 := impl_Thing2__call (hoist11) (false) in
      let val := hoist12 in
      let _ := match (val,57) with
      | (left_val,right_val) =>
        assert (f_eq (left_val) (right_val))
      end in
      let hoist13 := impl_Thing1__get_thing_2_ (thing1) (false) in
      let hoist14 := impl_Thing2__call (hoist13) (false) in
      let val := hoist14 in
      Result_Ok (let _ := match (val,57) with
      | (left_val,right_val) =>
        assert (f_eq (left_val) (right_val))
      end in
      countdown)) in
  Result_Ok (tt).

Definition main (_ : unit) : t_Result ((unit)) ((unit)) :=
  run (let _ := impl__expect_err (test1 (tt)) ("test1 should fail"%string) in
  let _ := test2 (tt) in
  Result_Ok (Result_Ok (tt))).
