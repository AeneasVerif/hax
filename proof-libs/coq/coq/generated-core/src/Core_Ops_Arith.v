(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import String.

From Core Require Import Core_Marker (t_Sized).
Export Core_Marker (t_Sized).

(* NotImplementedYet *)

Class t_Add `{v_Self : Type} `{v_Rhs : Type} `{t_Sized v_Rhs} : Type :=
  {
    t_Add_f_Output : Type;
    t_Add_f_add : v_Self -> v_Rhs -> t_Add_f_Output;
  }.
Arguments t_Add:clear implicits.
Arguments t_Add (_) (_) {_}.

Class t_Div `{v_Self : Type} `{v_Rhs : Type} `{t_Sized v_Rhs} : Type :=
  {
    t_Div_f_Output : Type;
    t_Div_f_div : v_Self -> v_Rhs -> t_Div_f_Output;
  }.
Arguments t_Div:clear implicits.
Arguments t_Div (_) (_) {_}.

Class t_Mul `{v_Self : Type} `{v_Rhs : Type} `{t_Sized v_Rhs} : Type :=
  {
    t_Mul_f_Output : Type;
    t_Mul_f_mul : v_Self -> v_Rhs -> t_Mul_f_Output;
  }.
Arguments t_Mul:clear implicits.
Arguments t_Mul (_) (_) {_}.

Class t_Neg `{v_Self : Type} : Type :=
  {
    t_Neg_f_Output : Type;
    t_Neg_f_neg : v_Self -> t_Neg_f_Output;
  }.
Arguments t_Neg:clear implicits.
Arguments t_Neg (_).

Class t_Rem `{v_Self : Type} `{v_Rhs : Type} `{t_Sized v_Rhs} : Type :=
  {
    t_Rem_f_Output : Type;
    t_Rem_f_rem : v_Self -> v_Rhs -> t_Rem_f_Output;
  }.
Arguments t_Rem:clear implicits.
Arguments t_Rem (_) (_) {_}.

Class t_Sub `{v_Self : Type} `{v_Rhs : Type} `{t_Sized v_Rhs} : Type :=
  {
    t_Sub_f_Output : Type;
    t_Sub_f_sub : v_Self -> v_Rhs -> t_Sub_f_Output;
  }.
Arguments t_Sub:clear implicits.
Arguments t_Sub (_) (_) {_}.
