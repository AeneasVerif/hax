(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Super_Spec.
Export Super_Spec.

Require Import Super.
Export Super.

Require Import primitive.
Export primitive.

Require Import Core_Cmp.
Export Core_Cmp.

Require Import Core_Convert.
Export Core_Convert.

(*Not implemented yet? todo(item)*)

Definition impl_24__from_u128_binary (x : int128) : t_Positive_t :=
  if eq x (@repr WORDSIZE128 1)
  then xH
  else if eq (rem x (@repr WORDSIZE128 2)) (@repr WORDSIZE128 0)
    then xO (impl_24__from_u128_binary (div x (@repr WORDSIZE128 2)))
    else xI (impl_24__from_u128_binary (div x (@repr WORDSIZE128 2))).

#[global] Instance t_HaxInt_t_t_From : t_From t_HaxInt_t int128 := {
  f_from (x : int128) := if eq x (@repr WORDSIZE128 0)
  then v_HaxInt_ZERO
  else positive_to_int (impl_24__from_u128_binary x);
}.

#[global] Instance t_Z_t_t_From : t_From t_Z_t int128 := {
  f_from (x : int128) := match f_cmp x (@repr WORDSIZE128 0) with
  | Ordering_Equal  =>
    Z_ZEROt_Z_t
  | Ordering_Less  =>
    Z_NEG (impl_24__from_u128_binary (impl__i128__unsigned_abs x))
  | Ordering_Greater  =>
    Z_POS (impl_24__from_u128_binary (impl__i128__unsigned_abs x))
  end;
}.

Definition impl_24__from_u16_binary (x : int16) : t_Positive_t :=
  if eq x (@repr WORDSIZE16 1)
  then xH
  else if eq (rem x (@repr WORDSIZE16 2)) (@repr WORDSIZE16 0)
    then xO (impl_24__from_u16_binary (div x (@repr WORDSIZE16 2)))
    else xI (impl_24__from_u16_binary (div x (@repr WORDSIZE16 2))).

#[global] Instance t_HaxInt_t_t_From : t_From t_HaxInt_t int16 := {
  f_from (x : int16) := if eq x (@repr WORDSIZE16 0)
  then v_HaxInt_ZERO
  else positive_to_int (impl_24__from_u16_binary x);
}.

#[global] Instance t_Z_t_t_From : t_From t_Z_t int16 := {
  f_from (x : int16) := match f_cmp x (@repr WORDSIZE16 0) with
  | Ordering_Equal  =>
    Z_ZEROt_Z_t
  | Ordering_Less  =>
    Z_NEG (impl_24__from_u16_binary (impl__i16__unsigned_abs x))
  | Ordering_Greater  =>
    Z_POS (impl_24__from_u16_binary (impl__i16__unsigned_abs x))
  end;
}.

Definition impl_24__from_u32_binary (x : int32) : t_Positive_t :=
  if eq x (@repr WORDSIZE32 1)
  then xH
  else if eq (rem x (@repr WORDSIZE32 2)) (@repr WORDSIZE32 0)
    then xO (impl_24__from_u32_binary (div x (@repr WORDSIZE32 2)))
    else xI (impl_24__from_u32_binary (div x (@repr WORDSIZE32 2))).

#[global] Instance t_HaxInt_t_t_From : t_From t_HaxInt_t int32 := {
  f_from (x : int32) := if eq x (@repr WORDSIZE32 0)
  then v_HaxInt_ZERO
  else positive_to_int (impl_24__from_u32_binary x);
}.

#[global] Instance t_Z_t_t_From : t_From t_Z_t int32 := {
  f_from (x : int32) := match f_cmp x (@repr WORDSIZE32 0) with
  | Ordering_Equal  =>
    Z_ZEROt_Z_t
  | Ordering_Less  =>
    Z_NEG (impl_24__from_u32_binary (impl__i32__unsigned_abs x))
  | Ordering_Greater  =>
    Z_POS (impl_24__from_u32_binary (impl__i32__unsigned_abs x))
  end;
}.

Definition impl_24__from_u64_binary (x : int64) : t_Positive_t :=
  if eq x (@repr WORDSIZE64 1)
  then xH
  else if eq (rem x (@repr WORDSIZE64 2)) (@repr WORDSIZE64 0)
    then xO (impl_24__from_u64_binary (div x (@repr WORDSIZE64 2)))
    else xI (impl_24__from_u64_binary (div x (@repr WORDSIZE64 2))).

#[global] Instance t_HaxInt_t_t_From : t_From t_HaxInt_t int64 := {
  f_from (x : int64) := if eq x (@repr WORDSIZE64 0)
  then v_HaxInt_ZERO
  else positive_to_int (impl_24__from_u64_binary x);
}.

#[global] Instance t_Z_t_t_From : t_From t_Z_t int64 := {
  f_from (x : int64) := match f_cmp x (@repr WORDSIZE64 0) with
  | Ordering_Equal  =>
    Z_ZEROt_Z_t
  | Ordering_Less  =>
    Z_NEG (impl_24__from_u64_binary (impl__i64__unsigned_abs x))
  | Ordering_Greater  =>
    Z_POS (impl_24__from_u64_binary (impl__i64__unsigned_abs x))
  end;
}.

Definition impl_24__from_u8_binary (x : int8) : t_Positive_t :=
  if eq x (@repr WORDSIZE8 1)
  then xH
  else if eq (rem x (@repr WORDSIZE8 2)) (@repr WORDSIZE8 0)
    then xO (impl_24__from_u8_binary (div x (@repr WORDSIZE8 2)))
    else xI (impl_24__from_u8_binary (div x (@repr WORDSIZE8 2))).

#[global] Instance t_HaxInt_t_t_From : t_From t_HaxInt_t int8 := {
  f_from (x : int8) := if eq x (@repr WORDSIZE8 0)
  then v_HaxInt_ZERO
  else positive_to_int (impl_24__from_u8_binary x);
}.

#[global] Instance t_Z_t_t_From : t_From t_Z_t int8 := {
  f_from (x : int8) := match f_cmp x (@repr WORDSIZE8 0) with
  | Ordering_Equal  =>
    Z_ZEROt_Z_t
  | Ordering_Less  =>
    Z_NEG (impl_24__from_u8_binary (impl__i8__unsigned_abs x))
  | Ordering_Greater  =>
    Z_POS (impl_24__from_u8_binary (impl__i8__unsigned_abs x))
  end;
}.

Definition impl_24__from_usize_binary (x : uint_size) : t_Positive_t :=
  if eq x (@repr WORDSIZE32 1)
  then xH
  else if eq (rem x (@repr WORDSIZE32 2)) (@repr WORDSIZE32 0)
    then xO (impl_24__from_usize_binary (div x (@repr WORDSIZE32 2)))
    else xI (impl_24__from_usize_binary (div x (@repr WORDSIZE32 2))).

#[global] Instance t_HaxInt_t_t_From : t_From t_HaxInt_t uint_size := {
  f_from (x : uint_size) := if eq x (@repr WORDSIZE32 0)
  then v_HaxInt_ZERO
  else positive_to_int (impl_24__from_usize_binary x);
}.

#[global] Instance t_Z_t_t_From : t_From t_Z_t uint_size := {
  f_from (x : uint_size) := match f_cmp x (@repr WORDSIZE32 0) with
  | Ordering_Equal  =>
    Z_ZEROt_Z_t
  | Ordering_Less  =>
    Z_NEG (impl_24__from_usize_binary (impl__isize__unsigned_abs x))
  | Ordering_Greater  =>
    Z_POS (impl_24__from_usize_binary (impl__isize__unsigned_abs x))
  end;
}.

Definition impl_24__to_u128_binary (self : t_Positive_t) : int128 :=
  match match_positive self with
  | POSITIVE_XH  =>
    (@repr WORDSIZE128 1)
  | POSITIVE_XO p =>
    mul (impl_24__to_u128_binary p) (@repr WORDSIZE128 2)
  | POSITIVE_XI p =>
    add (mul (impl_24__to_u128_binary p) (@repr WORDSIZE128 2)) (@repr WORDSIZE128 1)
  end.

#[global] Instance int128_t_From : t_From int128 t_HaxInt_t := {
  f_from (x : t_HaxInt_t) := match match_pos x with
  | POS_ZERO  =>
    (@repr WORDSIZE128 0)
  | POS_POS p =>
    impl_24__to_u128_binary p
  end;
}.

#[global] Instance int128_t_From : t_From int128 t_Z_t := {
  f_from (x : t_Z_t) := match x with
  | Z_NEG x =>
    sub (neg (cast (sub (impl_24__to_u128_binary x) (@repr WORDSIZE128 1)))) (@repr WORDSIZE128 1)
  | Z_ZERO  =>
    (@repr WORDSIZE128 0)
  | Z_POS x =>
    cast (impl_24__to_u128_binary x)
  end;
}.

Definition impl_24__to_u16_binary (self : t_Positive_t) : int16 :=
  match match_positive self with
  | POSITIVE_XH  =>
    (@repr WORDSIZE16 1)
  | POSITIVE_XO p =>
    mul (impl_24__to_u16_binary p) (@repr WORDSIZE16 2)
  | POSITIVE_XI p =>
    add (mul (impl_24__to_u16_binary p) (@repr WORDSIZE16 2)) (@repr WORDSIZE16 1)
  end.

#[global] Instance int16_t_From : t_From int16 t_HaxInt_t := {
  f_from (x : t_HaxInt_t) := match match_pos x with
  | POS_ZERO  =>
    (@repr WORDSIZE16 0)
  | POS_POS p =>
    impl_24__to_u16_binary p
  end;
}.

#[global] Instance int16_t_From : t_From int16 t_Z_t := {
  f_from (x : t_Z_t) := match x with
  | Z_NEG x =>
    sub (neg (cast (sub (impl_24__to_u16_binary x) (@repr WORDSIZE16 1)))) (@repr WORDSIZE16 1)
  | Z_ZERO  =>
    (@repr WORDSIZE16 0)
  | Z_POS x =>
    cast (impl_24__to_u16_binary x)
  end;
}.

Definition impl_24__to_u32_binary (self : t_Positive_t) : int32 :=
  match match_positive self with
  | POSITIVE_XH  =>
    (@repr WORDSIZE32 1)
  | POSITIVE_XO p =>
    mul (impl_24__to_u32_binary p) (@repr WORDSIZE32 2)
  | POSITIVE_XI p =>
    add (mul (impl_24__to_u32_binary p) (@repr WORDSIZE32 2)) (@repr WORDSIZE32 1)
  end.

#[global] Instance int32_t_From : t_From int32 t_HaxInt_t := {
  f_from (x : t_HaxInt_t) := match match_pos x with
  | POS_ZERO  =>
    (@repr WORDSIZE32 0)
  | POS_POS p =>
    impl_24__to_u32_binary p
  end;
}.

#[global] Instance int32_t_From : t_From int32 t_Z_t := {
  f_from (x : t_Z_t) := match x with
  | Z_NEG x =>
    sub (neg (cast (sub (impl_24__to_u32_binary x) (@repr WORDSIZE32 1)))) (@repr WORDSIZE32 1)
  | Z_ZERO  =>
    (@repr WORDSIZE32 0)
  | Z_POS x =>
    cast (impl_24__to_u32_binary x)
  end;
}.

Definition impl_24__to_u64_binary (self : t_Positive_t) : int64 :=
  match match_positive self with
  | POSITIVE_XH  =>
    (@repr WORDSIZE64 1)
  | POSITIVE_XO p =>
    mul (impl_24__to_u64_binary p) (@repr WORDSIZE64 2)
  | POSITIVE_XI p =>
    add (mul (impl_24__to_u64_binary p) (@repr WORDSIZE64 2)) (@repr WORDSIZE64 1)
  end.

#[global] Instance int64_t_From : t_From int64 t_HaxInt_t := {
  f_from (x : t_HaxInt_t) := match match_pos x with
  | POS_ZERO  =>
    (@repr WORDSIZE64 0)
  | POS_POS p =>
    impl_24__to_u64_binary p
  end;
}.

#[global] Instance int64_t_From : t_From int64 t_Z_t := {
  f_from (x : t_Z_t) := match x with
  | Z_NEG x =>
    sub (neg (cast (sub (impl_24__to_u64_binary x) (@repr WORDSIZE64 1)))) (@repr WORDSIZE64 1)
  | Z_ZERO  =>
    (@repr WORDSIZE64 0)
  | Z_POS x =>
    cast (impl_24__to_u64_binary x)
  end;
}.

Definition impl_24__to_u8_binary (self : t_Positive_t) : int8 :=
  match match_positive self with
  | POSITIVE_XH  =>
    (@repr WORDSIZE8 1)
  | POSITIVE_XO p =>
    mul (impl_24__to_u8_binary p) (@repr WORDSIZE8 2)
  | POSITIVE_XI p =>
    add (mul (impl_24__to_u8_binary p) (@repr WORDSIZE8 2)) (@repr WORDSIZE8 1)
  end.

#[global] Instance int8_t_From : t_From int8 t_HaxInt_t := {
  f_from (x : t_HaxInt_t) := match match_pos x with
  | POS_ZERO  =>
    (@repr WORDSIZE8 0)
  | POS_POS p =>
    impl_24__to_u8_binary p
  end;
}.

#[global] Instance int8_t_From : t_From int8 t_Z_t := {
  f_from (x : t_Z_t) := match x with
  | Z_NEG x =>
    sub (neg (cast (sub (impl_24__to_u8_binary x) (@repr WORDSIZE8 1)))) (@repr WORDSIZE8 1)
  | Z_ZERO  =>
    (@repr WORDSIZE8 0)
  | Z_POS x =>
    cast (impl_24__to_u8_binary x)
  end;
}.

Definition impl_24__to_usize_binary (self : t_Positive_t) : uint_size :=
  match match_positive self with
  | POSITIVE_XH  =>
    (@repr WORDSIZE32 1)
  | POSITIVE_XO p =>
    mul (impl_24__to_usize_binary p) (@repr WORDSIZE32 2)
  | POSITIVE_XI p =>
    add (mul (impl_24__to_usize_binary p) (@repr WORDSIZE32 2)) (@repr WORDSIZE32 1)
  end.

#[global] Instance uint_size_t_From : t_From uint_size t_HaxInt_t := {
  f_from (x : t_HaxInt_t) := match match_pos x with
  | POS_ZERO  =>
    (@repr WORDSIZE32 0)
  | POS_POS p =>
    impl_24__to_usize_binary p
  end;
}.

#[global] Instance uint_size_t_From : t_From uint_size t_Z_t := {
  f_from (x : t_Z_t) := match x with
  | Z_NEG x =>
    sub (neg (cast (sub (impl_24__to_usize_binary x) (@repr WORDSIZE32 1)))) (@repr WORDSIZE32 1)
  | Z_ZERO  =>
    (@repr WORDSIZE32 0)
  | Z_POS x =>
    cast (impl_24__to_usize_binary x)
  end;
}.
