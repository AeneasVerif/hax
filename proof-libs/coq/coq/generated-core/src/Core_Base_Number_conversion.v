(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* From Core Require Import Core. *)

(* TODO: Replace this dummy lib with core lib *)
Class t_Sized (T : Type) := { }.
Definition t_u8 := Z.
Definition t_u16 := Z.
Definition t_u32 := Z.
Definition t_u64 := Z.
Definition t_u128 := Z.
Definition t_usize := Z.
Definition t_i8 := Z.
Definition t_i16 := Z.
Definition t_i32 := Z.
Definition t_i64 := Z.
Definition t_i128 := Z.
Definition t_isize := Z.
Definition t_Array T (x : t_usize) := list T.
Definition t_String := string.
Definition ToString_f_to_string (x : string) := x.
Instance Sized_any : forall {t_A}, t_Sized t_A := {}.
Class t_Clone (T : Type) := { Clone_f_clone : T -> T }.
Instance Clone_any : forall {t_A}, t_Clone t_A := {Clone_f_clone := fun x => x}.
Definition t_Slice (T : Type) := list T.
Definition unsize {T : Type} : list T -> t_Slice T := id.
Definition t_PartialEq_f_eq x y := x =? y.
Definition t_Rem_f_rem (x y : Z) := x mod y.
Definition assert (b : bool) (* `{H_assert : b = true} *) : unit := tt.
Inductive globality := | t_Global.
Definition t_Vec T (_ : globality) : Type := list T.
Definition impl_1__append {T} l1 l2 : list T * list T := (app l1 l2, l2).
Definition impl_1__len {A} (l : list A) := Z.of_nat (List.length l).
Definition impl__new {A} (_ : Datatypes.unit) : list A := nil.
Definition impl__with_capacity {A} (_ : Z)  : list A := nil.
Definition impl_1__push {A} l (x : A) := cons x l.
Class t_From (A B : Type) := { From_f_from : B -> A }.
Definition impl__to_vec {T} (x : t_Slice T) : t_Vec T t_Global := x.
Class t_Into (A B : Type) := { Into_f_into : A -> B }.
Instance t_Into_from_t_From {A B : Type} `{H : t_From B A} : t_Into A B := { Into_f_into x := @From_f_from B A H x }.
Definition from_elem {A} (x : A) (l : Z) := repeat x (Z.to_nat l).
Definition t_Option := option.
Definition impl__map {A B} (x : t_Option A) (f : A -> B) : t_Option B := match x with | Some x => Some (f x) | None => None end.
Definition t_Add_f_add x y := x + y.
Class Cast A B := { cast : A -> B }.
Instance cast_t_u8_t_u32 : Cast t_u8 t_u32 := {| cast x := x |}.
(* / dummy lib *)

From Core Require Import Core_Base_Spec.
Export Core_Base_Spec.

From Core Require Import Core_Base.
Export Core_Base.

From Core Require Import Core (t_primitive).
Export Core (t_primitive).

From Core Require Import Core (t_cmp).
Export Core (t_cmp).

From Core Require Import Core (t_convert).
Export Core (t_convert).

(* NotImplementedYet *)

Notation "'impl_24__from_u128_binary'" := (from_u128_binary).

Notation "'impl_8'" := (impl_8).

Notation "'impl_20'" := (impl_20).

Notation "'impl_24__from_u16_binary'" := (from_u16_binary).

Notation "'impl_2'" := (impl_2).

Notation "'impl_14'" := (impl_14).

Notation "'impl_24__from_u32_binary'" := (from_u32_binary).

Notation "'impl_4'" := (impl_4).

Notation "'impl_16'" := (impl_16).

Notation "'impl_24__from_u64_binary'" := (from_u64_binary).

Notation "'impl_6'" := (impl_6).

Notation "'impl_18'" := (impl_18).

Notation "'impl_24__from_u8_binary'" := (from_u8_binary).

Notation "'impl'" := (impl).

Notation "'impl_12'" := (impl_12).

Notation "'impl_24__from_usize_binary'" := (from_usize_binary).

Notation "'impl_10'" := (impl_10).

Notation "'impl_22'" := (impl_22).

Notation "'impl_24__to_u128_binary'" := (to_u128_binary).

Notation "'impl_9'" := (impl_9).

Notation "'impl_21'" := (impl_21).

Notation "'impl_24__to_u16_binary'" := (to_u16_binary).

Notation "'impl_3'" := (impl_3).

Notation "'impl_15'" := (impl_15).

Notation "'impl_24__to_u32_binary'" := (to_u32_binary).

Notation "'impl_5'" := (impl_5).

Notation "'impl_17'" := (impl_17).

Notation "'impl_24__to_u64_binary'" := (to_u64_binary).

Notation "'impl_7'" := (impl_7).

Notation "'impl_19'" := (impl_19).

Notation "'impl_24__to_u8_binary'" := (to_u8_binary).

Notation "'impl_1'" := (impl_1).

Notation "'impl_13'" := (impl_13).

Notation "'impl_24__to_usize_binary'" := (to_usize_binary).

Notation "'impl_11'" := (impl_11).

Notation "'impl_23'" := (impl_23).
