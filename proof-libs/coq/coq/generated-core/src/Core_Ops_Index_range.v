(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Core_Primitive.
Export Core_Primitive.

Require Import Iterator.
Export Iterator.

Record t_IndexRange : Type := {
  f_start : uint_size;
  f_end : uint_size;
}.

Definition impl__IndexRange__len (self : t_IndexRange_t) : uint_size :=
  sub (f_end self) (f_start self).

Definition impl__IndexRange__next_unchecked (self : t_IndexRange_t) : t_IndexRange_t Ã— uint_size :=
  let value := f_start self : uint_size in
  let self := Build_t_IndexRange (f_start := add value (@repr WORDSIZE32 1)) : t_IndexRange_t in
  let hax_temp_output := value : uint_size in
  (self,hax_temp_output).

Definition impl__IndexRange__zero_to (end : uint_size) : t_IndexRange_t :=
  Build_IndexRange (f_start := (@repr WORDSIZE32 0)) (f_end := end).

(*item error backend*)

#[global] Instance t_IndexRange_t_t_ExactSizeIterator : t_ExactSizeIterator t_IndexRange_t := {
  f_len (self : t_IndexRange_t) := impl__IndexRange__len self;
}.
