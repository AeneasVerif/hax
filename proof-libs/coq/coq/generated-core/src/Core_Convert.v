(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import String.

Class t_From `{v_Self : Type} `{v_T : Type} : Type :=
  {
    t_From_f_from : v_T -> v_Self;
  }.
Arguments t_From:clear implicits.
Arguments t_From (_) (_).

Instance t_From_888864539 `{v_T : Type} : t_From (v_T) (v_T) :=
  {
    t_From_f_from := fun (t : v_T) =>
      t;
  }.

Class t_Into `{v_Self : Type} `{v_T : Type} : Type :=
  {
    t_Into_f_into : v_Self -> v_T;
  }.
Arguments t_Into:clear implicits.
Arguments t_Into (_) (_).

Instance t_Into_28327994 `{v_T : Type} `{v_U : Type} `{t_From v_U v_T} : t_Into (v_T) (v_U) :=
  {
    t_Into_f_into := fun (self : v_T) =>
      t_From_f_from (self);
  }.
