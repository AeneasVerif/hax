(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Core_Cmp.
Export Core_Cmp.

Require Import Core_Ops.
Export Core_Ops.

Require Import Crate_Base.
Export Crate_Base.

Require Import Abstraction.
Export Abstraction.

Require Import Concretization.
Export Concretization.

Require Import Option.
Export Option.

Require Import None.
Export None.

Require Import Some.
Export Some.

Require Import Clone.
Export Clone.

Require Import From.
Export From.

Class t_Constants := {
  f_ZERO : Self ;
  f_ONE : Self ;
  f_MIN : Self ;
  f_MAX : Self ;
}.

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

Definition impl_41__WORDSIZE : t_HaxInt_t :=
  v_WORDSIZE_128_.

Definition impl_55__WORDSIZE : t_HaxInt_t :=
  v_WORDSIZE_64_.

Definition impl_69__WORDSIZE : t_HaxInt_t :=
  v_WORDSIZE_32_.

Definition impl_83__WORDSIZE : t_HaxInt_t :=
  v_WORDSIZE_16_.

Definition impl_97__WORDSIZE : t_HaxInt_t :=
  v_WORDSIZE_8_.

Definition impl_111__WORDSIZE : t_HaxInt_t :=
  v_WORDSIZE_128_.

Definition impl_138__WORDSIZE : t_HaxInt_t :=
  v_WORDSIZE_64_.

Definition impl_165__WORDSIZE : t_HaxInt_t :=
  v_WORDSIZE_32_.

Definition impl_192__WORDSIZE : t_HaxInt_t :=
  v_WORDSIZE_16_.

Definition impl_219__WORDSIZE : t_HaxInt_t :=
  v_WORDSIZE_8_.

Record t_U128 : Type := {
  f_v : t_HaxInt_t;
}.

#[global] Instance t_U128_t_t_Constants : t_Constants t_U128_t := {
  f_ZERO := Build_U128 (f_v := v_HaxInt_ZERO);
  f_ONE := Build_U128 (f_v := v_HaxInt_ONE);
  f_MIN := Build_U128 (f_v := v_HaxInt_ZERO);
  f_MAX := Build_U128 (f_v := v_WORDSIZE_128_SUB_1_);
}.

#[global] Instance t_U128_t_t_Clone : t_Clone t_U128_t := {
  f_clone (self : t_U128_t) := Build_U128 (f_v := f_clone (f_v self));
}.

Record t_U16 : Type := {
  f_v : t_HaxInt_t;
}.

#[global] Instance t_U16_t_t_Constants : t_Constants t_U16_t := {
  f_ZERO := Build_U16 (f_v := v_HaxInt_ZERO);
  f_ONE := Build_U16 (f_v := v_HaxInt_ONE);
  f_MIN := Build_U16 (f_v := v_HaxInt_ZERO);
  f_MAX := Build_U16 (f_v := v_WORDSIZE_16_SUB_1_);
}.

#[global] Instance t_U16_t_t_Clone : t_Clone t_U16_t := {
  f_clone (self : t_U16_t) := Build_U16 (f_v := f_clone (f_v self));
}.

Record t_U32 : Type := {
  f_v : t_HaxInt_t;
}.

Definition impl_41__BITS : t_U32_t :=
  Build_U32 (f_v := v_BITS_128_).

Definition impl_55__BITS : t_U32_t :=
  Build_U32 (f_v := v_BITS_64_).

Definition impl_69__BITS : t_U32_t :=
  Build_U32 (f_v := v_BITS_32_).

Definition impl_83__BITS : t_U32_t :=
  Build_U32 (f_v := v_BITS_16_).

Definition impl_97__BITS : t_U32_t :=
  Build_U32 (f_v := v_BITS_8_).

Definition impl_111__BITS : t_U32_t :=
  Build_U32 (f_v := v_BITS_128_).

Definition impl_138__BITS : t_U32_t :=
  Build_U32 (f_v := v_BITS_64_).

#[global] Instance t_U32_t_t_Constants : t_Constants t_U32_t := {
  f_ZERO := Build_U32 (f_v := v_HaxInt_ZERO);
  f_ONE := Build_U32 (f_v := v_HaxInt_ONE);
  f_MIN := Build_U32 (f_v := v_HaxInt_ZERO);
  f_MAX := Build_U32 (f_v := v_WORDSIZE_32_SUB_1_);
}.

Definition impl_165__BITS : t_U32_t :=
  Build_U32 (f_v := v_BITS_32_).

#[global] Instance t_U32_t_t_Clone : t_Clone t_U32_t := {
  f_clone (self : t_U32_t) := Build_U32 (f_v := f_clone (f_v self));
}.

Definition impl_192__BITS : t_U32_t :=
  Build_U32 (f_v := v_BITS_16_).

Definition impl_219__BITS : t_U32_t :=
  Build_U32 (f_v := v_BITS_8_).

Record t_U64 : Type := {
  f_v : t_HaxInt_t;
}.

#[global] Instance t_U64_t_t_Constants : t_Constants t_U64_t := {
  f_ZERO := Build_U64 (f_v := v_HaxInt_ZERO);
  f_ONE := Build_U64 (f_v := v_HaxInt_ONE);
  f_MIN := Build_U64 (f_v := v_HaxInt_ZERO);
  f_MAX := Build_U64 (f_v := v_WORDSIZE_64_SUB_1_);
}.

#[global] Instance t_U64_t_t_Clone : t_Clone t_U64_t := {
  f_clone (self : t_U64_t) := Build_U64 (f_v := f_clone (f_v self));
}.

Record t_U8 : Type := {
  f_v : t_HaxInt_t;
}.

#[global] Instance t_U8_t_t_Constants : t_Constants t_U8_t := {
  f_ZERO := Build_U8 (f_v := v_HaxInt_ZERO);
  f_ONE := Build_U8 (f_v := v_HaxInt_ONE);
  f_MIN := Build_U8 (f_v := v_HaxInt_ZERO);
  f_MAX := Build_U8 (f_v := v_WORDSIZE_8_SUB_1_);
}.

#[global] Instance t_U8_t_t_Clone : t_Clone t_U8_t := {
  f_clone (self : t_U8_t) := Build_U8 (f_v := f_clone (f_v self));
}.

(*item error backend*)

#[global] Instance t_U128_t_t_PartialEq : t_PartialEq t_U128_t t_U128_t := {
  f_eq (self : t_U128_t) (rhs : t_U128_t) := (haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))=.?Ordering_Equalt_Ordering_t;
  f_ne (self : t_U128_t) (rhs : t_U128_t) := (haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))<>Ordering_Equalt_Ordering_t;
}.

#[global] Instance t_U128_t_t_PartialOrd : t_PartialOrd t_U128_t t_U128_t := {
  f_partial_cmp (self : t_U128_t) (rhs : t_U128_t) := Option_Some (haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)));
  f_lt (self : t_U128_t) (rhs : t_U128_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  =>
    true
  | _ =>
    false
  end;
  f_le (self : t_U128_t) (rhs : t_U128_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
  f_gt (self : t_U128_t) (rhs : t_U128_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  =>
    true
  | _ =>
    false
  end;
  f_ge (self : t_U128_t) (rhs : t_U128_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
}.

(*item error backend*)

#[global] Instance t_U64_t_t_PartialEq : t_PartialEq t_U64_t t_U64_t := {
  f_eq (self : t_U64_t) (rhs : t_U64_t) := (haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))=.?Ordering_Equalt_Ordering_t;
  f_ne (self : t_U64_t) (rhs : t_U64_t) := (haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))<>Ordering_Equalt_Ordering_t;
}.

#[global] Instance t_U64_t_t_PartialOrd : t_PartialOrd t_U64_t t_U64_t := {
  f_partial_cmp (self : t_U64_t) (rhs : t_U64_t) := Option_Some (haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)));
  f_lt (self : t_U64_t) (rhs : t_U64_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  =>
    true
  | _ =>
    false
  end;
  f_le (self : t_U64_t) (rhs : t_U64_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
  f_gt (self : t_U64_t) (rhs : t_U64_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  =>
    true
  | _ =>
    false
  end;
  f_ge (self : t_U64_t) (rhs : t_U64_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
}.

(*item error backend*)

#[global] Instance t_U32_t_t_PartialEq : t_PartialEq t_U32_t t_U32_t := {
  f_eq (self : t_U32_t) (rhs : t_U32_t) := (haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))=.?Ordering_Equalt_Ordering_t;
  f_ne (self : t_U32_t) (rhs : t_U32_t) := (haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))<>Ordering_Equalt_Ordering_t;
}.

#[global] Instance t_U32_t_t_PartialOrd : t_PartialOrd t_U32_t t_U32_t := {
  f_partial_cmp (self : t_U32_t) (rhs : t_U32_t) := Option_Some (haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)));
  f_lt (self : t_U32_t) (rhs : t_U32_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  =>
    true
  | _ =>
    false
  end;
  f_le (self : t_U32_t) (rhs : t_U32_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
  f_gt (self : t_U32_t) (rhs : t_U32_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  =>
    true
  | _ =>
    false
  end;
  f_ge (self : t_U32_t) (rhs : t_U32_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
}.

(*item error backend*)

#[global] Instance t_U16_t_t_PartialEq : t_PartialEq t_U16_t t_U16_t := {
  f_eq (self : t_U16_t) (rhs : t_U16_t) := (haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))=.?Ordering_Equalt_Ordering_t;
  f_ne (self : t_U16_t) (rhs : t_U16_t) := (haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))<>Ordering_Equalt_Ordering_t;
}.

#[global] Instance t_U16_t_t_PartialOrd : t_PartialOrd t_U16_t t_U16_t := {
  f_partial_cmp (self : t_U16_t) (rhs : t_U16_t) := Option_Some (haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)));
  f_lt (self : t_U16_t) (rhs : t_U16_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  =>
    true
  | _ =>
    false
  end;
  f_le (self : t_U16_t) (rhs : t_U16_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
  f_gt (self : t_U16_t) (rhs : t_U16_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  =>
    true
  | _ =>
    false
  end;
  f_ge (self : t_U16_t) (rhs : t_U16_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
}.

(*item error backend*)

#[global] Instance t_U8_t_t_PartialEq : t_PartialEq t_U8_t t_U8_t := {
  f_eq (self : t_U8_t) (rhs : t_U8_t) := (haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))=.?Ordering_Equalt_Ordering_t;
  f_ne (self : t_U8_t) (rhs : t_U8_t) := (haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))<>Ordering_Equalt_Ordering_t;
}.

#[global] Instance t_U8_t_t_PartialOrd : t_PartialOrd t_U8_t t_U8_t := {
  f_partial_cmp (self : t_U8_t) (rhs : t_U8_t) := Option_Some (haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)));
  f_lt (self : t_U8_t) (rhs : t_U8_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  =>
    true
  | _ =>
    false
  end;
  f_le (self : t_U8_t) (rhs : t_U8_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
  f_gt (self : t_U8_t) (rhs : t_U8_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  =>
    true
  | _ =>
    false
  end;
  f_ge (self : t_U8_t) (rhs : t_U8_t) := match haxint_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
}.

Record t_I128 : Type := {
  f_v : t_Z_t;
}.

#[global] Instance t_I128_t_t_Constants : t_Constants t_I128_t := {
  f_ZERO := Build_I128 (f_v := Z_ZEROt_Z_t);
  f_ONE := Build_I128 (f_v := Z_POS xH);
  f_MIN := Build_I128 (f_v := Z_NEG (Positive v_WORDSIZE_64_));
  f_MAX := Build_I128 (f_v := Z_POS (Positive v_WORDSIZE_64_SUB_1_));
}.

#[global] Instance t_Z_t_t_Concretization : t_Concretization t_Z_t t_I128_t := {
  f_concretize (self : t_Z_t) := Build_I128 (f_v := self);
}.

#[global] Instance t_I128_t_t_Clone : t_Clone t_I128_t := {
  f_clone (self : t_I128_t) := Build_I128 (f_v := f_clone (f_v self));
}.

Record t_I16 : Type := {
  f_v : t_Z_t;
}.

#[global] Instance t_I16_t_t_Constants : t_Constants t_I16_t := {
  f_ZERO := Build_I16 (f_v := Z_ZEROt_Z_t);
  f_ONE := Build_I16 (f_v := Z_POS xH);
  f_MIN := Build_I16 (f_v := Z_NEG (Positive v_WORDSIZE_8_));
  f_MAX := Build_I16 (f_v := Z_POS (Positive v_WORDSIZE_8_SUB_1_));
}.

#[global] Instance t_Z_t_t_Concretization : t_Concretization t_Z_t t_I16_t := {
  f_concretize (self : t_Z_t) := Build_I16 (f_v := self);
}.

#[global] Instance t_I16_t_t_Clone : t_Clone t_I16_t := {
  f_clone (self : t_I16_t) := Build_I16 (f_v := f_clone (f_v self));
}.

Record t_I32 : Type := {
  f_v : t_Z_t;
}.

#[global] Instance t_I32_t_t_Constants : t_Constants t_I32_t := {
  f_ZERO := Build_I32 (f_v := Z_ZEROt_Z_t);
  f_ONE := Build_I32 (f_v := Z_POS xH);
  f_MIN := Build_I32 (f_v := Z_NEG (Positive v_WORDSIZE_16_));
  f_MAX := Build_I32 (f_v := Z_POS (Positive v_WORDSIZE_16_SUB_1_));
}.

#[global] Instance t_Z_t_t_Concretization : t_Concretization t_Z_t t_I32_t := {
  f_concretize (self : t_Z_t) := Build_I32 (f_v := self);
}.

#[global] Instance t_I32_t_t_Clone : t_Clone t_I32_t := {
  f_clone (self : t_I32_t) := Build_I32 (f_v := f_clone (f_v self));
}.

Record t_I64 : Type := {
  f_v : t_Z_t;
}.

#[global] Instance t_I64_t_t_Constants : t_Constants t_I64_t := {
  f_ZERO := Build_I64 (f_v := Z_ZEROt_Z_t);
  f_ONE := Build_I64 (f_v := Z_POS xH);
  f_MIN := Build_I64 (f_v := Z_NEG (Positive v_WORDSIZE_32_));
  f_MAX := Build_I64 (f_v := Z_POS (Positive v_WORDSIZE_32_SUB_1_));
}.

#[global] Instance t_Z_t_t_Concretization : t_Concretization t_Z_t t_I64_t := {
  f_concretize (self : t_Z_t) := Build_I64 (f_v := self);
}.

#[global] Instance t_I64_t_t_Clone : t_Clone t_I64_t := {
  f_clone (self : t_I64_t) := Build_I64 (f_v := f_clone (f_v self));
}.

Record t_I8 : Type := {
  f_v : t_Z_t;
}.

#[global] Instance t_I8_t_t_Constants : t_Constants t_I8_t := {
  f_ZERO := Build_I8 (f_v := Z_ZEROt_Z_t);
  f_ONE := Build_I8 (f_v := Z_POS xH);
  f_MIN := Build_I8 (f_v := Z_NEG (Positive v_WORDSIZE_4_));
  f_MAX := Build_I8 (f_v := Z_POS (Positive v_WORDSIZE_4_SUB_1_));
}.

#[global] Instance t_Z_t_t_Concretization : t_Concretization t_Z_t t_I8_t := {
  f_concretize (self : t_Z_t) := Build_I8 (f_v := self);
}.

#[global] Instance t_I8_t_t_Clone : t_Clone t_I8_t := {
  f_clone (self : t_I8_t) := Build_I8 (f_v := f_clone (f_v self));
}.

(*item error backend*)

#[global] Instance t_I8_t_t_From : t_From t_I8_t t_I128_t := {
  f_from (x : t_I128_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I16_t_t_From : t_From t_I16_t t_I128_t := {
  f_from (x : t_I128_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I32_t_t_From : t_From t_I32_t t_I128_t := {
  f_from (x : t_I128_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I64_t_t_From : t_From t_I64_t t_I128_t := {
  f_from (x : t_I128_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I128_t_t_PartialEq : t_PartialEq t_I128_t t_I128_t := {
  f_eq (self : t_I128_t) (rhs : t_I128_t) := (z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))=.?Ordering_Equalt_Ordering_t;
  f_ne (self : t_I128_t) (rhs : t_I128_t) := (z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))<>Ordering_Equalt_Ordering_t;
}.

#[global] Instance t_I128_t_t_PartialOrd : t_PartialOrd t_I128_t t_I128_t := {
  f_partial_cmp (self : t_I128_t) (rhs : t_I128_t) := Option_Some (z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)));
  f_lt (self : t_I128_t) (rhs : t_I128_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  =>
    true
  | _ =>
    false
  end;
  f_le (self : t_I128_t) (rhs : t_I128_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
  f_gt (self : t_I128_t) (rhs : t_I128_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  =>
    true
  | _ =>
    false
  end;
  f_ge (self : t_I128_t) (rhs : t_I128_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
}.

(*item error backend*)

#[global] Instance t_I8_t_t_From : t_From t_I8_t t_I64_t := {
  f_from (x : t_I64_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I16_t_t_From : t_From t_I16_t t_I64_t := {
  f_from (x : t_I64_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I32_t_t_From : t_From t_I32_t t_I64_t := {
  f_from (x : t_I64_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I128_t_t_From : t_From t_I128_t t_I64_t := {
  f_from (x : t_I64_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I64_t_t_PartialEq : t_PartialEq t_I64_t t_I64_t := {
  f_eq (self : t_I64_t) (rhs : t_I64_t) := (z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))=.?Ordering_Equalt_Ordering_t;
  f_ne (self : t_I64_t) (rhs : t_I64_t) := (z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))<>Ordering_Equalt_Ordering_t;
}.

#[global] Instance t_I64_t_t_PartialOrd : t_PartialOrd t_I64_t t_I64_t := {
  f_partial_cmp (self : t_I64_t) (rhs : t_I64_t) := Option_Some (z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)));
  f_lt (self : t_I64_t) (rhs : t_I64_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  =>
    true
  | _ =>
    false
  end;
  f_le (self : t_I64_t) (rhs : t_I64_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
  f_gt (self : t_I64_t) (rhs : t_I64_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  =>
    true
  | _ =>
    false
  end;
  f_ge (self : t_I64_t) (rhs : t_I64_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
}.

(*item error backend*)

#[global] Instance t_I8_t_t_From : t_From t_I8_t t_I32_t := {
  f_from (x : t_I32_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I16_t_t_From : t_From t_I16_t t_I32_t := {
  f_from (x : t_I32_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I64_t_t_From : t_From t_I64_t t_I32_t := {
  f_from (x : t_I32_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I128_t_t_From : t_From t_I128_t t_I32_t := {
  f_from (x : t_I32_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I32_t_t_PartialEq : t_PartialEq t_I32_t t_I32_t := {
  f_eq (self : t_I32_t) (rhs : t_I32_t) := (z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))=.?Ordering_Equalt_Ordering_t;
  f_ne (self : t_I32_t) (rhs : t_I32_t) := (z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))<>Ordering_Equalt_Ordering_t;
}.

#[global] Instance t_I32_t_t_PartialOrd : t_PartialOrd t_I32_t t_I32_t := {
  f_partial_cmp (self : t_I32_t) (rhs : t_I32_t) := Option_Some (z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)));
  f_lt (self : t_I32_t) (rhs : t_I32_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  =>
    true
  | _ =>
    false
  end;
  f_le (self : t_I32_t) (rhs : t_I32_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
  f_gt (self : t_I32_t) (rhs : t_I32_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  =>
    true
  | _ =>
    false
  end;
  f_ge (self : t_I32_t) (rhs : t_I32_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
}.

(*item error backend*)

#[global] Instance t_I8_t_t_From : t_From t_I8_t t_I16_t := {
  f_from (x : t_I16_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I32_t_t_From : t_From t_I32_t t_I16_t := {
  f_from (x : t_I16_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I64_t_t_From : t_From t_I64_t t_I16_t := {
  f_from (x : t_I16_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I128_t_t_From : t_From t_I128_t t_I16_t := {
  f_from (x : t_I16_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I16_t_t_PartialEq : t_PartialEq t_I16_t t_I16_t := {
  f_eq (self : t_I16_t) (rhs : t_I16_t) := (z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))=.?Ordering_Equalt_Ordering_t;
  f_ne (self : t_I16_t) (rhs : t_I16_t) := (z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))<>Ordering_Equalt_Ordering_t;
}.

#[global] Instance t_I16_t_t_PartialOrd : t_PartialOrd t_I16_t t_I16_t := {
  f_partial_cmp (self : t_I16_t) (rhs : t_I16_t) := Option_Some (z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)));
  f_lt (self : t_I16_t) (rhs : t_I16_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  =>
    true
  | _ =>
    false
  end;
  f_le (self : t_I16_t) (rhs : t_I16_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
  f_gt (self : t_I16_t) (rhs : t_I16_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  =>
    true
  | _ =>
    false
  end;
  f_ge (self : t_I16_t) (rhs : t_I16_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
}.

(*item error backend*)

#[global] Instance t_I16_t_t_From : t_From t_I16_t t_I8_t := {
  f_from (x : t_I8_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I32_t_t_From : t_From t_I32_t t_I8_t := {
  f_from (x : t_I8_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I64_t_t_From : t_From t_I64_t t_I8_t := {
  f_from (x : t_I8_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I128_t_t_From : t_From t_I128_t t_I8_t := {
  f_from (x : t_I8_t) := f_concretize (f_lift x);
}.

#[global] Instance t_I8_t_t_PartialEq : t_PartialEq t_I8_t t_I8_t := {
  f_eq (self : t_I8_t) (rhs : t_I8_t) := (z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))=.?Ordering_Equalt_Ordering_t;
  f_ne (self : t_I8_t) (rhs : t_I8_t) := (z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)))<>Ordering_Equalt_Ordering_t;
}.

#[global] Instance t_I8_t_t_PartialOrd : t_PartialOrd t_I8_t t_I8_t := {
  f_partial_cmp (self : t_I8_t) (rhs : t_I8_t) := Option_Some (z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)));
  f_lt (self : t_I8_t) (rhs : t_I8_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  =>
    true
  | _ =>
    false
  end;
  f_le (self : t_I8_t) (rhs : t_I8_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Less  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
  f_gt (self : t_I8_t) (rhs : t_I8_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  =>
    true
  | _ =>
    false
  end;
  f_ge (self : t_I8_t) (rhs : t_I8_t) := match z_cmp (f_lift (f_clone self)) (f_lift (f_clone rhs)) with
  | Ordering_Greater  | Ordering_Equal  =>
    true
  | _ =>
    false
  end;
}.

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

#[global] Instance t_HaxInt_t_t_Concretization : t_Concretization t_HaxInt_t t_U128_t := {
  f_concretize (self : t_HaxInt_t) := Build_U128 (f_v := haxint_rem self v_WORDSIZE_128_);
}.

#[global] Instance t_U128_t_t_From : t_From t_U128_t t_U8_t := {
  f_from (x : t_U8_t) := f_concretize (f_lift x);
}.

#[global] Instance t_U128_t_t_From : t_From t_U128_t t_U16_t := {
  f_from (x : t_U16_t) := f_concretize (f_lift x);
}.

#[global] Instance t_U128_t_t_From : t_From t_U128_t t_U32_t := {
  f_from (x : t_U32_t) := f_concretize (f_lift x);
}.

#[global] Instance t_U128_t_t_From : t_From t_U128_t t_U64_t := {
  f_from (x : t_U64_t) := f_concretize (f_lift x);
}.

#[global] Instance t_HaxInt_t_t_Concretization : t_Concretization t_HaxInt_t t_U64_t := {
  f_concretize (self : t_HaxInt_t) := Build_U64 (f_v := haxint_rem self v_WORDSIZE_64_);
}.

#[global] Instance t_U64_t_t_From : t_From t_U64_t t_U8_t := {
  f_from (x : t_U8_t) := f_concretize (f_lift x);
}.

#[global] Instance t_U64_t_t_From : t_From t_U64_t t_U16_t := {
  f_from (x : t_U16_t) := f_concretize (f_lift x);
}.

#[global] Instance t_U64_t_t_From : t_From t_U64_t t_U32_t := {
  f_from (x : t_U32_t) := f_concretize (f_lift x);
}.

#[global] Instance t_U64_t_t_From : t_From t_U64_t t_U128_t := {
  f_from (x : t_U128_t) := f_concretize (f_lift x);
}.

#[global] Instance t_HaxInt_t_t_Concretization : t_Concretization t_HaxInt_t t_U32_t := {
  f_concretize (self : t_HaxInt_t) := Build_U32 (f_v := haxint_rem self v_WORDSIZE_32_);
}.

#[global] Instance t_U32_t_t_From : t_From t_U32_t t_U8_t := {
  f_from (x : t_U8_t) := f_concretize (f_lift x);
}.

#[global] Instance t_U32_t_t_From : t_From t_U32_t t_U16_t := {
  f_from (x : t_U16_t) := f_concretize (f_lift x);
}.

#[global] Instance t_U32_t_t_From : t_From t_U32_t t_U64_t := {
  f_from (x : t_U64_t) := f_concretize (f_lift x);
}.

#[global] Instance t_U32_t_t_From : t_From t_U32_t t_U128_t := {
  f_from (x : t_U128_t) := f_concretize (f_lift x);
}.

#[global] Instance t_HaxInt_t_t_Concretization : t_Concretization t_HaxInt_t t_U16_t := {
  f_concretize (self : t_HaxInt_t) := Build_U16 (f_v := haxint_rem self v_WORDSIZE_16_);
}.

#[global] Instance t_U16_t_t_From : t_From t_U16_t t_U8_t := {
  f_from (x : t_U8_t) := f_concretize (f_lift x);
}.

#[global] Instance t_U16_t_t_From : t_From t_U16_t t_U32_t := {
  f_from (x : t_U32_t) := f_concretize (f_lift x);
}.

#[global] Instance t_U16_t_t_From : t_From t_U16_t t_U64_t := {
  f_from (x : t_U64_t) := f_concretize (f_lift x);
}.

#[global] Instance t_U16_t_t_From : t_From t_U16_t t_U128_t := {
  f_from (x : t_U128_t) := f_concretize (f_lift x);
}.

#[global] Instance t_HaxInt_t_t_Concretization : t_Concretization t_HaxInt_t t_U8_t := {
  f_concretize (self : t_HaxInt_t) := Build_U8 (f_v := haxint_rem self v_WORDSIZE_8_);
}.

#[global] Instance t_U8_t_t_From : t_From t_U8_t t_U16_t := {
  f_from (x : t_U16_t) := f_concretize (f_lift x);
}.

#[global] Instance t_U8_t_t_From : t_From t_U8_t t_U32_t := {
  f_from (x : t_U32_t) := f_concretize (f_lift x);
}.

#[global] Instance t_U8_t_t_From : t_From t_U8_t t_U64_t := {
  f_from (x : t_U64_t) := f_concretize (f_lift x);
}.

#[global] Instance t_U8_t_t_From : t_From t_U8_t t_U128_t := {
  f_from (x : t_U128_t) := f_concretize (f_lift x);
}.

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)

(*item error backend*)
