(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* From Core Require Import Core. *)

(* TODO: Replace this dummy lib with core lib *)
Class t_Sized (T : Type) := { }.
Definition t_u8 := Z.
Definition t_u16 := Z.
Definition t_u32 := Z.
Definition t_u64 := Z.
Definition t_u128 := Z.
Definition t_usize := Z.
Definition t_i8 := Z.
Definition t_i16 := Z.
Definition t_i32 := Z.
Definition t_i64 := Z.
Definition t_i128 := Z.
Definition t_isize := Z.
Definition t_Array T (x : t_usize) := list T.
Definition t_String := string.
Definition ToString_f_to_string (x : string) := x.
Instance Sized_any : forall {t_A}, t_Sized t_A := {}.
Class t_Clone (T : Type) := { Clone_f_clone : T -> T }.
Instance Clone_any : forall {t_A}, t_Clone t_A := {Clone_f_clone := fun x => x}.
Definition t_Slice (T : Type) := list T.
Definition unsize {T : Type} : list T -> t_Slice T := id.
Definition t_PartialEq_f_eq x y := x =? y.
Definition t_Rem_f_rem (x y : Z) := x mod y.
Definition assert (b : bool) (* `{H_assert : b = true} *) : unit := tt.
Inductive globality := | t_Global.
Definition t_Vec T (_ : globality) : Type := list T.
Definition impl_1__append {T} l1 l2 : list T * list T := (app l1 l2, l2).
Definition impl_1__len {A} (l : list A) := Z.of_nat (List.length l).
Definition impl__new {A} (_ : Datatypes.unit) : list A := nil.
Definition impl__with_capacity {A} (_ : Z)  : list A := nil.
Definition impl_1__push {A} l (x : A) := cons x l.
Class t_From (A B : Type) := { From_f_from : B -> A }.
Definition impl__to_vec {T} (x : t_Slice T) : t_Vec T t_Global := x.
Class t_Into (A B : Type) := { Into_f_into : A -> B }.
Instance t_Into_from_t_From {A B : Type} `{H : t_From B A} : t_Into A B := { Into_f_into x := @From_f_from B A H x }.
Definition from_elem {A} (x : A) (l : Z) := repeat x (Z.to_nat l).
Definition t_Option := option.
Definition impl__map {A B} (x : t_Option A) (f : A -> B) : t_Option B := match x with | Some x => Some (f x) | None => None end.
Definition t_Add_f_add x y := x + y.
Class Cast A B := { cast : A -> B }.
Instance cast_t_u8_t_u32 : Cast t_u8 t_u32 := {| cast x := x |}.
(* / dummy lib *)



From Core Require Import Core_Option (t_Option).
Export Core_Option (t_Option).

Definition discriminant_Ordering_Equal : t_i8 :=
  0.

Definition discriminant_Ordering_Greater : t_i8 :=
  1.

Inductive t_Ordering : Type :=
| Ordering_Less
| Ordering_Equal
| Ordering_Greater.
Arguments Ordering_Less.
Arguments Ordering_Equal.
Arguments Ordering_Greater.

Definition impl__Ordering__is_eq (self : t_Ordering) : bool :=
  match self with
  | Ordering_Equal =>
    true
  | _ =>
    false
  end.

Definition impl__Ordering__is_gt (self : t_Ordering) : bool :=
  match self with
  | Ordering_Greater =>
    true
  | _ =>
    false
  end.

Definition impl__Ordering__is_lt (self : t_Ordering) : bool :=
  match self with
  | Ordering_Less =>
    true
  | _ =>
    false
  end.

Definition impl__Ordering__reverse (self : t_Ordering) : t_Ordering :=
  match self with
  | Ordering_Less =>
    Ordering_Greater
  | Ordering_Equal =>
    Ordering_Equal
  | Ordering_Greater =>
    Ordering_Less
  end.

Definition discriminant_Ordering_Less : t_i8 :=
  -1.

Definition t_Ordering_cast_to_repr (x : t_Ordering) : t_i8 :=
  match x with
  | Ordering_Less =>
    discriminant_Ordering_Less
  | Ordering_Equal =>
    discriminant_Ordering_Equal
  | Ordering_Greater =>
    discriminant_Ordering_Greater
  end.

Class t_PartialEq (v_Self : Type) (v_Rhs : Type) : Type :=
  {
    PartialEq_f_eq : v_Self -> v_Rhs -> bool;
    PartialEq_f_ne : v_Self -> v_Rhs -> bool;
  }.
Arguments t_PartialEq (_) (_).

Definition impl__Ordering__is_ge (self : t_Ordering) : bool :=
  negb (match self with
  | Ordering_Less =>
    true
  | _ =>
    false
  end).

Definition impl__Ordering__is_le (self : t_Ordering) : bool :=
  negb (match self with
  | Ordering_Greater =>
    true
  | _ =>
    false
  end).

Definition impl__Ordering__is_ne (self : t_Ordering) : bool :=
  negb (match self with
  | Ordering_Equal =>
    true
  | _ =>
    false
  end).

Instance t_PartialEq_603824491 : t_PartialEq ((t_Ordering)) ((t_Ordering)) :=
  {
    PartialEq_impl_1_f_eq := fun  (self : t_Ordering) (other : t_Ordering)=>
      match self with
      | Ordering_Less =>
        match other with
        | Ordering_Less =>
          true
        | _ =>
          false
        end
      | Ordering_Equal =>
        match other with
        | Ordering_Equal =>
          true
        | _ =>
          false
        end
      | Ordering_Greater =>
        match other with
        | Ordering_Greater =>
          true
        | _ =>
          false
        end
      end;
    PartialEq_impl_1_f_ne := fun  (self : t_Ordering) (other : t_Ordering)=>
      negb (match self with
      | Ordering_Less =>
        match other with
        | Ordering_Less =>
          true
        | _ =>
          false
        end
      | Ordering_Equal =>
        match other with
        | Ordering_Equal =>
          true
        | _ =>
          false
        end
      | Ordering_Greater =>
        match other with
        | Ordering_Greater =>
          true
        | _ =>
          false
        end
      end);
  }.

Class t_PartialOrd (v_Self : Type) (v_Rhs : Type) `{t_PartialEq (v_Self) (v_Rhs)} : Type :=
  {
    PartialOrd_f_partial_cmp : v_Self -> v_Rhs -> t_Option ((t_Ordering));
    PartialOrd_f_lt : v_Self -> v_Rhs -> bool;
    PartialOrd_f_le : v_Self -> v_Rhs -> bool;
    PartialOrd_f_gt : v_Self -> v_Rhs -> bool;
    PartialOrd_f_ge : v_Self -> v_Rhs -> bool;
  }.
Arguments t_PartialOrd (_) (_) {_}.
