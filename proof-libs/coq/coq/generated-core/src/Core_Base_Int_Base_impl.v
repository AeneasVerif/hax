(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import String.

From Core Require Import Core_Base_Int.
Export Core_Base_Int.


From Core Require Import Core_Cmp.
Export Core_Cmp.

From Core Require Import Core_Clone.
Export Core_Clone.

From Core Require Import Core_Option.
Export Core_Option.

From Core Require Import Core_Base_Int_Base_spec.
Export Core_Base_Int_Base_spec.

Definition impl_7__sub__double_mask (lhs : t_HaxInt) : t_HaxInt :=
  match impl_9__match_pos (lhs) with
  |  t_POS_POS_ZERO =>
    impl_9__ZERO
  |  t_POS_POS_POS (p) =>
    impl_4__to_int (impl_8__xO (p))
  end.

Definition impl_7__sub__succ_double_mask (lhs : t_HaxInt) : t_HaxInt :=
  match impl_9__match_pos (lhs) with
  |  t_POS_POS_ZERO =>
    impl_4__to_int (impl_8__xH)
  |  t_POS_POS_POS (p) =>
    impl_4__to_int (impl_8__xI (p))
  end.

Definition impl_8__double (self : t_HaxInt) : t_HaxInt :=
  match impl_9__match_pos (self) with
  |  t_POS_POS_ZERO =>
    impl_9__ZERO
  |  t_POS_POS_POS (p) =>
    impl_4__to_int (impl_8__xO (p))
  end.

Definition impl_8__half (self : t_HaxInt) : t_HaxInt :=
  match impl_9__match_pos (self) with
  |  t_POS_POS_ZERO =>
    impl_9__ZERO
  |  t_POS_POS_POS (n) =>
    match impl_8__match_positive (n) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_9__ZERO
    |  t_POSITIVE_POSITIVE_XO (p) =>
      impl_4__to_int (p)
    |  t_POSITIVE_POSITIVE_XI (p) =>
      impl_4__to_int (p)
    end
  end.

Definition impl_8__succ_double (self : t_HaxInt) : t_Positive :=
  match impl_9__match_pos (self) with
  |  t_POS_POS_ZERO =>
    impl_8__xH
  |  t_POS_POS_POS (p) =>
    impl_8__xI (p)
  end.

Fixpoint impl__cmp__cmp_binary_cont (x : t_Positive) (y : t_Positive) (r : t_Ordering) : t_Ordering :=
  match impl_8__match_positive (x) with
  |  t_POSITIVE_POSITIVE_XH =>
    match impl_8__match_positive (y) with
    |  t_POSITIVE_POSITIVE_XH =>
      r
    |  t_POSITIVE_POSITIVE_XO (q)
    | t_POSITIVE_POSITIVE_XI (q) =>
      t_Ordering_Ordering_Less
    end
  |  t_POSITIVE_POSITIVE_XO (p) =>
    match impl_8__match_positive (y) with
    |  t_POSITIVE_POSITIVE_XH =>
      t_Ordering_Ordering_Greater
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl__cmp__cmp_binary_cont (p) (q) (r)
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl__cmp__cmp_binary_cont (p) (q) (t_Ordering_Ordering_Less)
    end
  |  t_POSITIVE_POSITIVE_XI (p) =>
    match impl_8__match_positive (y) with
    |  t_POSITIVE_POSITIVE_XH =>
      t_Ordering_Ordering_Greater
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl__cmp__cmp_binary_cont (p) (q) (t_Ordering_Ordering_Greater)
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl__cmp__cmp_binary_cont (p) (q) (r)
    end
  end.

Definition impl__cmp (lhs : t_Positive) (rhs : t_Positive) : t_Ordering :=
  impl__cmp__cmp_binary_cont (lhs) (rhs) (t_Ordering_Ordering_Equal).

Instance t_PartialEq_427583131 : t_PartialEq (t_Positive) (t_Positive) :=
  {
    t_PartialEq_f_eq := fun (self : t_Positive) (other : t_Positive) =>
      t_PartialEq_f_eq (impl__cmp (t_Clone_f_clone (self)) (t_Clone_f_clone (other))) (t_Ordering_Ordering_Equal);
    t_PartialEq_f_ne := fun (self : t_Positive) (other : t_Positive) =>
      negb (t_PartialEq_f_eq (impl__cmp (t_Clone_f_clone (self)) (t_Clone_f_clone (other))) (t_Ordering_Ordering_Equal));
  }.

Definition impl_2__cmp (lhs : t_HaxInt) (rhs : t_HaxInt) : t_Ordering :=
  match impl_9__match_pos (lhs) with
  |  t_POS_POS_ZERO =>
    match impl_9__match_pos (rhs) with
    |  t_POS_POS_ZERO =>
      t_Ordering_Ordering_Equal
    |  t_POS_POS_POS (q) =>
      t_Ordering_Ordering_Less
    end
  |  t_POS_POS_POS (p) =>
    match impl_9__match_pos (rhs) with
    |  t_POS_POS_ZERO =>
      t_Ordering_Ordering_Greater
    |  t_POS_POS_POS (q) =>
      impl__cmp (p) (q)
    end
  end.

Instance t_PartialEq_822848086 : t_PartialEq (t_HaxInt) (t_HaxInt) :=
  {
    t_PartialEq_f_eq := fun (self : t_HaxInt) (other : t_HaxInt) =>
      t_PartialEq_f_eq (impl_2__cmp (t_Clone_f_clone (self)) (t_Clone_f_clone (other))) (t_Ordering_Ordering_Equal);
    t_PartialEq_f_ne := fun (self : t_HaxInt) (other : t_HaxInt) =>
      negb (t_PartialEq_f_eq (impl_2__cmp (t_Clone_f_clone (self)) (t_Clone_f_clone (other))) (t_Ordering_Ordering_Equal));
  }.

Fixpoint impl_4__succ (self : t_Positive) : t_Positive :=
  match impl_8__match_positive (self) with
  |  t_POSITIVE_POSITIVE_XH =>
    impl_8__xO (impl_8__xH)
  |  t_POSITIVE_POSITIVE_XO (q) =>
    impl_8__xI (q)
  |  t_POSITIVE_POSITIVE_XI (q) =>
    impl_8__xO (impl_4__succ (q))
  end.

Fixpoint impl_7__sub__pred_double (lhs : t_Positive) : t_Positive :=
  match impl_8__match_positive (lhs) with
  |  t_POSITIVE_POSITIVE_XH =>
    impl_8__xH
  |  t_POSITIVE_POSITIVE_XO (p) =>
    impl_8__xI (impl_7__sub__pred_double (p))
  |  t_POSITIVE_POSITIVE_XI (p) =>
    impl_8__xI (impl_8__xO (p))
  end.

Definition impl_7__sub__double_pred_mask (lhs : t_Positive) : t_HaxInt :=
  match impl_8__match_positive (lhs) with
  |  t_POSITIVE_POSITIVE_XH =>
    impl_9__ZERO
  |  t_POSITIVE_POSITIVE_XO (p) =>
    impl_4__to_int (impl_8__xO (impl_7__sub__pred_double (p)))
  |  t_POSITIVE_POSITIVE_XI (p) =>
    impl_4__to_int (impl_8__xO (impl_8__xO (p)))
  end.

Fixpoint impl_9__power_of_two (self : t_Unary) : t_Positive :=
  match impl_6__match_unary (self) with
  |  t_UNARY_UNARY_ZERO =>
    impl_8__xH
  |  t_UNARY_UNARY_SUCC (x) =>
    impl_8__xO (impl_9__power_of_two (x))
  end.

Fixpoint impl_12__shl__shl_helper (rhs : t_Unary) (lhs : t_HaxInt) : t_HaxInt :=
  if
    impl_9__is_zero (t_Clone_f_clone (lhs))
  then
    lhs
  else
    match impl_6__match_unary (rhs) with
    |  t_UNARY_UNARY_ZERO =>
      lhs
    |  t_UNARY_UNARY_SUCC (n) =>
      impl_12__shl__shl_helper (n) (impl_8__double (lhs))
    end.

Definition impl_12__shl (self : t_HaxInt) (rhs : t_HaxInt) : t_HaxInt :=
  impl_12__shl__shl_helper (impl_5__from_int (rhs)) (self).

Fixpoint impl_13__shr__shr_helper (rhs : t_Unary) (lhs : t_HaxInt) : t_HaxInt :=
  if
    impl_9__is_zero (t_Clone_f_clone (lhs))
  then
    lhs
  else
    match impl_6__match_unary (rhs) with
    |  t_UNARY_UNARY_ZERO =>
      lhs
    |  t_UNARY_UNARY_SUCC (n) =>
      impl_13__shr__shr_helper (n) (impl_8__half (lhs))
    end.

Definition impl_13__shr (self : t_HaxInt) (rhs : t_HaxInt) : t_HaxInt :=
  impl_13__shr__shr_helper (impl_5__from_int (rhs)) (self).

Fixpoint impl_14__bitxor__bitxor_binary (lhs : t_Positive) (rhs : t_Positive) : t_HaxInt :=
  match impl_8__match_positive (lhs) with
  |  t_POSITIVE_POSITIVE_XH =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_9__ZERO
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl_4__to_int (impl_8__xI (q))
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl_4__to_int (impl_8__xO (q))
    end
  |  t_POSITIVE_POSITIVE_XO (p) =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_4__to_int (impl_8__xI (p))
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl_8__double (impl_14__bitxor__bitxor_binary (p) (q))
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl_4__to_int (impl_8__succ_double (impl_14__bitxor__bitxor_binary (p) (q)))
    end
  |  t_POSITIVE_POSITIVE_XI (p) =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_4__to_int (impl_8__xO (p))
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl_4__to_int (impl_8__succ_double (impl_14__bitxor__bitxor_binary (p) (q)))
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl_8__double (impl_14__bitxor__bitxor_binary (p) (q))
    end
  end.

Definition impl_14__bitxor (self : t_HaxInt) (rhs : t_HaxInt) : t_HaxInt :=
  match impl_9__match_pos (self) with
  |  t_POS_POS_ZERO =>
    rhs
  |  t_POS_POS_POS (p) =>
    match impl_9__match_pos (rhs) with
    |  t_POS_POS_ZERO =>
      impl_4__to_int (p)
    |  t_POS_POS_POS (q) =>
      impl_14__bitxor__bitxor_binary (p) (q)
    end
  end.

Fixpoint impl_15__bitand__bitand_binary (lhs : t_Positive) (rhs : t_Positive) : t_HaxInt :=
  match impl_8__match_positive (lhs) with
  |  t_POSITIVE_POSITIVE_XH =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl_9__ZERO
    |  t_POSITIVE_POSITIVE_XI (_)
    | t_POSITIVE_POSITIVE_XH =>
      impl_9__ONE
    end
  |  t_POSITIVE_POSITIVE_XO (p) =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_9__ZERO
    |  t_POSITIVE_POSITIVE_XO (q)
    | t_POSITIVE_POSITIVE_XI (q) =>
      impl_8__double (impl_15__bitand__bitand_binary (p) (q))
    end
  |  t_POSITIVE_POSITIVE_XI (p) =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_9__ONE
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl_8__double (impl_15__bitand__bitand_binary (p) (q))
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl_4__to_int (impl_8__succ_double (impl_15__bitand__bitand_binary (p) (q)))
    end
  end.

Definition impl_15__bitand (self : t_HaxInt) (rhs : t_HaxInt) : t_HaxInt :=
  match impl_9__match_pos (self) with
  |  t_POS_POS_ZERO =>
    impl_9__ZERO
  |  t_POS_POS_POS (p) =>
    match impl_9__match_pos (rhs) with
    |  t_POS_POS_ZERO =>
      impl_9__ZERO
    |  t_POS_POS_POS (q) =>
      impl_15__bitand__bitand_binary (p) (q)
    end
  end.

Fixpoint impl_16__bitor__bitor_binary (lhs : t_Positive) (rhs : t_Positive) : t_Positive :=
  match impl_8__match_positive (lhs) with
  |  t_POSITIVE_POSITIVE_XH =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl_8__xI (q)
    |  t_POSITIVE_POSITIVE_XH =>
      impl_8__xH
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl_8__xI (q)
    end
  |  t_POSITIVE_POSITIVE_XO (p) =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_8__xI (p)
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl_8__xO (impl_16__bitor__bitor_binary (p) (q))
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl_8__xI (impl_16__bitor__bitor_binary (p) (q))
    end
  |  t_POSITIVE_POSITIVE_XI (p) =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_8__xI (p)
    |  t_POSITIVE_POSITIVE_XO (q)
    | t_POSITIVE_POSITIVE_XI (q) =>
      impl_8__xI (impl_16__bitor__bitor_binary (p) (q))
    end
  end.

Definition impl_16__bitor (self : t_HaxInt) (rhs : t_HaxInt) : t_HaxInt :=
  match impl_9__match_pos (self) with
  |  t_POS_POS_ZERO =>
    rhs
  |  t_POS_POS_POS (p) =>
    match impl_9__match_pos (rhs) with
    |  t_POS_POS_ZERO =>
      impl_4__to_int (p)
    |  t_POS_POS_POS (q) =>
      impl_4__to_int (impl_16__bitor__bitor_binary (p) (q))
    end
  end.

Instance t_PartialOrd_895391065 : t_PartialOrd (t_Positive) (t_Positive) :=
  {
    t_PartialOrd_f_partial_cmp := fun (self : t_Positive) (other : t_Positive) =>
      t_Option_Option_Some (impl__cmp (t_Clone_f_clone (self)) (t_Clone_f_clone (other)));
    t_PartialOrd_f_lt := fun (self : t_Positive) (other : t_Positive) =>
      match t_Option_Option_Some (impl__cmp (t_Clone_f_clone (self)) (t_Clone_f_clone (other))) with
      |  t_Option_Option_Some (t_Ordering_Ordering_Less) =>
        true
      |  _ =>
        false
      end;
    t_PartialOrd_f_le := fun (self : t_Positive) (other : t_Positive) =>
      match t_Option_Option_Some (impl__cmp (t_Clone_f_clone (self)) (t_Clone_f_clone (other))) with
      |  t_Option_Option_Some (t_Ordering_Ordering_Less
      | t_Ordering_Ordering_Equal) =>
        true
      |  _ =>
        false
      end;
    t_PartialOrd_f_gt := fun (self : t_Positive) (other : t_Positive) =>
      match t_Option_Option_Some (impl__cmp (t_Clone_f_clone (self)) (t_Clone_f_clone (other))) with
      |  t_Option_Option_Some (t_Ordering_Ordering_Greater) =>
        true
      |  _ =>
        false
      end;
    t_PartialOrd_f_ge := fun (self : t_Positive) (other : t_Positive) =>
      match t_Option_Option_Some (impl__cmp (t_Clone_f_clone (self)) (t_Clone_f_clone (other))) with
      |  t_Option_Option_Some (t_Ordering_Ordering_Greater
      | t_Ordering_Ordering_Equal) =>
        true
      |  _ =>
        false
      end;
  }.

Instance t_PartialOrd_414924529 : t_PartialOrd (t_HaxInt) (t_HaxInt) :=
  {
    t_PartialOrd_f_partial_cmp := fun (self : t_HaxInt) (other : t_HaxInt) =>
      t_Option_Option_Some (impl_2__cmp (t_Clone_f_clone (self)) (t_Clone_f_clone (other)));
    t_PartialOrd_f_lt := fun (self : t_HaxInt) (other : t_HaxInt) =>
      match t_Option_Option_Some (impl_2__cmp (t_Clone_f_clone (self)) (t_Clone_f_clone (other))) with
      |  t_Option_Option_Some (t_Ordering_Ordering_Less) =>
        true
      |  _ =>
        false
      end;
    t_PartialOrd_f_le := fun (self : t_HaxInt) (other : t_HaxInt) =>
      match t_Option_Option_Some (impl_2__cmp (t_Clone_f_clone (self)) (t_Clone_f_clone (other))) with
      |  t_Option_Option_Some (t_Ordering_Ordering_Less
      | t_Ordering_Ordering_Equal) =>
        true
      |  _ =>
        false
      end;
    t_PartialOrd_f_gt := fun (self : t_HaxInt) (other : t_HaxInt) =>
      match t_Option_Option_Some (impl_2__cmp (t_Clone_f_clone (self)) (t_Clone_f_clone (other))) with
      |  t_Option_Option_Some (t_Ordering_Ordering_Greater) =>
        true
      |  _ =>
        false
      end;
    t_PartialOrd_f_ge := fun (self : t_HaxInt) (other : t_HaxInt) =>
      match t_Option_Option_Some (impl_2__cmp (t_Clone_f_clone (self)) (t_Clone_f_clone (other))) with
      |  t_Option_Option_Some (t_Ordering_Ordering_Greater
      | t_Ordering_Ordering_Equal) =>
        true
      |  _ =>
        false
      end;
  }.

Fixpoint impl_4__add (self : t_Positive) (rhs : t_Positive) : t_Positive :=
  match impl_8__match_positive (self) with
  |  t_POSITIVE_POSITIVE_XH =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_8__xO (impl_8__xH)
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl_8__xI (q)
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl_8__xO (impl_4__succ (q))
    end
  |  t_POSITIVE_POSITIVE_XO (p) =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_8__xI (p)
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl_8__xO (impl_4__add (p) (q))
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl_8__xI (impl_4__add (p) (q))
    end
  |  t_POSITIVE_POSITIVE_XI (p) =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_8__xO (impl_4__succ (p))
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl_8__xI (impl_4__add (p) (q))
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl_8__xO (impl_4__add__add_carry (p) (q))
    end
  end

with impl_4__add__add_carry (lhs : t_Positive) (rhs : t_Positive) : t_Positive :=
  match impl_8__match_positive (lhs) with
  |  t_POSITIVE_POSITIVE_XH =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_8__xI (impl_8__xH)
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl_8__xO (impl_4__succ (q))
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl_8__xI (impl_4__succ (q))
    end
  |  t_POSITIVE_POSITIVE_XO (p) =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_8__xO (impl_4__succ (p))
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl_8__xI (impl_4__add (p) (q))
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl_8__xO (impl_4__add__add_carry (p) (q))
    end
  |  t_POSITIVE_POSITIVE_XI (p) =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_8__xI (impl_4__succ (p))
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl_8__xO (impl_4__add__add_carry (p) (q))
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl_8__xI (impl_4__add__add_carry (p) (q))
    end
  end.

Definition impl_6__add (self : t_HaxInt) (rhs : t_HaxInt) : t_HaxInt :=
  match impl_9__match_pos (self) with
  |  t_POS_POS_ZERO =>
    rhs
  |  t_POS_POS_POS (p) =>
    match impl_9__match_pos (rhs) with
    |  t_POS_POS_ZERO =>
      impl_4__to_int (p)
    |  t_POS_POS_POS (q) =>
      impl_4__to_int (impl_4__add (p) (q))
    end
  end.

Fixpoint impl_7__sub__sub_binary (lhs : t_Positive) (rhs : t_Positive) : t_HaxInt :=
  match impl_8__match_positive (lhs) with
  |  t_POSITIVE_POSITIVE_XH =>
    impl_9__ZERO
  |  t_POSITIVE_POSITIVE_XO (p) =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_4__to_int (impl_7__sub__pred_double (p))
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl_7__sub__double_mask (impl_7__sub__sub_binary (p) (q))
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl_7__sub__succ_double_mask (impl_7__sub__sub_carry (p) (q))
    end
  |  t_POSITIVE_POSITIVE_XI (p) =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_4__to_int (impl_8__xO (p))
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl_7__sub__succ_double_mask (impl_7__sub__sub_binary (p) (q))
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl_7__sub__double_mask (impl_7__sub__sub_binary (p) (q))
    end
  end

with impl_7__sub__sub_carry (lhs : t_Positive) (rhs : t_Positive) : t_HaxInt :=
  match impl_8__match_positive (lhs) with
  |  t_POSITIVE_POSITIVE_XH =>
    impl_9__ZERO
  |  t_POSITIVE_POSITIVE_XO (p) =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_7__sub__double_pred_mask (p)
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl_7__sub__succ_double_mask (impl_7__sub__sub_carry (p) (q))
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl_7__sub__double_mask (impl_7__sub__sub_carry (p) (q))
    end
  |  t_POSITIVE_POSITIVE_XI (p) =>
    match impl_8__match_positive (rhs) with
    |  t_POSITIVE_POSITIVE_XH =>
      impl_4__to_int (impl_7__sub__pred_double (p))
    |  t_POSITIVE_POSITIVE_XO (q) =>
      impl_7__sub__double_mask (impl_7__sub__sub_binary (p) (q))
    |  t_POSITIVE_POSITIVE_XI (q) =>
      impl_7__sub__succ_double_mask (impl_7__sub__sub_carry (p) (q))
    end
  end.

Definition impl_7__sub (self : t_HaxInt) (rhs : t_HaxInt) : t_HaxInt :=
  match impl_9__match_pos (self) with
  |  t_POS_POS_ZERO =>
    impl_9__ZERO
  |  t_POS_POS_POS (p) =>
    match impl_9__match_pos (rhs) with
    |  t_POS_POS_ZERO =>
      impl_4__to_int (p)
    |  t_POS_POS_POS (q) =>
      impl_7__sub__sub_binary (p) (q)
    end
  end.

Fixpoint impl_5__mul (self : t_Positive) (rhs : t_Positive) : t_Positive :=
  match impl_8__match_positive (self) with
  |  t_POSITIVE_POSITIVE_XH =>
    rhs
  |  t_POSITIVE_POSITIVE_XO (p) =>
    impl_8__xO (impl_5__mul (p) (rhs))
  |  t_POSITIVE_POSITIVE_XI (p) =>
    impl_4__add (t_Clone_f_clone (rhs)) (impl_8__xO (impl_5__mul (p) (rhs)))
  end.

Definition impl_11__mul (self : t_HaxInt) (rhs : t_HaxInt) : t_HaxInt :=
  match impl_9__match_pos (self) with
  |  t_POS_POS_ZERO =>
    impl_9__ZERO
  |  t_POS_POS_POS (p) =>
    match impl_9__match_pos (rhs) with
    |  t_POS_POS_ZERO =>
      impl_9__ZERO
    |  t_POS_POS_POS (q) =>
      impl_4__to_int (impl_5__mul (p) (q))
    end
  end.

Fixpoint impl_10__divmod__divmod_binary (a : t_Positive) (b : t_Positive) : (t_HaxInt*t_HaxInt) :=
  match impl_8__match_positive (a) with
  |  t_POSITIVE_POSITIVE_XH =>
    match impl_8__match_positive (b) with
    |  t_POSITIVE_POSITIVE_XH =>
      (impl_9__ONE,impl_9__ZERO)
    |  t_POSITIVE_POSITIVE_XO (q)
    | t_POSITIVE_POSITIVE_XI (q) =>
      (impl_9__ZERO,impl_9__ONE)
    end
  |  t_POSITIVE_POSITIVE_XO (a) =>
    let '(q,r) := impl_10__divmod__divmod_binary (a) (t_Clone_f_clone (b)) in
    let r := impl_8__double (r) in
    if
      t_PartialOrd_f_le (impl_4__to_int (t_Clone_f_clone (b))) (t_Clone_f_clone (r))
    then
      (impl_4__to_int (impl_8__succ_double (q)),impl_7__sub (r) (impl_4__to_int (b)))
    else
      (impl_8__double (q),r)
  |  t_POSITIVE_POSITIVE_XI (a) =>
    let '(q,r) := impl_10__divmod__divmod_binary (a) (t_Clone_f_clone (b)) in
    let r := impl_4__to_int (impl_8__succ_double (r)) in
    if
      t_PartialOrd_f_le (impl_4__to_int (t_Clone_f_clone (b))) (t_Clone_f_clone (r))
    then
      (impl_4__to_int (impl_8__succ_double (q)),impl_7__sub (r) (impl_4__to_int (b)))
    else
      (impl_8__double (q),r)
  end.

Definition impl_10__divmod (a : t_HaxInt) (b : t_HaxInt) : (t_HaxInt*t_HaxInt) :=
  match impl_9__match_pos (a) with
  |  t_POS_POS_ZERO =>
    (impl_9__ZERO,impl_9__ZERO)
  |  t_POS_POS_POS (p) =>
    match impl_9__match_pos (b) with
    |  t_POS_POS_ZERO =>
      (impl_9__ZERO,impl_4__to_int (p))
    |  t_POS_POS_POS (q) =>
      impl_10__divmod__divmod_binary (p) (q)
    end
  end.

Definition impl_10__div (self : t_HaxInt) (rhs : t_HaxInt) : t_HaxInt :=
  let '(q,r) := impl_10__divmod (self) (rhs) in
  q.

Definition impl_10__rem (self : t_HaxInt) (rhs : t_HaxInt) : t_HaxInt :=
  let '(q,r) := impl_10__divmod (self) (rhs) in
  r.
