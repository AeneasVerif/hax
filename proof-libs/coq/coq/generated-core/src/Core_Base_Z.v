(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Super_Spec.
Export Super_Spec.

Require Import Super_Binary.
Export Super_Binary.

Require Import Ordering.
Export Ordering.

Definition z_add__z_double (s : t_Z_t) : t_Z_t :=
  match s with
  | Z_ZERO  =>
    Z_ZEROt_Z_t
  | Z_POS p =>
    Z_POS (xO p)
  | Z_NEG p =>
    Z_NEG (xO p)
  end.

Definition z_bitor__haxint_ldiff__n_double (x : t_POS_t) : t_POS_t :=
  match x with
  | POS_ZERO  =>
    POS_ZEROt_POS_t
  | POS_POS p =>
    POS_POS (xO p)
  end.

Definition z_bitor__haxint_ldiff__n_succ_double (x : t_POS_t) : t_POS_t :=
  match x with
  | POS_ZERO  =>
    POS_POS xH
  | POS_POS p =>
    POS_POS (xI p)
  end.

Definition z_bitor__n_succ (x : t_POS_t) : t_Positive_t :=
  match x with
  | POS_ZERO  =>
    xH
  | POS_POS p =>
    positive_from_int (succ (positive_to_int p))
  end.

Definition z_neg (x : t_Z_t) : t_Z_t :=
  match x with
  | Z_NEG p =>
    Z_POS p
  | Z_ZERO  =>
    Z_ZEROt_Z_t
  | Z_POS p =>
    Z_NEG p
  end.

Definition z_add__z_pred_double (s : t_Z_t) : t_Z_t :=
  match s with
  | Z_ZERO  =>
    Z_NEG xH
  | Z_POS p =>
    Z_POS (positive_pred_double p)
  | Z_NEG p =>
    Z_NEG (xI p)
  end.

Definition z_add__z_succ_double (s : t_Z_t) : t_Z_t :=
  match s with
  | Z_ZERO  =>
    Z_POS xH
  | Z_POS p =>
    Z_POS (xI p)
  | Z_NEG p =>
    Z_NEG (positive_pred_double p)
  end.

Definition z_bitor__haxint_ldiff__positive_ldiff (lhs : t_Positive_t) (rhs : t_Positive_t) : t_POS_t :=
  match match_positive lhs with
  | POSITIVE_XH  =>
    match match_positive rhs with
    | POSITIVE_XH  =>
      POS_ZEROt_POS_t
    | POSITIVE_XO _ =>
      POS_POS xH
    | POSITIVE_XI _ =>
      POS_ZEROt_POS_t
    end
  | POSITIVE_XO p =>
    match match_positive rhs with
    | POSITIVE_XH  =>
      POS_POS (xO p)
    | POSITIVE_XO q =>
      z_bitor__haxint_ldiff__n_double (z_bitor__haxint_ldiff__positive_ldiff p q)
    | POSITIVE_XI q =>
      z_bitor__haxint_ldiff__n_double (z_bitor__haxint_ldiff__positive_ldiff p q)
    end
  | POSITIVE_XI p =>
    match match_positive rhs with
    | POSITIVE_XH  =>
      POS_POS (xO p)
    | POSITIVE_XO q =>
      z_bitor__haxint_ldiff__n_succ_double (z_bitor__haxint_ldiff__positive_ldiff p q)
    | POSITIVE_XI q =>
      z_bitor__haxint_ldiff__n_double (z_bitor__haxint_ldiff__positive_ldiff p q)
    end
  end.

Definition z_bitor__haxint_ldiff (lhs : t_POS_t) (rhs : t_POS_t) : t_POS_t :=
  match lhs with
  | POS_ZERO  =>
    POS_ZEROt_POS_t
  | POS_POS p =>
    match rhs with
    | POS_ZERO  =>
      POS_POS p
    | POS_POS q =>
      z_bitor__haxint_ldiff__positive_ldiff p q
    end
  end.

Definition z_bitor__n_and (lhs : t_POS_t) (rhs : t_POS_t) : t_POS_t :=
  match lhs with
  | POS_ZERO  =>
    POS_ZEROt_POS_t
  | POS_POS p =>
    match rhs with
    | POS_ZERO  =>
      POS_ZEROt_POS_t
    | POS_POS q =>
      POS_POS (positive_from_int (bitand_binary p q))
    end
  end.

Definition z_bitor__positive_pred_N (x : t_Positive_t) : t_POS_t :=
  match match_positive x with
  | POSITIVE_XH  =>
    POS_ZEROt_POS_t
  | POSITIVE_XI p =>
    POS_POS (xO p)
  | POSITIVE_XO p =>
    POS_POS (positive_pred_double p)
  end.

Definition z_bitor (lhs : t_Z_t) (rhs : t_Z_t) : t_Z_t :=
  match lhs with
  | Z_ZERO  =>
    rhs
  | Z_POS x =>
    match rhs with
    | Z_ZERO  =>
      Z_POS x
    | Z_POS y =>
      Z_POS (bitor_binary x y)
    | Z_NEG y =>
      Z_NEG (z_bitor__n_succ (z_bitor__haxint_ldiff (z_bitor__positive_pred_N y) (POS_POS x)))
    end
  | Z_NEG x =>
    match rhs with
    | Z_ZERO  =>
      Z_NEG x
    | Z_POS y =>
      Z_NEG (z_bitor__n_succ (z_bitor__haxint_ldiff (z_bitor__positive_pred_N x) (POS_POS y)))
    | Z_NEG y =>
      Z_NEG (z_bitor__n_succ (z_bitor__n_and (z_bitor__positive_pred_N x) (z_bitor__positive_pred_N y)))
    end
  end.

Definition z_cmp (lhs : t_Z_t) (rhs : t_Z_t) : t_Ordering_t :=
  match lhs with
  | Z_NEG p =>
    match rhs with
    | Z_NEG q =>
      match positive_cmp p q with
      | Ordering_Equal  =>
        Ordering_Equalt_Ordering_t
      | Ordering_Less  =>
        Ordering_Greatert_Ordering_t
      | Ordering_Greater  =>
        Ordering_Lesst_Ordering_t
      end
    | _ =>
      Ordering_Lesst_Ordering_t
    end
  | Z_ZERO  =>
    match rhs with
    | Z_ZERO  =>
      Ordering_Equalt_Ordering_t
    | Z_POS _ =>
      Ordering_Lesst_Ordering_t
    | Z_NEG _ =>
      Ordering_Greatert_Ordering_t
    end
  | Z_POS p =>
    match rhs with
    | Z_POS q =>
      positive_cmp p q
    | _ =>
      Ordering_Greatert_Ordering_t
    end
  end.

Definition z_le (lhs : t_Z_t) (rhs : t_Z_t) : bool :=
  match Option_Some (z_cmp lhs rhs) with
  | Option_Some Ordering_Less  | Ordering_Equal  =>
    true
  | _ =>
    false
  end.

Definition z_lt (lhs : t_Z_t) (rhs : t_Z_t) : bool :=
  match Option_Some (z_cmp lhs rhs) with
  | Option_Some Ordering_Less  =>
    true
  | _ =>
    false
  end.

Definition z_add__pos_z_sub (x : t_Positive_t) (y : t_Positive_t) : t_Z_t :=
  match match_positive x with
  | POSITIVE_XH  =>
    match match_positive y with
    | POSITIVE_XH  =>
      Z_ZEROt_Z_t
    | POSITIVE_XO q =>
      Z_NEG (positive_pred_double q)
    | POSITIVE_XI q =>
      Z_NEG (xO q)
    end
  | POSITIVE_XO p =>
    match match_positive y with
    | POSITIVE_XH  =>
      Z_POS (positive_pred_double p)
    | POSITIVE_XO q =>
      z_add__z_double (z_add__pos_z_sub p q)
    | POSITIVE_XI q =>
      z_add__z_pred_double (z_add__pos_z_sub p q)
    end
  | POSITIVE_XI p =>
    match match_positive y with
    | POSITIVE_XH  =>
      Z_POS (xO p)
    | POSITIVE_XO q =>
      z_add__z_succ_double (z_add__pos_z_sub p q)
    | POSITIVE_XI q =>
      z_add__z_double (z_add__pos_z_sub p q)
    end
  end.

Definition z_add (lhs : t_Z_t) (rhs : t_Z_t) : t_Z_t :=
  match lhs with
  | Z_NEG p =>
    match rhs with
    | Z_NEG q =>
      Z_NEG (positive_add p q)
    | Z_ZERO  =>
      Z_NEG p
    | Z_POS q =>
      z_add__pos_z_sub q p
    end
  | Z_ZERO  =>
    rhs
  | Z_POS p =>
    match rhs with
    | Z_NEG q =>
      z_add__pos_z_sub p q
    | Z_ZERO  =>
      Z_POS p
    | Z_POS q =>
      Z_POS (positive_add p q)
    end
  end.

Definition z_sub (lhs : t_Z_t) (rhs : t_Z_t) : t_Z_t :=
  z_add lhs (z_neg rhs).

Definition z_mul (lhs : t_Z_t) (rhs : t_Z_t) : t_Z_t :=
  match lhs with
  | Z_NEG p =>
    match rhs with
    | Z_NEG q =>
      Z_POS (positive_mul p q)
    | Z_ZERO  =>
      Z_ZEROt_Z_t
    | Z_POS q =>
      Z_NEG (positive_mul p q)
    end
  | Z_ZERO  =>
    Z_ZEROt_Z_t
  | Z_POS p =>
    match rhs with
    | Z_NEG q =>
      Z_NEG (positive_mul p q)
    | Z_ZERO  =>
      Z_ZEROt_Z_t
    | Z_POS q =>
      Z_POS (positive_mul p q)
    end
  end.

Definition pos_div_eucl (a : t_Positive_t) (b : t_Z_t) : t_Z_t × t_Z_t :=
  match match_positive a with
  | POSITIVE_XH  =>
    if z_le v_Z_TWO (f_clone b)
    then (Z_ZEROt_Z_t,v_Z_ONE)
    else (v_Z_ONE,Z_ZEROt_Z_t)
  | POSITIVE_XO p =>
    let '(q,r) := pos_div_eucl p (f_clone b) : t_Z_t × t_Z_t in
    let r_ := z_mul v_Z_TWO r : t_Z_t in
    if z_lt (f_clone r_) (f_clone b)
    then (z_mul v_Z_TWO q,r_)
    else (z_add (z_mul v_Z_TWO q) v_Z_ONE,z_sub r_ b)
  | POSITIVE_XI p =>
    let '(q,r) := pos_div_eucl p (f_clone b) : t_Z_t × t_Z_t in
    let r_ := z_add (z_mul v_Z_TWO r) v_Z_ONE : t_Z_t in
    if z_lt (f_clone r_) (f_clone b)
    then (z_mul v_Z_TWO q,r_)
    else (z_add (z_mul v_Z_TWO q) v_Z_ONE,z_sub r_ b)
  end.

Definition z_divmod (a : t_Z_t) (b : t_Z_t) : t_Z_t × t_Z_t :=
  match a with
  | Z_ZERO  =>
    (Z_ZEROt_Z_t,Z_ZEROt_Z_t)
  | Z_POS a_ =>
    match f_clone b with
    | Z_ZERO  =>
      (Z_ZEROt_Z_t,Z_POS a_)
    | Z_POS b_ =>
      pos_div_eucl a_ b
    | Z_NEG b_ =>
      let '(q,r) := pos_div_eucl a_ (Z_POS b_) : t_Z_t × t_Z_t in
      (z_neg q,r)
    end
  | Z_NEG a_ =>
    match f_clone b with
    | Z_ZERO  =>
      (Z_ZEROt_Z_t,Z_NEG a_)
    | Z_POS _ =>
      let '(q,r) := pos_div_eucl a_ (f_clone b) : t_Z_t × t_Z_t in
      (z_neg q,z_neg r)
    | Z_NEG b_ =>
      let '(q,r) := pos_div_eucl a_ (Z_POS b_) : t_Z_t × t_Z_t in
      (q,z_neg r)
    end
  end.

Definition z_div (lhs : t_Z_t) (rhs : t_Z_t) : t_Z_t :=
  let '(q,_) := z_divmod lhs rhs : t_Z_t × t_Z_t in
  q.

Definition z_rem (lhs : t_Z_t) (rhs : t_Z_t) : t_Z_t :=
  let '(_,r) := z_divmod lhs rhs : t_Z_t × t_Z_t in
  r.
