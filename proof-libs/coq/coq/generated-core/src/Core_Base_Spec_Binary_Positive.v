(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Super_Super_Haxint.
Export Super_Super_Haxint.

Record t_Positive : Type := {
  0 : t_HaxInt_t;
}.

#[global] Instance t_Positive_t_t_Clone : t_Clone t_Positive_t := {
  f_clone (self : t_Positive_t) := never_to_any (panic_fmt (impl_2__new_v1 (array_from_list [not yet implemented: specification needed]) (impl_1__none tt)));
}.

Inductive t_POSITIVE : Type :=
| POSITIVE_XH : t_POSITIVE
| POSITIVE_XO : t_Positive_t -> t_POSITIVE
| POSITIVE_XI : t_Positive_t -> t_POSITIVE.

Definition match_positive__is_xH (s : t_Positive_t) : bool :=
  never_to_any (panic_fmt (impl_2__new_v1 (array_from_list [not yet implemented: specification needed]) (impl_1__none tt))).

Definition match_positive__is_xI (s : t_Positive_t) : bool :=
  never_to_any (panic_fmt (impl_2__new_v1 (array_from_list [not yet implemented: specification needed]) (impl_1__none tt))).

Definition match_positive__is_xO (s : t_Positive_t) : bool :=
  never_to_any (panic_fmt (impl_2__new_v1 (array_from_list [not yet implemented: specification needed]) (impl_1__none tt))).

Definition positive_from_int (x : t_HaxInt_t) : t_Positive_t :=
  Positive x.

Definition positive_to_int (s : t_Positive_t) : t_HaxInt_t :=
  0 s.

Definition match_positive (s : t_Positive_t) : t_POSITIVE_t :=
  if match_positive__is_xH (f_clone s)
  then POSITIVE_XHt_POSITIVE_t
  else if match_positive__is_xO (f_clone s)
    then POSITIVE_XO (positive_from_int (div2 (positive_to_int s)))
    else POSITIVE_XI (positive_from_int (div2 (positive_to_int s))).

Definition xH : t_Positive_t :=
  Positive v_HaxInt_ONE.

Definition xI (s : t_Positive_t) : t_Positive_t :=
  never_to_any (panic_fmt (impl_2__new_v1 (array_from_list [not yet implemented: specification needed]) (impl_1__none tt))).

Definition xO (s : t_Positive_t) : t_Positive_t :=
  never_to_any (panic_fmt (impl_2__new_v1 (array_from_list [not yet implemented: specification needed]) (impl_1__none tt))).
