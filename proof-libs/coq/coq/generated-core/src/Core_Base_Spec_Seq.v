(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Record t_Seq (T : _) : Type := {
  f_v : t_Vec_t T t_Global_t;
}.

#[global] Instance t_Seq_t T_t_Clone (T : _) : t_Clone (t_Seq_t T) := {
  f_clone (self : t_Seq_t T) := Build_Seq (f_v := f_clone (f_v self));
}.

Inductive t_LIST (T : _) : Type :=
| LIST_NIL : t_LIST (T : _)
| LIST_CONS : (T × t_Seq_t T) -> t_LIST (T : _).
Arguments LIST_NIL {_}.
Arguments LIST_CONS {_} (T × t_Seq_t T).

Definition nil (_ : unit) : t_Seq_t T :=
  Build_Seq (f_v := impl__new tt).

Definition cons (s : t_Seq_t T) (t : T) : t_Seq_t T :=
  Build_Seq (f_v := impl__concat (unsize (array_from_list [(array_from_list [t]).[RangeFullt_RangeFull_t];
    (f_v s).[RangeFullt_RangeFull_t]]))).

Definition match_list (s : t_Seq_t T) : t_LIST_t T :=
  if eq (impl_1__len (f_v s)) (@repr WORDSIZE32 0)
  then LIST_NILt_LIST_t T
  else LIST_CONSt_LIST_t T.
