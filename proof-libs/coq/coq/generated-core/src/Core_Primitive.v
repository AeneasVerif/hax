(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* From Core Require Import Core. *)

(* TODO: Replace this dummy lib with core lib *)
Class t_Sized (T : Type) := { }.
Definition t_u8 := Z.
Definition t_u16 := Z.
Definition t_u32 := Z.
Definition t_u64 := Z.
Definition t_u128 := Z.
Definition t_usize := Z.
Definition t_i8 := Z.
Definition t_i16 := Z.
Definition t_i32 := Z.
Definition t_i64 := Z.
Definition t_i128 := Z.
Definition t_isize := Z.
Definition t_Array T (x : t_usize) := list T.
Definition t_String := string.
Definition ToString_f_to_string (x : string) := x.
Instance Sized_any : forall {t_A}, t_Sized t_A := {}.
Class t_Clone (T : Type) := { Clone_f_clone : T -> T }.
Instance Clone_any : forall {t_A}, t_Clone t_A := {Clone_f_clone := fun x => x}.
Definition t_Slice (T : Type) := list T.
Definition unsize {T : Type} : list T -> t_Slice T := id.
Definition t_PartialEq_f_eq x y := x =? y.
Definition t_Rem_f_rem (x y : Z) := x mod y.
Definition assert (b : bool) (* `{H_assert : b = true} *) : unit := tt.
Inductive globality := | t_Global.
Definition t_Vec T (_ : globality) : Type := list T.
Definition impl_1__append {T} l1 l2 : list T * list T := (app l1 l2, l2).
Definition impl_1__len {A} (l : list A) := Z.of_nat (List.length l).
Definition impl__new {A} (_ : Datatypes.unit) : list A := nil.
Definition impl__with_capacity {A} (_ : Z)  : list A := nil.
Definition impl_1__push {A} l (x : A) := cons x l.
Class t_From (A B : Type) := { From_f_from : B -> A }.
Definition impl__to_vec {T} (x : t_Slice T) : t_Vec T t_Global := x.
Class t_Into (A B : Type) := { Into_f_into : A -> B }.
Instance t_Into_from_t_From {A B : Type} `{H : t_From B A} : t_Into A B := { Into_f_into x := @From_f_from B A H x }.
Definition from_elem {A} (x : A) (l : Z) := repeat x (Z.to_nat l).
Definition t_Option := option.
Definition impl__map {A B} (x : t_Option A) (f : A -> B) : t_Option B := match x with | Some x => Some (f x) | None => None end.
Definition t_Add_f_add x y := x + y.
Class Cast A B := { cast : A -> B }.
Instance cast_t_u8_t_u32 : Cast t_u8 t_u32 := {| cast x := x |}.
(* / dummy lib *)



From Core Require Import Core_Ops (t_Add).
Export Core_Ops (t_Add).

From Core Require Import Core_Ops (t_Div).
Export Core_Ops (t_Div).

From Core Require Import Core_Ops (t_Mul).
Export Core_Ops (t_Mul).

From Core Require Import Core_Ops (t_Neg).
Export Core_Ops (t_Neg).

From Core Require Import Core_Ops (t_Rem).
Export Core_Ops (t_Rem).

From Core Require Import Core_Ops (t_Sub).
Export Core_Ops (t_Sub).



From Core Require Import Core_Ops (t_BitAnd).
Export Core_Ops (t_BitAnd).

From Core Require Import Core_Ops (t_BitOr).
Export Core_Ops (t_BitOr).

From Core Require Import Core_Ops (t_BitXor).
Export Core_Ops (t_BitXor).

From Core Require Import Core_Ops (t_Not).
Export Core_Ops (t_Not).

From Core Require Import Core_Ops (t_Shl).
Export Core_Ops (t_Shl).

From Core Require Import Core_Ops (t_Shr).
Export Core_Ops (t_Shr).



From Core Require Import Core_Cmp (t_Ordering).
Export Core_Cmp (t_Ordering).

From Core Require Import Core_Cmp (t_PartialEq).
Export Core_Cmp (t_PartialEq).

From Core Require Import Core_Cmp (t_PartialOrd).
Export Core_Cmp (t_PartialOrd).

From Core Require Import Core (t_base).
Export Core (t_base).

From Core Require Import Core_Base (t_number_conversion).
Export Core_Base (t_number_conversion).

From Core Require Import Core_Base_interface (t_int).
Export Core_Base_interface (t_int).

Notation "'t_Slice'" := (t_Slice).

Notation "'Slice_f_v'" := (Slice_f_v).

Notation "'impl_2'" := (impl_2).

Notation "'t_Array'" := (t_Array).

Notation "'Array_f_v'" := (Array_f_v).

Notation "'impl_3__cast'" := (cast).

Notation "'t_i128'" := (t_i128).

Notation "'i128_0'" := (i128_0).

Notation "'impl_25'" := (impl_25).

Notation "'t_i16'" := (t_i16).

Notation "'i16_0'" := (i16_0).

Notation "'impl_19'" := (impl_19).

Notation "'t_i32'" := (t_i32).

Notation "'i32_0'" := (i32_0).

Notation "'impl_21'" := (impl_21).

Notation "'t_i64'" := (t_i64).

Notation "'i64_0'" := (i64_0).

Notation "'impl_23'" := (impl_23).

Notation "'t_i8'" := (t_i8).

Notation "'i8_0'" := (i8_0).

Notation "'impl_17'" := (impl_17).

Notation "'t_isize'" := (t_isize).

Notation "'isize_0'" := (isize_0).

Notation "'impl_27'" := (impl_27).

(* NotImplementedYet *)

(* NotImplementedYet *)

Notation "'t_u128'" := (t_u128).

Notation "'u128_0'" := (u128_0).

Notation "'t_u16'" := (t_u16).

Notation "'u16_0'" := (u16_0).

Notation "'t_u32'" := (t_u32).

Notation "'u32_0'" := (u32_0).

Notation "'t_u64'" := (t_u64).

Notation "'u64_0'" := (u64_0).

Notation "'t_u8'" := (t_u8).

Notation "'u8_0'" := (u8_0).

Notation "'t_usize'" := (t_usize).

Notation "'usize_0'" := (usize_0).

(* NotImplementedYet *)

(* NotImplementedYet *)

(* NotImplementedYet *)

(* NotImplementedYet *)

Notation "'impl_1'" := (impl_1).

Notation "'impl_5'" := (impl_5).

Notation "'impl_7'" := (impl_7).

Notation "'impl_9'" := (impl_9).

Notation "'impl_11'" := (impl_11).

Notation "'impl_13'" := (impl_13).

Notation "'impl_15'" := (impl_15).

Notation "'impl'" := (impl).

Notation "'impl_29'" := (impl_29).

Notation "'impl_30'" := (impl_30).

Notation "'impl_31'" := (impl_31).

Notation "'impl_32'" := (impl_32).

Notation "'impl_33'" := (impl_33).

Notation "'impl_34'" := (impl_34).

Notation "'impl_35'" := (impl_35).

Notation "'impl_36'" := (impl_36).

Notation "'impl_37'" := (impl_37).

Notation "'impl_38'" := (impl_38).

Notation "'impl_39'" := (impl_39).

Notation "'impl_40'" := (impl_40).

Notation "'impl_41'" := (impl_41).

Notation "'impl_42'" := (impl_42).

Notation "'impl_43'" := (impl_43).

Notation "'impl_44'" := (impl_44).

Notation "'impl_45'" := (impl_45).

Notation "'impl_46'" := (impl_46).

Notation "'impl_47'" := (impl_47).

Notation "'impl_48'" := (impl_48).

Notation "'impl_49'" := (impl_49).

Notation "'impl_50'" := (impl_50).

Notation "'impl_51'" := (impl_51).

Notation "'impl_52'" := (impl_52).
