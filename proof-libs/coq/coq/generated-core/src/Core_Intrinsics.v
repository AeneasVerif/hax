(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Crate_Primitive.
Export Crate_Primitive.

Require Import Crate_Base_interface_Int.
Export Crate_Base_interface_Int.

Require Import Crate_Base_interface_Coerce.
Export Crate_Base_interface_Coerce.

Require Import Crate_Base.
Export Crate_Base.

Require Import Add.
Export Add.

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

Definition unchecked_add_u128 (x : t_u128_t) (y : t_u128_t) : t_u128_t :=
  C_u128 (Build_U128 (f_v := haxint_add (f_lift (0 x)) (f_lift (0 y)))).

Definition unchecked_add_u16 (x : t_u16_t) (y : t_u16_t) : t_u16_t :=
  C_u16 (Build_U16 (f_v := haxint_add (f_lift (0 x)) (f_lift (0 y)))).

Definition unchecked_add_u32 (x : t_u32_t) (y : t_u32_t) : t_u32_t :=
  C_u32 (Build_U32 (f_v := haxint_add (f_lift (0 x)) (f_lift (0 y)))).

Definition unchecked_add_u64 (x : t_u64_t) (y : t_u64_t) : t_u64_t :=
  C_u64 (Build_U64 (f_v := haxint_add (f_lift (0 x)) (f_lift (0 y)))).

Definition unchecked_add_u8 (x : t_u8_t) (y : t_u8_t) : t_u8_t :=
  C_u8 (Build_U8 (f_v := haxint_add (f_lift (0 x)) (f_lift (0 y)))).

Definition unchecked_add_usize (x : t_usize_t) (y : t_usize_t) : t_usize_t :=
  C_usize (Build_U64 (f_v := haxint_add (f_lift (0 x)) (f_lift (0 y)))).

Definition add_with_overflow_i128 (x : t_i128_t) (y : t_i128_t) : t_i128_t × bool :=
  let overflow := z_add (f_lift (0 x)) (f_lift (0 y)) : t_Z_t in
  let (res : t_I128_t) := f_concretize (f_clone overflow) : t_I128_t in
  (C_i128 (f_clone res),z_lt (f_lift res) overflow).

Definition unchecked_add_i128 (x : t_i128_t) (y : t_i128_t) : t_i128_t :=
  C_i128 (Build_I128 (f_v := z_add (f_lift (0 x)) (f_lift (0 y)))).

Definition add_with_overflow_i16 (x : t_i16_t) (y : t_i16_t) : t_i16_t × bool :=
  let overflow := z_add (f_lift (0 x)) (f_lift (0 y)) : t_Z_t in
  let (res : t_I16_t) := f_concretize (f_clone overflow) : t_I16_t in
  (C_i16 (f_clone res),z_lt (f_lift res) overflow).

Definition unchecked_add_i16 (x : t_i16_t) (y : t_i16_t) : t_i16_t :=
  C_i16 (Build_I16 (f_v := z_add (f_lift (0 x)) (f_lift (0 y)))).

Definition add_with_overflow_i32 (x : t_i32_t) (y : t_i32_t) : t_i32_t × bool :=
  let overflow := z_add (f_lift (0 x)) (f_lift (0 y)) : t_Z_t in
  let (res : t_I32_t) := f_concretize (f_clone overflow) : t_I32_t in
  (C_i32 (f_clone res),z_lt (f_lift res) overflow).

Definition unchecked_add_i32 (x : t_i32_t) (y : t_i32_t) : t_i32_t :=
  C_i32 (Build_I32 (f_v := z_add (f_lift (0 x)) (f_lift (0 y)))).

Definition add_with_overflow_i64 (x : t_i64_t) (y : t_i64_t) : t_i64_t × bool :=
  let overflow := z_add (f_lift (0 x)) (f_lift (0 y)) : t_Z_t in
  let (res : t_I64_t) := f_concretize (f_clone overflow) : t_I64_t in
  (C_i64 (f_clone res),z_lt (f_lift res) overflow).

Definition unchecked_add_i64 (x : t_i64_t) (y : t_i64_t) : t_i64_t :=
  C_i64 (Build_I64 (f_v := z_add (f_lift (0 x)) (f_lift (0 y)))).

Definition add_with_overflow_i8 (x : t_i8_t) (y : t_i8_t) : t_i8_t × bool :=
  let overflow := z_add (f_lift (0 x)) (f_lift (0 y)) : t_Z_t in
  let (res : t_I8_t) := f_concretize (f_clone overflow) : t_I8_t in
  (C_i8 (f_clone res),z_lt (f_lift res) overflow).

Definition unchecked_add_i8 (x : t_i8_t) (y : t_i8_t) : t_i8_t :=
  C_i8 (Build_I8 (f_v := z_add (f_lift (0 x)) (f_lift (0 y)))).

Definition add_with_overflow_isize (x : t_isize_t) (y : t_isize_t) : t_isize_t × bool :=
  let overflow := z_add (f_lift (0 x)) (f_lift (0 y)) : t_Z_t in
  let (res : t_I64_t) := f_concretize (f_clone overflow) : t_I64_t in
  (C_isize (f_clone res),z_lt (f_lift res) overflow).

Definition unchecked_add_isize (x : t_isize_t) (y : t_isize_t) : t_isize_t :=
  C_isize (Build_I64 (f_v := z_add (f_lift (0 x)) (f_lift (0 y)))).

Definition add_with_overflow_u128 (x : t_u128_t) (y : t_u128_t) : t_u128_t × bool :=
  let overflow := haxint_add (f_lift (0 x)) (f_lift (0 y)) : t_HaxInt_t in
  let (res : t_U128_t) := f_concretize (f_clone overflow) : t_U128_t in
  (C_u128 (f_clone res),haxint_lt (f_lift res) overflow).

Definition add_with_overflow_u16 (x : t_u16_t) (y : t_u16_t) : t_u16_t × bool :=
  let overflow := haxint_add (f_lift (0 x)) (f_lift (0 y)) : t_HaxInt_t in
  let (res : t_U16_t) := f_concretize (f_clone overflow) : t_U16_t in
  (C_u16 (f_clone res),haxint_lt (f_lift res) overflow).

Definition add_with_overflow_u32 (x : t_u32_t) (y : t_u32_t) : t_u32_t × bool :=
  let overflow := haxint_add (f_lift (0 x)) (f_lift (0 y)) : t_HaxInt_t in
  let (res : t_U32_t) := f_concretize (f_clone overflow) : t_U32_t in
  (C_u32 (f_clone res),haxint_lt (f_lift res) overflow).

Definition add_with_overflow_u64 (x : t_u64_t) (y : t_u64_t) : t_u64_t × bool :=
  let overflow := haxint_add (f_lift (0 x)) (f_lift (0 y)) : t_HaxInt_t in
  let (res : t_U64_t) := f_concretize (f_clone overflow) : t_U64_t in
  (C_u64 (f_clone res),haxint_lt (f_lift res) overflow).

Definition add_with_overflow_u8 (x : t_u8_t) (y : t_u8_t) : t_u8_t × bool :=
  let overflow := haxint_add (f_lift (0 x)) (f_lift (0 y)) : t_HaxInt_t in
  let (res : t_U8_t) := f_concretize (f_clone overflow) : t_U8_t in
  (C_u8 (f_clone res),haxint_lt (f_lift res) overflow).

Definition add_with_overflow_usize (x : t_usize_t) (y : t_usize_t) : t_usize_t × bool :=
  let overflow := haxint_add (f_lift (0 x)) (f_lift (0 y)) : t_HaxInt_t in
  let (res : t_U64_t) := f_concretize (f_clone overflow) : t_U64_t in
  (C_usize (f_clone res),haxint_lt (f_lift res) overflow).

Definition unchecked_div_u128 (x : t_u128_t) (y : t_u128_t) : t_u128_t :=
  C_u128 (Build_U128 (f_v := haxint_div (f_lift (0 x)) (f_lift (0 y)))).

Definition unchecked_div_u16 (x : t_u16_t) (y : t_u16_t) : t_u16_t :=
  C_u16 (Build_U16 (f_v := haxint_div (f_lift (0 x)) (f_lift (0 y)))).

Definition unchecked_div_u32 (x : t_u32_t) (y : t_u32_t) : t_u32_t :=
  C_u32 (Build_U32 (f_v := haxint_div (f_lift (0 x)) (f_lift (0 y)))).

Definition unchecked_div_u64 (x : t_u64_t) (y : t_u64_t) : t_u64_t :=
  C_u64 (Build_U64 (f_v := haxint_div (f_lift (0 x)) (f_lift (0 y)))).

Definition unchecked_div_u8 (x : t_u8_t) (y : t_u8_t) : t_u8_t :=
  C_u8 (Build_U8 (f_v := haxint_div (f_lift (0 x)) (f_lift (0 y)))).

Definition unchecked_div_usize (x : t_usize_t) (y : t_usize_t) : t_usize_t :=
  C_usize (Build_U64 (f_v := haxint_div (f_lift (0 x)) (f_lift (0 y)))).

Definition wrapping_add_i128 (a : t_i128_t) (b : t_i128_t) : t_i128_t :=
  C_i128 ((0 a).+(0 b)).

Definition wrapping_add_i16 (a : t_i16_t) (b : t_i16_t) : t_i16_t :=
  C_i16 ((0 a).+(0 b)).

Definition wrapping_add_i32 (a : t_i32_t) (b : t_i32_t) : t_i32_t :=
  C_i32 ((0 a).+(0 b)).

Definition wrapping_add_i64 (a : t_i64_t) (b : t_i64_t) : t_i64_t :=
  C_i64 ((0 a).+(0 b)).

Definition wrapping_add_i8 (a : t_i8_t) (b : t_i8_t) : t_i8_t :=
  C_i8 ((0 a).+(0 b)).

Definition wrapping_add_isize (a : t_isize_t) (b : t_isize_t) : t_isize_t :=
  C_isize ((0 a).+(0 b)).

Definition wrapping_sub_i128 (a : t_i128_t) (b : t_i128_t) : t_i128_t :=
  C_i128 ((0 a).-(0 b)).

Definition wrapping_sub_i16 (a : t_i16_t) (b : t_i16_t) : t_i16_t :=
  C_i16 ((0 a).-(0 b)).

Definition wrapping_sub_i32 (a : t_i32_t) (b : t_i32_t) : t_i32_t :=
  C_i32 ((0 a).-(0 b)).

Definition wrapping_sub_i64 (a : t_i64_t) (b : t_i64_t) : t_i64_t :=
  C_i64 ((0 a).-(0 b)).

Definition wrapping_sub_i8 (a : t_i8_t) (b : t_i8_t) : t_i8_t :=
  C_i8 ((0 a).-(0 b)).

Definition wrapping_sub_isize (a : t_isize_t) (b : t_isize_t) : t_isize_t :=
  C_isize ((0 a).-(0 b)).

Definition unchecked_div_i128 (x : t_i128_t) (y : t_i128_t) : t_i128_t :=
  C_i128 (Build_I128 (f_v := z_div (f_lift (0 x)) (f_lift (0 y)))).

Definition unchecked_div_i16 (x : t_i16_t) (y : t_i16_t) : t_i16_t :=
  C_i16 (Build_I16 (f_v := z_div (f_lift (0 x)) (f_lift (0 y)))).

Definition unchecked_div_i32 (x : t_i32_t) (y : t_i32_t) : t_i32_t :=
  C_i32 (Build_I32 (f_v := z_div (f_lift (0 x)) (f_lift (0 y)))).

Definition unchecked_div_i64 (x : t_i64_t) (y : t_i64_t) : t_i64_t :=
  C_i64 (Build_I64 (f_v := z_div (f_lift (0 x)) (f_lift (0 y)))).

Definition unchecked_div_i8 (x : t_i8_t) (y : t_i8_t) : t_i8_t :=
  C_i8 (Build_I8 (f_v := z_div (f_lift (0 x)) (f_lift (0 y)))).

Definition unchecked_div_isize (x : t_isize_t) (y : t_isize_t) : t_isize_t :=
  C_isize (Build_I64 (f_v := z_div (f_lift (0 x)) (f_lift (0 y)))).

Definition wrapping_add_u128 (a : t_u128_t) (b : t_u128_t) : t_u128_t :=
  C_u128 ((0 a).+(0 b)).

Definition wrapping_add_u16 (a : t_u16_t) (b : t_u16_t) : t_u16_t :=
  C_u16 ((0 a).+(0 b)).

Definition wrapping_add_u32 (a : t_u32_t) (b : t_u32_t) : t_u32_t :=
  C_u32 ((0 a).+(0 b)).

Definition wrapping_add_u64 (a : t_u64_t) (b : t_u64_t) : t_u64_t :=
  C_u64 ((0 a).+(0 b)).

Definition wrapping_add_u8 (a : t_u8_t) (b : t_u8_t) : t_u8_t :=
  C_u8 ((0 a).+(0 b)).

Definition wrapping_add_usize (a : t_usize_t) (b : t_usize_t) : t_usize_t :=
  C_usize ((0 a).+(0 b)).

Definition wrapping_mul_i128 (a : t_i128_t) (b : t_i128_t) : t_i128_t :=
  C_i128 ((0 a).*(0 b)).

Definition wrapping_mul_i16 (a : t_i16_t) (b : t_i16_t) : t_i16_t :=
  C_i16 ((0 a).*(0 b)).

Definition wrapping_mul_i32 (a : t_i32_t) (b : t_i32_t) : t_i32_t :=
  C_i32 ((0 a).*(0 b)).

Definition wrapping_mul_i64 (a : t_i64_t) (b : t_i64_t) : t_i64_t :=
  C_i64 ((0 a).*(0 b)).

Definition wrapping_mul_i8 (a : t_i8_t) (b : t_i8_t) : t_i8_t :=
  C_i8 ((0 a).*(0 b)).

Definition wrapping_mul_isize (a : t_isize_t) (b : t_isize_t) : t_isize_t :=
  C_isize ((0 a).*(0 b)).

Definition wrapping_mul_u128 (a : t_u128_t) (b : t_u128_t) : t_u128_t :=
  C_u128 ((0 a).*(0 b)).

Definition wrapping_mul_u16 (a : t_u16_t) (b : t_u16_t) : t_u16_t :=
  C_u16 ((0 a).*(0 b)).

Definition wrapping_mul_u32 (a : t_u32_t) (b : t_u32_t) : t_u32_t :=
  C_u32 ((0 a).*(0 b)).

Definition wrapping_mul_u64 (a : t_u64_t) (b : t_u64_t) : t_u64_t :=
  C_u64 ((0 a).*(0 b)).

Definition wrapping_mul_u8 (a : t_u8_t) (b : t_u8_t) : t_u8_t :=
  C_u8 ((0 a).*(0 b)).

Definition wrapping_mul_usize (a : t_usize_t) (b : t_usize_t) : t_usize_t :=
  C_usize ((0 a).*(0 b)).

Definition wrapping_sub_u128 (a : t_u128_t) (b : t_u128_t) : t_u128_t :=
  C_u128 ((0 a).-(0 b)).

Definition wrapping_sub_u16 (a : t_u16_t) (b : t_u16_t) : t_u16_t :=
  C_u16 ((0 a).-(0 b)).

Definition wrapping_sub_u32 (a : t_u32_t) (b : t_u32_t) : t_u32_t :=
  C_u32 ((0 a).-(0 b)).

Definition wrapping_sub_u64 (a : t_u64_t) (b : t_u64_t) : t_u64_t :=
  C_u64 ((0 a).-(0 b)).

Definition wrapping_sub_u8 (a : t_u8_t) (b : t_u8_t) : t_u8_t :=
  C_u8 ((0 a).-(0 b)).

Definition wrapping_sub_usize (a : t_usize_t) (b : t_usize_t) : t_usize_t :=
  C_usize ((0 a).-(0 b)).

Definition rotate_left_u128 (x : t_u128_t) (shift : t_u32_t) : t_u128_t :=
  let (shift : t_u32_t) := shift.%impl_10__BITS : t_u32_t in
  let (left : t_u128_t) := (f_clone x) shift_left (f_clone shift) : t_u128_t in
  let (right : t_u128_t) := (f_clone x) shift_right (impl_10__BITS.-(f_clone shift)) : t_u128_t in
  left.|right.

Definition rotate_left_u16 (x : t_u16_t) (shift : t_u32_t) : t_u16_t :=
  let (shift : t_u32_t) := shift.%impl_7__BITS : t_u32_t in
  let (left : t_u16_t) := (f_clone x) shift_left (f_clone shift) : t_u16_t in
  let (right : t_u16_t) := (f_clone x) shift_right (impl_7__BITS.-(f_clone shift)) : t_u16_t in
  left.|right.

Definition rotate_left_u32 (x : t_u32_t) (shift : t_u32_t) : t_u32_t :=
  let (shift : t_u32_t) := shift.%impl_8__BITS : t_u32_t in
  let (left : t_u32_t) := (f_clone x) shift_left (f_clone shift) : t_u32_t in
  let (right : t_u32_t) := (f_clone x) shift_right (impl_8__BITS.-(f_clone shift)) : t_u32_t in
  left.|right.

Definition rotate_left_u64 (x : t_u64_t) (shift : t_u32_t) : t_u64_t :=
  let (shift : t_u32_t) := shift.%impl_9__BITS : t_u32_t in
  let (left : t_u64_t) := (f_clone x) shift_left (f_clone shift) : t_u64_t in
  let (right : t_u64_t) := (f_clone x) shift_right (impl_9__BITS.-(f_clone shift)) : t_u64_t in
  left.|right.

Definition rotate_left_u8 (x : t_u8_t) (shift : t_u32_t) : t_u8_t :=
  let (shift : t_u32_t) := shift.%impl_6__BITS : t_u32_t in
  let (left : t_u8_t) := (f_clone x) shift_left (f_clone shift) : t_u8_t in
  let (right : t_u8_t) := (f_clone x) shift_right (impl_6__BITS.-(f_clone shift)) : t_u8_t in
  left.|right.

Definition rotate_left_usize (x : t_usize_t) (shift : t_u32_t) : t_usize_t :=
  let (shift : t_u32_t) := shift.%impl_11__BITS : t_u32_t in
  let (left : t_usize_t) := (f_clone x) shift_left (f_clone shift) : t_usize_t in
  let (right : t_usize_t) := (f_clone x) shift_right (impl_11__BITS.-(f_clone shift)) : t_usize_t in
  left.|right.

Definition rotate_right_u128 (x : t_u128_t) (shift : t_u32_t) : t_u128_t :=
  let (shift : t_u32_t) := shift.%impl_10__BITS : t_u32_t in
  let (left : t_u128_t) := (f_clone x) shift_right (f_clone shift) : t_u128_t in
  let (right : t_u128_t) := (f_clone x) shift_left (impl_10__BITS.-(f_clone shift)) : t_u128_t in
  left.|right.

Definition rotate_right_u16 (x : t_u16_t) (shift : t_u32_t) : t_u16_t :=
  let (shift : t_u32_t) := shift.%impl_7__BITS : t_u32_t in
  let (left : t_u16_t) := (f_clone x) shift_right (f_clone shift) : t_u16_t in
  let (right : t_u16_t) := (f_clone x) shift_left (impl_7__BITS.-(f_clone shift)) : t_u16_t in
  left.|right.

Definition rotate_right_u32 (x : t_u32_t) (shift : t_u32_t) : t_u32_t :=
  let (shift : t_u32_t) := shift.%impl_8__BITS : t_u32_t in
  let (left : t_u32_t) := (f_clone x) shift_right (f_clone shift) : t_u32_t in
  let (right : t_u32_t) := (f_clone x) shift_left (impl_8__BITS.-(f_clone shift)) : t_u32_t in
  left.|right.

Definition rotate_right_u64 (x : t_u64_t) (shift : t_u32_t) : t_u64_t :=
  let (shift : t_u32_t) := shift.%impl_9__BITS : t_u32_t in
  let (left : t_u64_t) := (f_clone x) shift_right (f_clone shift) : t_u64_t in
  let (right : t_u64_t) := (f_clone x) shift_left (impl_9__BITS.-(f_clone shift)) : t_u64_t in
  left.|right.

Definition rotate_right_u8 (x : t_u8_t) (shift : t_u32_t) : t_u8_t :=
  let (shift : t_u32_t) := shift.%impl_6__BITS : t_u32_t in
  let (left : t_u8_t) := (f_clone x) shift_right (f_clone shift) : t_u8_t in
  let (right : t_u8_t) := (f_clone x) shift_left (impl_6__BITS.-(f_clone shift)) : t_u8_t in
  left.|right.

Definition rotate_right_usize (x : t_usize_t) (shift : t_u32_t) : t_usize_t :=
  let (shift : t_u32_t) := shift.%impl_11__BITS : t_u32_t in
  let (left : t_usize_t) := (f_clone x) shift_right (f_clone shift) : t_usize_t in
  let (right : t_usize_t) := (f_clone x) shift_left (impl_11__BITS.-(f_clone shift)) : t_usize_t in
  left.|right.

Definition bswap_u128 (x : t_u128_t) : t_u128_t :=
  let (count : t_u128_t) := f_into (@repr WORDSIZE128 0) : t_u128_t in
  let count := fold_range (@repr WORDSIZE32 0) (f_into impl_10__BITS) (fun count => fun _ =>
      true) count (fun count => fun i =>
      let (low_bit : t_u128_t) := f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE128 1))) : t_u128_t in
      let count := (count shift_left (f_into (@repr WORDSIZE32 1))).+low_bit : t_u128_t in
      count) : t_u128_t in
  count.

Definition bswap_u16 (x : t_u16_t) : t_u16_t :=
  let (count : t_u16_t) := f_into (@repr WORDSIZE16 0) : t_u16_t in
  let count := fold_range (@repr WORDSIZE32 0) (f_into impl_7__BITS) (fun count => fun _ =>
      true) count (fun count => fun i =>
      let (low_bit : t_u16_t) := f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE16 1))) : t_u16_t in
      let count := (count shift_left (f_into (@repr WORDSIZE32 1))).+low_bit : t_u16_t in
      count) : t_u16_t in
  count.

Definition bswap_u32 (x : t_u32_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let count := fold_range (@repr WORDSIZE32 0) (f_into impl_8__BITS) (fun count => fun _ =>
      true) count (fun count => fun i =>
      let (low_bit : t_u32_t) := f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE32 1))) : t_u32_t in
      let count := (count shift_left (f_into (@repr WORDSIZE32 1))).+low_bit : t_u32_t in
      count) : t_u32_t in
  count.

Definition bswap_u64 (x : t_u64_t) : t_u64_t :=
  let (count : t_u64_t) := f_into (@repr WORDSIZE64 0) : t_u64_t in
  let count := fold_range (@repr WORDSIZE32 0) (f_into impl_9__BITS) (fun count => fun _ =>
      true) count (fun count => fun i =>
      let (low_bit : t_u64_t) := f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE64 1))) : t_u64_t in
      let count := (count shift_left (f_into (@repr WORDSIZE32 1))).+low_bit : t_u64_t in
      count) : t_u64_t in
  count.

Definition bswap_u8 (x : t_u8_t) : t_u8_t :=
  let (count : t_u8_t) := f_into (@repr WORDSIZE8 0) : t_u8_t in
  let count := fold_range (@repr WORDSIZE32 0) (f_into impl_6__BITS) (fun count => fun _ =>
      true) count (fun count => fun i =>
      let (low_bit : t_u8_t) := f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE8 1))) : t_u8_t in
      let count := (count shift_left (f_into (@repr WORDSIZE32 1))).+low_bit : t_u8_t in
      count) : t_u8_t in
  count.

Definition bswap_usize (x : t_usize_t) : t_usize_t :=
  let (count : t_usize_t) := f_into (@repr WORDSIZE32 0) : t_usize_t in
  let count := fold_range (@repr WORDSIZE32 0) (f_into impl_11__BITS) (fun count => fun _ =>
      true) count (fun count => fun i =>
      let (low_bit : t_usize_t) := f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE32 1))) : t_usize_t in
      let count := (count shift_left (f_into (@repr WORDSIZE32 1))).+low_bit : t_usize_t in
      count) : t_usize_t in
  count.

Definition ctlz_u128 (x : t_u128_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let done := false : bool in
  let '(count,done) := fold_range (@repr WORDSIZE32 0) (f_into impl_10__BITS) (fun '(count,done) => fun _ =>
      true) (count,done) (fun '(count,done) => fun i =>
      let (high_bit : t_u32_t) := f_into (((f_clone x) shift_left (f_into i)) shift_right (f_into (impl_10__BITS.-(f_into (@repr WORDSIZE32 1))))) : t_u32_t in
      if orb (high_bit=.?(f_into (@repr WORDSIZE32 1))) done
      then let done := true : bool in
        (count,done)
      else let count := count.+(f_into (@repr WORDSIZE32 1)) : t_u32_t in
        (count,done)) : t_u32_t × bool in
  count.

Definition ctlz_u16 (x : t_u16_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let done := false : bool in
  let '(count,done) := fold_range (@repr WORDSIZE32 0) (f_into impl_7__BITS) (fun '(count,done) => fun _ =>
      true) (count,done) (fun '(count,done) => fun i =>
      let (high_bit : t_u32_t) := f_into (((f_clone x) shift_left (f_into i)) shift_right (f_into (impl_7__BITS.-(f_into (@repr WORDSIZE32 1))))) : t_u32_t in
      if orb (high_bit=.?(f_into (@repr WORDSIZE32 1))) done
      then let done := true : bool in
        (count,done)
      else let count := count.+(f_into (@repr WORDSIZE32 1)) : t_u32_t in
        (count,done)) : t_u32_t × bool in
  count.

Definition ctlz_u32 (x : t_u32_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let done := false : bool in
  let '(count,done) := fold_range (@repr WORDSIZE32 0) (f_into impl_8__BITS) (fun '(count,done) => fun _ =>
      true) (count,done) (fun '(count,done) => fun i =>
      let (high_bit : t_u32_t) := f_into (((f_clone x) shift_left (f_into i)) shift_right (f_into (impl_8__BITS.-(f_into (@repr WORDSIZE32 1))))) : t_u32_t in
      if orb (high_bit=.?(f_into (@repr WORDSIZE32 1))) done
      then let done := true : bool in
        (count,done)
      else let count := count.+(f_into (@repr WORDSIZE32 1)) : t_u32_t in
        (count,done)) : t_u32_t × bool in
  count.

Definition ctlz_u64 (x : t_u64_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let done := false : bool in
  let '(count,done) := fold_range (@repr WORDSIZE32 0) (f_into impl_9__BITS) (fun '(count,done) => fun _ =>
      true) (count,done) (fun '(count,done) => fun i =>
      let (high_bit : t_u32_t) := f_into (((f_clone x) shift_left (f_into i)) shift_right (f_into (impl_9__BITS.-(f_into (@repr WORDSIZE32 1))))) : t_u32_t in
      if orb (high_bit=.?(f_into (@repr WORDSIZE32 1))) done
      then let done := true : bool in
        (count,done)
      else let count := count.+(f_into (@repr WORDSIZE32 1)) : t_u32_t in
        (count,done)) : t_u32_t × bool in
  count.

Definition ctlz_u8 (x : t_u8_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let done := false : bool in
  let '(count,done) := fold_range (@repr WORDSIZE32 0) (f_into impl_6__BITS) (fun '(count,done) => fun _ =>
      true) (count,done) (fun '(count,done) => fun i =>
      let (high_bit : t_u32_t) := f_into (((f_clone x) shift_left (f_into i)) shift_right (f_into (impl_6__BITS.-(f_into (@repr WORDSIZE32 1))))) : t_u32_t in
      if orb (high_bit=.?(f_into (@repr WORDSIZE32 1))) done
      then let done := true : bool in
        (count,done)
      else let count := count.+(f_into (@repr WORDSIZE32 1)) : t_u32_t in
        (count,done)) : t_u32_t × bool in
  count.

Definition ctlz_usize (x : t_usize_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let done := false : bool in
  let '(count,done) := fold_range (@repr WORDSIZE32 0) (f_into impl_11__BITS) (fun '(count,done) => fun _ =>
      true) (count,done) (fun '(count,done) => fun i =>
      let (high_bit : t_u32_t) := f_into (((f_clone x) shift_left (f_into i)) shift_right (f_into (impl_11__BITS.-(f_into (@repr WORDSIZE32 1))))) : t_u32_t in
      if orb (high_bit=.?(f_into (@repr WORDSIZE32 1))) done
      then let done := true : bool in
        (count,done)
      else let count := count.+(f_into (@repr WORDSIZE32 1)) : t_u32_t in
        (count,done)) : t_u32_t × bool in
  count.

Definition ctpop_u128 (x : t_u128_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let count := fold_range (@repr WORDSIZE32 0) (f_into impl_10__BITS) (fun count => fun _ =>
      true) count (fun count => fun i =>
      count.+(f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE128 1))))) : t_u32_t in
  count.

Definition ctpop_u16 (x : t_u16_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let count := fold_range (@repr WORDSIZE32 0) (f_into impl_7__BITS) (fun count => fun _ =>
      true) count (fun count => fun i =>
      count.+(f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE16 1))))) : t_u32_t in
  count.

Definition ctpop_u32 (x : t_u32_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let count := fold_range (@repr WORDSIZE32 0) (f_into impl_8__BITS) (fun count => fun _ =>
      true) count (fun count => fun i =>
      count.+(f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE32 1))))) : t_u32_t in
  count.

Definition ctpop_u64 (x : t_u64_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let count := fold_range (@repr WORDSIZE32 0) (f_into impl_9__BITS) (fun count => fun _ =>
      true) count (fun count => fun i =>
      count.+(f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE64 1))))) : t_u32_t in
  count.

Definition ctpop_u8 (x : t_u8_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let count := fold_range (@repr WORDSIZE32 0) (f_into impl_6__BITS) (fun count => fun _ =>
      true) count (fun count => fun i =>
      count.+(f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE8 1))))) : t_u32_t in
  count.

Definition ctpop_usize (x : t_usize_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let count := fold_range (@repr WORDSIZE32 0) (f_into impl_11__BITS) (fun count => fun _ =>
      true) count (fun count => fun i =>
      count.+(f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE32 1))))) : t_u32_t in
  count.

Definition cttz_u128 (x : t_u128_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let done := false : bool in
  let '(count,done) := fold_range (@repr WORDSIZE32 0) (f_into impl_10__BITS) (fun '(count,done) => fun _ =>
      true) (count,done) (fun '(count,done) => fun i =>
      let (low_bit : t_u32_t) := f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE128 1))) : t_u32_t in
      if orb (low_bit=.?(f_into (@repr WORDSIZE32 1))) done
      then let done := true : bool in
        (count,done)
      else let count := count.+(f_into (@repr WORDSIZE32 1)) : t_u32_t in
        (count,done)) : t_u32_t × bool in
  count.

Definition cttz_u16 (x : t_u16_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let done := false : bool in
  let '(count,done) := fold_range (@repr WORDSIZE32 0) (f_into impl_7__BITS) (fun '(count,done) => fun _ =>
      true) (count,done) (fun '(count,done) => fun i =>
      let (low_bit : t_u32_t) := f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE16 1))) : t_u32_t in
      if orb (low_bit=.?(f_into (@repr WORDSIZE32 1))) done
      then let done := true : bool in
        (count,done)
      else let count := count.+(f_into (@repr WORDSIZE32 1)) : t_u32_t in
        (count,done)) : t_u32_t × bool in
  count.

Definition cttz_u32 (x : t_u32_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let done := false : bool in
  let '(count,done) := fold_range (@repr WORDSIZE32 0) (f_into impl_8__BITS) (fun '(count,done) => fun _ =>
      true) (count,done) (fun '(count,done) => fun i =>
      let (low_bit : t_u32_t) := f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE32 1))) : t_u32_t in
      if orb (low_bit=.?(f_into (@repr WORDSIZE32 1))) done
      then let done := true : bool in
        (count,done)
      else let count := count.+(f_into (@repr WORDSIZE32 1)) : t_u32_t in
        (count,done)) : t_u32_t × bool in
  count.

Definition cttz_u64 (x : t_u64_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let done := false : bool in
  let '(count,done) := fold_range (@repr WORDSIZE32 0) (f_into impl_9__BITS) (fun '(count,done) => fun _ =>
      true) (count,done) (fun '(count,done) => fun i =>
      let (low_bit : t_u32_t) := f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE64 1))) : t_u32_t in
      if orb (low_bit=.?(f_into (@repr WORDSIZE32 1))) done
      then let done := true : bool in
        (count,done)
      else let count := count.+(f_into (@repr WORDSIZE32 1)) : t_u32_t in
        (count,done)) : t_u32_t × bool in
  count.

Definition cttz_u8 (x : t_u8_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let done := false : bool in
  let '(count,done) := fold_range (@repr WORDSIZE32 0) (f_into impl_6__BITS) (fun '(count,done) => fun _ =>
      true) (count,done) (fun '(count,done) => fun i =>
      let (low_bit : t_u32_t) := f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE8 1))) : t_u32_t in
      if orb (low_bit=.?(f_into (@repr WORDSIZE32 1))) done
      then let done := true : bool in
        (count,done)
      else let count := count.+(f_into (@repr WORDSIZE32 1)) : t_u32_t in
        (count,done)) : t_u32_t × bool in
  count.

Definition cttz_usize (x : t_usize_t) : t_u32_t :=
  let (count : t_u32_t) := f_into (@repr WORDSIZE32 0) : t_u32_t in
  let done := false : bool in
  let '(count,done) := fold_range (@repr WORDSIZE32 0) (f_into impl_11__BITS) (fun '(count,done) => fun _ =>
      true) (count,done) (fun '(count,done) => fun i =>
      let (low_bit : t_u32_t) := f_into (((f_clone x) shift_right (f_into i)).&(f_into (@repr WORDSIZE32 1))) : t_u32_t in
      if orb (low_bit=.?(f_into (@repr WORDSIZE32 1))) done
      then let done := true : bool in
        (count,done)
      else let count := count.+(f_into (@repr WORDSIZE32 1)) : t_u32_t in
        (count,done)) : t_u32_t × bool in
  count.
