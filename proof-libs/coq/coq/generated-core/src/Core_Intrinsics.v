(* File automatically generated by Hacspec *)
From Coq Require Import ZArith.
Require Import List.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.
Require Import Ascii.
Require Import String.
Require Import Coq.Floats.Floats.
From RecordUpdate Require Import RecordSet.
Import RecordSetNotations.

(* From Core Require Import Core. *)

(* TODO: Replace this dummy lib with core lib *)
Class t_Sized (T : Type) := { }.
Definition t_u8 := Z.
Definition t_u16 := Z.
Definition t_u32 := Z.
Definition t_u64 := Z.
Definition t_u128 := Z.
Definition t_usize := Z.
Definition t_i8 := Z.
Definition t_i16 := Z.
Definition t_i32 := Z.
Definition t_i64 := Z.
Definition t_i128 := Z.
Definition t_isize := Z.
Definition t_Array T (x : t_usize) := list T.
Definition t_String := string.
Definition ToString_f_to_string (x : string) := x.
Instance Sized_any : forall {t_A}, t_Sized t_A := {}.
Class t_Clone (T : Type) := { Clone_f_clone : T -> T }.
Instance Clone_any : forall {t_A}, t_Clone t_A := {Clone_f_clone := fun x => x}.
Definition t_Slice (T : Type) := list T.
Definition unsize {T : Type} : list T -> t_Slice T := id.
Definition t_PartialEq_f_eq x y := x =? y.
Definition t_Rem_f_rem (x y : Z) := x mod y.
Definition assert (b : bool) (* `{H_assert : b = true} *) : unit := tt.
Inductive globality := | t_Global.
Definition t_Vec T (_ : globality) : Type := list T.
Definition impl_1__append {T} l1 l2 : list T * list T := (app l1 l2, l2).
Definition impl_1__len {A} (l : list A) := Z.of_nat (List.length l).
Definition impl__new {A} (_ : Datatypes.unit) : list A := nil.
Definition impl__with_capacity {A} (_ : Z)  : list A := nil.
Definition impl_1__push {A} l (x : A) := cons x l.
Class t_From (A B : Type) := { From_f_from : B -> A }.
Definition impl__to_vec {T} (x : t_Slice T) : t_Vec T t_Global := x.
Class t_Into (A B : Type) := { Into_f_into : A -> B }.
Instance t_Into_from_t_From {A B : Type} `{H : t_From B A} : t_Into A B := { Into_f_into x := @From_f_from B A H x }.
Definition from_elem {A} (x : A) (l : Z) := repeat x (Z.to_nat l).
Definition t_Option := option.
Definition impl__map {A B} (x : t_Option A) (f : A -> B) : t_Option B := match x with | Some x => Some (f x) | None => None end.
Definition t_Add_f_add x y := x + y.
Class Cast A B := { cast : A -> B }.
Instance cast_t_u8_t_u32 : Cast t_u8 t_u32 := {| cast x := x |}.
(* / dummy lib *)

From Core Require Import Core (t_primitive).
Export Core (t_primitive).



From Core Require Import Core_Base_interface (t_int).
Export Core_Base_interface (t_int).

From Core Require Import Core_Base_interface (t_coerce).
Export Core_Base_interface (t_coerce).

From Core Require Import Core (t_base).
Export Core (t_base).



From Core Require Import Core_Ops (t_Add).
Export Core_Ops (t_Add).

(* NotImplementedYet *)

(* NotImplementedYet *)

Notation "'add_with_overflow_i128'" := (add_with_overflow_i128).

Notation "'add_with_overflow_i16'" := (add_with_overflow_i16).

Notation "'add_with_overflow_i32'" := (add_with_overflow_i32).

Notation "'add_with_overflow_i64'" := (add_with_overflow_i64).

Notation "'add_with_overflow_i8'" := (add_with_overflow_i8).

Notation "'add_with_overflow_isize'" := (add_with_overflow_isize).

Notation "'unchecked_add_i128'" := (unchecked_add_i128).

Notation "'unchecked_add_i16'" := (unchecked_add_i16).

Notation "'unchecked_add_i32'" := (unchecked_add_i32).

Notation "'unchecked_add_i64'" := (unchecked_add_i64).

Notation "'unchecked_add_i8'" := (unchecked_add_i8).

Notation "'unchecked_add_isize'" := (unchecked_add_isize).

Notation "'unchecked_add_u128'" := (unchecked_add_u128).

Notation "'unchecked_add_u16'" := (unchecked_add_u16).

Notation "'unchecked_add_u32'" := (unchecked_add_u32).

Notation "'unchecked_add_u64'" := (unchecked_add_u64).

Notation "'unchecked_add_u8'" := (unchecked_add_u8).

Notation "'unchecked_add_usize'" := (unchecked_add_usize).

Notation "'add_with_overflow_u128'" := (add_with_overflow_u128).

Notation "'add_with_overflow_u16'" := (add_with_overflow_u16).

Notation "'add_with_overflow_u32'" := (add_with_overflow_u32).

Notation "'add_with_overflow_u64'" := (add_with_overflow_u64).

Notation "'add_with_overflow_u8'" := (add_with_overflow_u8).

Notation "'add_with_overflow_usize'" := (add_with_overflow_usize).

Notation "'unchecked_div_u128'" := (unchecked_div_u128).

Notation "'unchecked_div_u16'" := (unchecked_div_u16).

Notation "'unchecked_div_u32'" := (unchecked_div_u32).

Notation "'unchecked_div_u64'" := (unchecked_div_u64).

Notation "'unchecked_div_u8'" := (unchecked_div_u8).

Notation "'unchecked_div_usize'" := (unchecked_div_usize).

Notation "'wrapping_add_i128'" := (wrapping_add_i128).

Notation "'wrapping_add_i16'" := (wrapping_add_i16).

Notation "'wrapping_add_i32'" := (wrapping_add_i32).

Notation "'wrapping_add_i64'" := (wrapping_add_i64).

Notation "'wrapping_add_i8'" := (wrapping_add_i8).

Notation "'wrapping_add_isize'" := (wrapping_add_isize).

Notation "'wrapping_sub_i128'" := (wrapping_sub_i128).

Notation "'wrapping_sub_i16'" := (wrapping_sub_i16).

Notation "'wrapping_sub_i32'" := (wrapping_sub_i32).

Notation "'wrapping_sub_i64'" := (wrapping_sub_i64).

Notation "'wrapping_sub_i8'" := (wrapping_sub_i8).

Notation "'wrapping_sub_isize'" := (wrapping_sub_isize).

Notation "'unchecked_div_i128'" := (unchecked_div_i128).

Notation "'unchecked_div_i16'" := (unchecked_div_i16).

Notation "'unchecked_div_i32'" := (unchecked_div_i32).

Notation "'unchecked_div_i64'" := (unchecked_div_i64).

Notation "'unchecked_div_i8'" := (unchecked_div_i8).

Notation "'unchecked_div_isize'" := (unchecked_div_isize).

Notation "'wrapping_add_u128'" := (wrapping_add_u128).

Notation "'wrapping_add_u16'" := (wrapping_add_u16).

Notation "'wrapping_add_u32'" := (wrapping_add_u32).

Notation "'wrapping_add_u64'" := (wrapping_add_u64).

Notation "'wrapping_add_u8'" := (wrapping_add_u8).

Notation "'wrapping_add_usize'" := (wrapping_add_usize).

Notation "'wrapping_mul_i128'" := (wrapping_mul_i128).

Notation "'wrapping_mul_i16'" := (wrapping_mul_i16).

Notation "'wrapping_mul_i32'" := (wrapping_mul_i32).

Notation "'wrapping_mul_i64'" := (wrapping_mul_i64).

Notation "'wrapping_mul_i8'" := (wrapping_mul_i8).

Notation "'wrapping_mul_isize'" := (wrapping_mul_isize).

Notation "'wrapping_mul_u128'" := (wrapping_mul_u128).

Notation "'wrapping_mul_u16'" := (wrapping_mul_u16).

Notation "'wrapping_mul_u32'" := (wrapping_mul_u32).

Notation "'wrapping_mul_u64'" := (wrapping_mul_u64).

Notation "'wrapping_mul_u8'" := (wrapping_mul_u8).

Notation "'wrapping_mul_usize'" := (wrapping_mul_usize).

Notation "'wrapping_sub_u128'" := (wrapping_sub_u128).

Notation "'wrapping_sub_u16'" := (wrapping_sub_u16).

Notation "'wrapping_sub_u32'" := (wrapping_sub_u32).

Notation "'wrapping_sub_u64'" := (wrapping_sub_u64).

Notation "'wrapping_sub_u8'" := (wrapping_sub_u8).

Notation "'wrapping_sub_usize'" := (wrapping_sub_usize).

Notation "'rotate_left_u128'" := (rotate_left_u128).

Notation "'rotate_left_u16'" := (rotate_left_u16).

Notation "'rotate_left_u32'" := (rotate_left_u32).

Notation "'rotate_left_u64'" := (rotate_left_u64).

Notation "'rotate_left_u8'" := (rotate_left_u8).

Notation "'rotate_left_usize'" := (rotate_left_usize).

Notation "'rotate_right_u128'" := (rotate_right_u128).

Notation "'rotate_right_u16'" := (rotate_right_u16).

Notation "'rotate_right_u32'" := (rotate_right_u32).

Notation "'rotate_right_u64'" := (rotate_right_u64).

Notation "'rotate_right_u8'" := (rotate_right_u8).

Notation "'rotate_right_usize'" := (rotate_right_usize).

Notation "'bswap_u128'" := (bswap_u128).

Notation "'bswap_u16'" := (bswap_u16).

Notation "'bswap_u32'" := (bswap_u32).

Notation "'bswap_u64'" := (bswap_u64).

Notation "'bswap_u8'" := (bswap_u8).

Notation "'bswap_usize'" := (bswap_usize).

Notation "'ctlz_u128'" := (ctlz_u128).

Notation "'ctlz_u16'" := (ctlz_u16).

Notation "'ctlz_u32'" := (ctlz_u32).

Notation "'ctlz_u64'" := (ctlz_u64).

Notation "'ctlz_u8'" := (ctlz_u8).

Notation "'ctlz_usize'" := (ctlz_usize).

Notation "'ctpop_u128'" := (ctpop_u128).

Notation "'ctpop_u16'" := (ctpop_u16).

Notation "'ctpop_u32'" := (ctpop_u32).

Notation "'ctpop_u64'" := (ctpop_u64).

Notation "'ctpop_u8'" := (ctpop_u8).

Notation "'ctpop_usize'" := (ctpop_usize).

Notation "'cttz_u128'" := (cttz_u128).

Notation "'cttz_u16'" := (cttz_u16).

Notation "'cttz_u32'" := (cttz_u32).

Notation "'cttz_u64'" := (cttz_u64).

Notation "'cttz_u8'" := (cttz_u8).

Notation "'cttz_usize'" := (cttz_usize).
