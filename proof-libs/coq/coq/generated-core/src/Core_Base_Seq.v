(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Super_Spec.
Export Super_Spec.

Require Import haxint_lt.
Export haxint_lt.

Require Import Clone.
Export Clone.

Require Import Core_Cmp.
Export Core_Cmp.

Require Import Sized.
Export Sized.

Require Import panicking.
Export panicking.

Definition hd__panic_cold_explicit (_ : unit) : t_Never_t :=
  panic_explicit tt.

Definition set_index__set_index_unary__panic_cold_explicit (_ : unit) : t_Never_t :=
  panic_explicit tt.

Definition hd (s : t_Seq_t T) : T :=
  match match_list s with
  | LIST_NIL  =>
    never_to_any (hd__panic_cold_explicit tt)
  | LIST_CONS hd _ =>
    hd
  end.

Definition is_empty (s : t_Seq_t T) : bool :=
  match match_list s with
  | LIST_NIL  =>
    true
  | LIST_CONS _ _ =>
    false
  end.

Definition tl (s : t_Seq_t T) : t_Seq_t T :=
  match match_list s with
  | LIST_NIL  =>
    nil tt
  | LIST_CONS _ tl =>
    tl
  end.

Definition eq_inner (s : t_Seq_t T) (other : t_Seq_t T) : bool :=
  match match_list (f_clone s) with
  | LIST_NIL  =>
    is_empty (f_clone other)
  | LIST_CONS x xs =>
    match match_list (f_clone other) with
    | LIST_NIL  =>
      false
    | LIST_CONS y ys =>
      andb (x=.?y) (eq_inner xs ys)
    end
  end.

#[global] Instance t_Seq_t T_t_PartialEq (T : _) : t_PartialEq (t_Seq_t T) (t_Seq_t T) := {
  f_eq (self : t_Seq_t T) (other : t_Seq_t T) := eq_inner (f_clone self) (f_clone other);
  f_ne (self : t_Seq_t T) (other : t_Seq_t T) := not (eq_inner (f_clone self) (f_clone other));
}.

Definition get_index__get_index_unary (l : t_Seq_t T) (i : t_Unary_t) : T :=
  match match_unary i with
  | UNARY_ZERO  =>
    hd l
  | UNARY_SUCC n =>
    get_index__get_index_unary (tl l) n
  end.

Definition get_index (s : t_Seq_t T) (i : t_HaxInt_t) : T :=
  get_index__get_index_unary s (unary_from_int i).

Definition len (s : t_Seq_t T) : t_HaxInt_t :=
  match match_list s with
  | LIST_NIL  =>
    v_HaxInt_ZERO
  | LIST_CONS _ tl =>
    succ (len tl)
  end.

Definition repeat__repeat_unary (n : t_Unary_t) (v : T) : t_Seq_t T :=
  match match_unary n with
  | UNARY_ZERO  =>
    nil tt
  | UNARY_SUCC m =>
    cons (repeat__repeat_unary m (f_clone v)) v
  end.

Definition repeat (n : t_HaxInt_t) (v : T) : t_Seq_t T :=
  repeat__repeat_unary (unary_from_int n) v.

Definition rev__rev_accum (s : t_Seq_t T) (accum : t_Seq_t T) : t_Seq_t T :=
  match match_list s with
  | LIST_NIL  =>
    accum
  | LIST_CONS hd tl =>
    rev__rev_accum tl (cons accum hd)
  end.

Definition rev (s : t_Seq_t T) : t_Seq_t T :=
  rev__rev_accum s (nil tt).

Definition set_index__set_index_unary (x : t_Seq_t T) (i : t_Unary_t) (v : T) : t_Seq_t T :=
  match match_list x with
  | LIST_NIL  =>
    never_to_any (set_index__set_index_unary__panic_cold_explicit tt)
  | LIST_CONS hd tl =>
    match match_unary i with
    | UNARY_ZERO  =>
      cons tl v
    | UNARY_SUCC n =>
      cons (set_index__set_index_unary tl n v) hd
    end
  end.

Definition set_index (s : t_Seq_t T) (i : t_HaxInt_t) (v : T) : t_Seq_t T :=
  set_index__set_index_unary s (unary_from_int i) v.
