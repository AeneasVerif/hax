(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Super_Spec.
Export Super_Spec.

Require Import Ordering.
Export Ordering.

Definition positive_cmp__cmp_binary_cont (x : t_Positive_t) (y : t_Positive_t) (r : t_Ordering_t) : t_Ordering_t :=
  match match_positive x with
  | POSITIVE_XH  =>
    match match_positive y with
    | POSITIVE_XH  =>
      r
    | POSITIVE_XO q | POSITIVE_XI q =>
      Ordering_Lesst_Ordering_t
    end
  | POSITIVE_XO p =>
    match match_positive y with
    | POSITIVE_XH  =>
      Ordering_Greatert_Ordering_t
    | POSITIVE_XO q =>
      positive_cmp__cmp_binary_cont p q r
    | POSITIVE_XI q =>
      positive_cmp__cmp_binary_cont p q Ordering_Lesst_Ordering_t
    end
  | POSITIVE_XI p =>
    match match_positive y with
    | POSITIVE_XH  =>
      Ordering_Greatert_Ordering_t
    | POSITIVE_XO q =>
      positive_cmp__cmp_binary_cont p q Ordering_Greatert_Ordering_t
    | POSITIVE_XI q =>
      positive_cmp__cmp_binary_cont p q r
    end
  end.

Definition positive_cmp (lhs : t_Positive_t) (rhs : t_Positive_t) : t_Ordering_t :=
  positive_cmp__cmp_binary_cont lhs rhs Ordering_Equalt_Ordering_t.

Definition positive_le (lhs : t_Positive_t) (rhs : t_Positive_t) : bool :=
  match Option_Some (positive_cmp lhs rhs) with
  | Option_Some Ordering_Less  | Ordering_Equal  =>
    true
  | _ =>
    false
  end.

Definition positive_pred_double (s : t_Positive_t) : t_Positive_t :=
  match match_positive s with
  | POSITIVE_XH  =>
    xH
  | POSITIVE_XO p =>
    xI (positive_pred_double p)
  | POSITIVE_XI p =>
    xI (xO p)
  end.

Definition positive_succ (s : t_Positive_t) : t_Positive_t :=
  match match_positive s with
  | POSITIVE_XH  =>
    xO xH
  | POSITIVE_XO q =>
    xI q
  | POSITIVE_XI q =>
    xO (positive_succ q)
  end.

Definition positive_add (lhs : t_Positive_t) (rhs : t_Positive_t) : t_Positive_t :=
  positive_add__add lhs rhs.

Definition positive_mul (lhs : t_Positive_t) (rhs : t_Positive_t) : t_Positive_t :=
  match match_positive lhs with
  | POSITIVE_XH  =>
    rhs
  | POSITIVE_XO p =>
    xO (positive_mul p rhs)
  | POSITIVE_XI p =>
    positive_add (f_clone rhs) (xO (positive_mul p rhs))
  end.

Definition positive_add__add (lhs : t_Positive_t) (rhs : t_Positive_t) : t_Positive_t :=
  match match_positive lhs with
  | POSITIVE_XH  =>
    match match_positive rhs with
    | POSITIVE_XH  =>
      xO xH
    | POSITIVE_XO q =>
      xI q
    | POSITIVE_XI q =>
      xO (positive_succ q)
    end
  | POSITIVE_XO p =>
    match match_positive rhs with
    | POSITIVE_XH  =>
      xI p
    | POSITIVE_XO q =>
      xO (positive_add__add p q)
    | POSITIVE_XI q =>
      xI (positive_add__add p q)
    end
  | POSITIVE_XI p =>
    match match_positive rhs with
    | POSITIVE_XH  =>
      xO (positive_succ p)
    | POSITIVE_XO q =>
      xI (positive_add__add p q)
    | POSITIVE_XI q =>
      xO (positive_add__add_carry p q)
    end
  end.

Definition positive_add__add_carry (lhs : t_Positive_t) (rhs : t_Positive_t) : t_Positive_t :=
  match match_positive lhs with
  | POSITIVE_XH  =>
    match match_positive rhs with
    | POSITIVE_XH  =>
      xI xH
    | POSITIVE_XO q =>
      xO (positive_succ q)
    | POSITIVE_XI q =>
      xI (positive_succ q)
    end
  | POSITIVE_XO p =>
    match match_positive rhs with
    | POSITIVE_XH  =>
      xO (positive_succ p)
    | POSITIVE_XO q =>
      xI (positive_add__add p q)
    | POSITIVE_XI q =>
      xO (positive_add__add_carry p q)
    end
  | POSITIVE_XI p =>
    match match_positive rhs with
    | POSITIVE_XH  =>
      xI (positive_succ p)
    | POSITIVE_XO q =>
      xO (positive_add__add_carry p q)
    | POSITIVE_XI q =>
      xI (positive_add__add_carry p q)
    end
  end.
